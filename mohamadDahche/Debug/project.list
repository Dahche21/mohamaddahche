
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800c268  0800c268  0001c268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c744  0800c744  000202d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c744  0800c744  0001c744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c74c  0800c74c  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c74c  0800c74c  0001c74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c750  0800c750  0001c750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800c754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202d0  2**0
                  CONTENTS
 10 .bss          00001dd8  200002d0  200002d0  000202d0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200020a8  200020a8  000202d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014e89  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033a6  00000000  00000000  00035189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  00038530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010e8  00000000  00000000  000397a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025dff  00000000  00000000  0003a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016a88  00000000  00000000  00060687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da6ef  00000000  00000000  0007710f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001517fe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005eb4  00000000  00000000  00151850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c250 	.word	0x0800c250

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	0800c250 	.word	0x0800c250

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b9aa 	b.w	8000f78 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f83c 	bl	8000ca8 <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_d2lz>:
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2300      	movs	r3, #0
 8000c42:	4604      	mov	r4, r0
 8000c44:	460d      	mov	r5, r1
 8000c46:	f7ff ff49 	bl	8000adc <__aeabi_dcmplt>
 8000c4a:	b928      	cbnz	r0, 8000c58 <__aeabi_d2lz+0x1c>
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	4629      	mov	r1, r5
 8000c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c54:	f000 b80a 	b.w	8000c6c <__aeabi_d2ulz>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5e:	f000 f805 	bl	8000c6c <__aeabi_d2ulz>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	bd38      	pop	{r3, r4, r5, pc}
 8000c6a:	bf00      	nop

08000c6c <__aeabi_d2ulz>:
 8000c6c:	b5d0      	push	{r4, r6, r7, lr}
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__aeabi_d2ulz+0x34>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	4606      	mov	r6, r0
 8000c74:	460f      	mov	r7, r1
 8000c76:	f7ff fcbf 	bl	80005f8 <__aeabi_dmul>
 8000c7a:	f7ff ff57 	bl	8000b2c <__aeabi_d2uiz>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	f7ff fc40 	bl	8000504 <__aeabi_ui2d>
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <__aeabi_d2ulz+0x38>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f7ff fcb6 	bl	80005f8 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4630      	mov	r0, r6
 8000c92:	4639      	mov	r1, r7
 8000c94:	f7ff faf8 	bl	8000288 <__aeabi_dsub>
 8000c98:	f7ff ff48 	bl	8000b2c <__aeabi_d2uiz>
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca0:	3df00000 	.word	0x3df00000
 8000ca4:	41f00000 	.word	0x41f00000

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <receiver>:
float variablew2 = 0.0;//variable to change weight 2
float variableb1 = 0.0;//variable to change bias


void receiver(char* buffer)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

    if (strncmp(buffer, "SET variablew1", 14) == 0)
 8000f84:	220e      	movs	r2, #14
 8000f86:	4923      	ldr	r1, [pc, #140]	; (8001014 <receiver+0x98>)
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f008 fab3 	bl	80094f4 <strncmp>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10e      	bne.n	8000fb2 <receiver+0x36>
    {
        variablew1 = atof(buffer + 15);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	330f      	adds	r3, #15
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f008 fa67 	bl	800946c <atof>
 8000f9e:	ec53 2b10 	vmov	r2, r3, d0
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f7ff fde1 	bl	8000b6c <__aeabi_d2f>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a1a      	ldr	r2, [pc, #104]	; (8001018 <receiver+0x9c>)
 8000fae:	6013      	str	r3, [r2, #0]
    else if (strncmp(buffer, "SET variableb1", 14) == 0)
        {
            variableb1 = atof(buffer + 15);
        }

}
 8000fb0:	e02c      	b.n	800100c <receiver+0x90>
    else if (strncmp(buffer, "SET variablew2", 14) == 0)
 8000fb2:	220e      	movs	r2, #14
 8000fb4:	4919      	ldr	r1, [pc, #100]	; (800101c <receiver+0xa0>)
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f008 fa9c 	bl	80094f4 <strncmp>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10e      	bne.n	8000fe0 <receiver+0x64>
        variablew2 = atof(buffer + 15);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	330f      	adds	r3, #15
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f008 fa50 	bl	800946c <atof>
 8000fcc:	ec53 2b10 	vmov	r2, r3, d0
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f7ff fdca 	bl	8000b6c <__aeabi_d2f>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4a11      	ldr	r2, [pc, #68]	; (8001020 <receiver+0xa4>)
 8000fdc:	6013      	str	r3, [r2, #0]
}
 8000fde:	e015      	b.n	800100c <receiver+0x90>
    else if (strncmp(buffer, "SET variableb1", 14) == 0)
 8000fe0:	220e      	movs	r2, #14
 8000fe2:	4910      	ldr	r1, [pc, #64]	; (8001024 <receiver+0xa8>)
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f008 fa85 	bl	80094f4 <strncmp>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10d      	bne.n	800100c <receiver+0x90>
            variableb1 = atof(buffer + 15);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	330f      	adds	r3, #15
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f008 fa39 	bl	800946c <atof>
 8000ffa:	ec53 2b10 	vmov	r2, r3, d0
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	f7ff fdb3 	bl	8000b6c <__aeabi_d2f>
 8001006:	4603      	mov	r3, r0
 8001008:	4a07      	ldr	r2, [pc, #28]	; (8001028 <receiver+0xac>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	0800c268 	.word	0x0800c268
 8001018:	20000478 	.word	0x20000478
 800101c:	0800c278 	.word	0x0800c278
 8001020:	2000047c 	.word	0x2000047c
 8001024:	0800c288 	.word	0x0800c288
 8001028:	20000480 	.word	0x20000480

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b5b0      	push	{r4, r5, r7, lr}
 800102e:	b09a      	sub	sp, #104	; 0x68
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f000 fe6b 	bl	8001d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001036:	f000 f9e5 	bl	8001404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103a:	f000 fba5 	bl	8001788 <MX_GPIO_Init>
  MX_ADC1_Init();
 800103e:	f000 fa4b 	bl	80014d8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001042:	f000 fa9b 	bl	800157c <MX_ADC2_Init>
  MX_TIM3_Init();
 8001046:	f000 faeb 	bl	8001620 <MX_TIM3_Init>
  MX_TIM5_Init();
 800104a:	f000 fb43 	bl	80016d4 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 800104e:	f007 fd0f 	bl	8008a70 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001052:	2100      	movs	r1, #0
 8001054:	488f      	ldr	r0, [pc, #572]	; (8001294 <main+0x268>)
 8001056:	f003 fcbf 	bl	80049d8 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800105a:	2108      	movs	r1, #8
 800105c:	488e      	ldr	r0, [pc, #568]	; (8001298 <main+0x26c>)
 800105e:	f003 fcbb 	bl	80049d8 <HAL_TIM_PWM_Start>
HAL_ADC_Start(&hadc1);
 8001062:	488e      	ldr	r0, [pc, #568]	; (800129c <main+0x270>)
 8001064:	f000 ff2c 	bl	8001ec0 <HAL_ADC_Start>
HAL_ADC_Start(&hadc2);
 8001068:	488d      	ldr	r0, [pc, #564]	; (80012a0 <main+0x274>)
 800106a:	f000 ff29 	bl	8001ec0 <HAL_ADC_Start>

double weight1=0.5;
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	4b8c      	ldr	r3, [pc, #560]	; (80012a4 <main+0x278>)
 8001074:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
double weight2=0.5;
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	4b89      	ldr	r3, [pc, #548]	; (80012a4 <main+0x278>)
 800107e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
double bias=-0.75;
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	4b88      	ldr	r3, [pc, #544]	; (80012a8 <main+0x27c>)
 8001088:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38


double sum1=0;
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
double sum2=0;
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	f04f 0300 	mov.w	r3, #0
 80010a0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
double sum=0.0;
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  weight1=variablew1;
 80010b0:	4b7e      	ldr	r3, [pc, #504]	; (80012ac <main+0x280>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fa47 	bl	8000548 <__aeabi_f2d>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	 weight2=variablew2;
 80010c2:	4b7b      	ldr	r3, [pc, #492]	; (80012b0 <main+0x284>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa3e 	bl	8000548 <__aeabi_f2d>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	   bias=variableb1;
 80010d4:	4b77      	ldr	r3, [pc, #476]	; (80012b4 <main+0x288>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa35 	bl	8000548 <__aeabi_f2d>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	  receiver( buffer);
 80010e6:	4874      	ldr	r0, [pc, #464]	; (80012b8 <main+0x28c>)
 80010e8:	f7ff ff48 	bl	8000f7c <receiver>
	  memset(buffer, 0, sizeof(buffer));
 80010ec:	2240      	movs	r2, #64	; 0x40
 80010ee:	2100      	movs	r1, #0
 80010f0:	4871      	ldr	r0, [pc, #452]	; (80012b8 <main+0x28c>)
 80010f2:	f008 f9f7 	bl	80094e4 <memset>


	  htim3.Instance->CCR1= weight1 * (htim3.Instance->ARR );//assigning the pulse
 80010f6:	4b67      	ldr	r3, [pc, #412]	; (8001294 <main+0x268>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fa01 	bl	8000504 <__aeabi_ui2d>
 8001102:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001106:	f7ff fa77 	bl	80005f8 <__aeabi_dmul>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4961      	ldr	r1, [pc, #388]	; (8001294 <main+0x268>)
 8001110:	680c      	ldr	r4, [r1, #0]
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f7ff fd09 	bl	8000b2c <__aeabi_d2uiz>
 800111a:	4603      	mov	r3, r0
 800111c:	6363      	str	r3, [r4, #52]	; 0x34
	  htim5.Instance->CCR3= weight2 * (htim5.Instance->ARR );
 800111e:	4b5e      	ldr	r3, [pc, #376]	; (8001298 <main+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff f9ed 	bl	8000504 <__aeabi_ui2d>
 800112a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800112e:	f7ff fa63 	bl	80005f8 <__aeabi_dmul>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4958      	ldr	r1, [pc, #352]	; (8001298 <main+0x26c>)
 8001138:	680c      	ldr	r4, [r1, #0]
 800113a:	4610      	mov	r0, r2
 800113c:	4619      	mov	r1, r3
 800113e:	f7ff fcf5 	bl	8000b2c <__aeabi_d2uiz>
 8001142:	4603      	mov	r3, r0
 8001144:	63e3      	str	r3, [r4, #60]	; 0x3c

	  pwm1=htim3.Instance->CNT >= htim3.Instance->CCR1? 0 : 1;//reading pwm signal to check in monitor
 8001146:	4b53      	ldr	r3, [pc, #332]	; (8001294 <main+0x268>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800114c:	4b51      	ldr	r3, [pc, #324]	; (8001294 <main+0x268>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001152:	429a      	cmp	r2, r3
 8001154:	d203      	bcs.n	800115e <main+0x132>
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	4b58      	ldr	r3, [pc, #352]	; (80012bc <main+0x290>)
 800115c:	e003      	b.n	8001166 <main+0x13a>
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	4956      	ldr	r1, [pc, #344]	; (80012c0 <main+0x294>)
 8001168:	e9c1 2300 	strd	r2, r3, [r1]
	  pwm2=htim5.Instance->CNT >= htim5.Instance->CCR3? 0 : 1;
 800116c:	4b4a      	ldr	r3, [pc, #296]	; (8001298 <main+0x26c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001172:	4b49      	ldr	r3, [pc, #292]	; (8001298 <main+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001178:	429a      	cmp	r2, r3
 800117a:	d203      	bcs.n	8001184 <main+0x158>
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	4b4e      	ldr	r3, [pc, #312]	; (80012bc <main+0x290>)
 8001182:	e003      	b.n	800118c <main+0x160>
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	494d      	ldr	r1, [pc, #308]	; (80012c4 <main+0x298>)
 800118e:	e9c1 2300 	strd	r2, r3, [r1]
	        sum1=0;
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  	  	  	sum2=0;
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58





	  for(int i=0;i<1000;i++)//we are using this loop to take the average of adc reading
 80011aa:	2300      	movs	r3, #0
 80011ac:	657b      	str	r3, [r7, #84]	; 0x54
 80011ae:	e042      	b.n	8001236 <main+0x20a>
	  	  	  {
	  	  	   if(HAL_ADC_PollForConversion(&hadc1, 10)== HAL_OK)
 80011b0:	210a      	movs	r1, #10
 80011b2:	483a      	ldr	r0, [pc, #232]	; (800129c <main+0x270>)
 80011b4:	f000 ff56 	bl	8002064 <HAL_ADC_PollForConversion>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d118      	bne.n	80011f0 <main+0x1c4>
	  	  	  {
	  	  		  adcread1=HAL_ADC_GetValue(&hadc1);
 80011be:	4837      	ldr	r0, [pc, #220]	; (800129c <main+0x270>)
 80011c0:	f000 ffdb 	bl	800217a <HAL_ADC_GetValue>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <main+0x29c>)
 80011ca:	601a      	str	r2, [r3, #0]

	  	  		  sum1+= adcread1;
 80011cc:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <main+0x29c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f9a7 	bl	8000524 <__aeabi_i2d>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80011de:	f7ff f855 	bl	800028c <__adddf3>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	  	  		  HAL_ADC_Start(&hadc1);
 80011ea:	482c      	ldr	r0, [pc, #176]	; (800129c <main+0x270>)
 80011ec:	f000 fe68 	bl	8001ec0 <HAL_ADC_Start>
	  	  	  }

	  	  	  if(HAL_ADC_PollForConversion(&hadc2, 10)== HAL_OK)
 80011f0:	210a      	movs	r1, #10
 80011f2:	482b      	ldr	r0, [pc, #172]	; (80012a0 <main+0x274>)
 80011f4:	f000 ff36 	bl	8002064 <HAL_ADC_PollForConversion>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d118      	bne.n	8001230 <main+0x204>
	  	  	  {
	  	  	      adcread2=HAL_ADC_GetValue(&hadc2);
 80011fe:	4828      	ldr	r0, [pc, #160]	; (80012a0 <main+0x274>)
 8001200:	f000 ffbb 	bl	800217a <HAL_ADC_GetValue>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4b30      	ldr	r3, [pc, #192]	; (80012cc <main+0x2a0>)
 800120a:	601a      	str	r2, [r3, #0]
	  	  	    sum2+= adcread2;
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <main+0x2a0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f987 	bl	8000524 <__aeabi_i2d>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800121e:	f7ff f835 	bl	800028c <__adddf3>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  	  	      HAL_ADC_Start(&hadc2);
 800122a:	481d      	ldr	r0, [pc, #116]	; (80012a0 <main+0x274>)
 800122c:	f000 fe48 	bl	8001ec0 <HAL_ADC_Start>
	  for(int i=0;i<1000;i++)//we are using this loop to take the average of adc reading
 8001230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001232:	3301      	adds	r3, #1
 8001234:	657b      	str	r3, [r7, #84]	; 0x54
 8001236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001238:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800123c:	dbb8      	blt.n	80011b0 <main+0x184>
	  	  	  }


	  	  	 }
	  	   av_adcread1=sum1/1000.0;  // taking the average of adc reading
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <main+0x2a4>)
 8001244:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001248:	f7ff fb00 	bl	800084c <__aeabi_ddiv>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4920      	ldr	r1, [pc, #128]	; (80012d4 <main+0x2a8>)
 8001252:	e9c1 2300 	strd	r2, r3, [r1]
	  	   av_adcread2=sum2/1000.0;
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <main+0x2a4>)
 800125c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001260:	f7ff faf4 	bl	800084c <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	491b      	ldr	r1, [pc, #108]	; (80012d8 <main+0x2ac>)
 800126a:	e9c1 2300 	strd	r2, r3, [r1]


	  	 int inputs[4][2] =
 800126e:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <main+0x2b0>)
 8001270:	1d3c      	adds	r4, r7, #4
 8001272:	461d      	mov	r5, r3
 8001274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001278:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800127c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  	  			  { 0, 0 },
	  	  			  { 0, 1 },
	  	  			  { 1, 0 },
	  	  			  { 1, 1 }
	  	  	  };
	  	  	  uint16_t pins[] =
 8001280:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <main+0x2b4>)
 8001282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001286:	e892 0003 	ldmia.w	r2, {r0, r1}
 800128a:	e883 0003 	stmia.w	r3, {r0, r1}
	  	  			  GPIO_PIN_13,
	  	  			  GPIO_PIN_14,
	  	  			  GPIO_PIN_15,
	  	  	  };

	  	  	  for (int i = 0; i < 4; i++)
 800128e:	2300      	movs	r3, #0
 8001290:	653b      	str	r3, [r7, #80]	; 0x50
 8001292:	e0a1      	b.n	80013d8 <main+0x3ac>
 8001294:	200003a8 	.word	0x200003a8
 8001298:	200003f0 	.word	0x200003f0
 800129c:	20000318 	.word	0x20000318
 80012a0:	20000360 	.word	0x20000360
 80012a4:	3fe00000 	.word	0x3fe00000
 80012a8:	bfe80000 	.word	0xbfe80000
 80012ac:	20000478 	.word	0x20000478
 80012b0:	2000047c 	.word	0x2000047c
 80012b4:	20000480 	.word	0x20000480
 80012b8:	20000438 	.word	0x20000438
 80012bc:	3ff00000 	.word	0x3ff00000
 80012c0:	20000308 	.word	0x20000308
 80012c4:	20000310 	.word	0x20000310
 80012c8:	20000300 	.word	0x20000300
 80012cc:	20000304 	.word	0x20000304
 80012d0:	408f4000 	.word	0x408f4000
 80012d4:	200002f0 	.word	0x200002f0
 80012d8:	200002f8 	.word	0x200002f8
 80012dc:	0800c298 	.word	0x0800c298
 80012e0:	0800c2b8 	.word	0x0800c2b8
	  	  	  {   sum=0;
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	  	  		  sum += inputs[i][0] * (av_adcread1 / 4096.0);
 80012f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	3368      	adds	r3, #104	; 0x68
 80012f6:	443b      	add	r3, r7
 80012f8:	f853 3c64 	ldr.w	r3, [r3, #-100]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f911 	bl	8000524 <__aeabi_i2d>
 8001302:	4604      	mov	r4, r0
 8001304:	460d      	mov	r5, r1
 8001306:	4b39      	ldr	r3, [pc, #228]	; (80013ec <main+0x3c0>)
 8001308:	e9d3 0100 	ldrd	r0, r1, [r3]
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <main+0x3c4>)
 8001312:	f7ff fa9b 	bl	800084c <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4620      	mov	r0, r4
 800131c:	4629      	mov	r1, r5
 800131e:	f7ff f96b 	bl	80005f8 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800132a:	f7fe ffaf 	bl	800028c <__adddf3>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	  	  		  sum += inputs[i][1] * (av_adcread2 / 4096.0);
 8001336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	3368      	adds	r3, #104	; 0x68
 800133c:	443b      	add	r3, r7
 800133e:	f853 3c60 	ldr.w	r3, [r3, #-96]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f8ee 	bl	8000524 <__aeabi_i2d>
 8001348:	4604      	mov	r4, r0
 800134a:	460d      	mov	r5, r1
 800134c:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <main+0x3c8>)
 800134e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <main+0x3c4>)
 8001358:	f7ff fa78 	bl	800084c <__aeabi_ddiv>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4620      	mov	r0, r4
 8001362:	4629      	mov	r1, r5
 8001364:	f7ff f948 	bl	80005f8 <__aeabi_dmul>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001370:	f7fe ff8c 	bl	800028c <__adddf3>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	  	  		  sum+= bias;
 800137c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001380:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001384:	f7fe ff82 	bl	800028c <__adddf3>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	  	  	      out = sum >= 0 ? 1.0 : 0.0;
 8001390:	2301      	movs	r3, #1
 8001392:	461c      	mov	r4, r3
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80013a0:	f7ff fbb0 	bl	8000b04 <__aeabi_dcmpge>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <main+0x382>
 80013aa:	2300      	movs	r3, #0
 80013ac:	461c      	mov	r4, r3
 80013ae:	b2e3      	uxtb	r3, r4
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  	  	      HAL_GPIO_WritePin(GPIOD, pins[i], out == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80013b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	3368      	adds	r3, #104	; 0x68
 80013b8:	443b      	add	r3, r7
 80013ba:	f833 1c44 	ldrh.w	r1, [r3, #-68]
 80013be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	bf14      	ite	ne
 80013c4:	2301      	movne	r3, #1
 80013c6:	2300      	moveq	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	461a      	mov	r2, r3
 80013cc:	480a      	ldr	r0, [pc, #40]	; (80013f8 <main+0x3cc>)
 80013ce:	f001 fbad 	bl	8002b2c <HAL_GPIO_WritePin>
	  	  	  for (int i = 0; i < 4; i++)
 80013d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013d4:	3301      	adds	r3, #1
 80013d6:	653b      	str	r3, [r7, #80]	; 0x50
 80013d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013da:	2b03      	cmp	r3, #3
 80013dc:	dd82      	ble.n	80012e4 <main+0x2b8>

	  	  	  }

	  	  	  HAL_ADC_Start(&hadc1);
 80013de:	4807      	ldr	r0, [pc, #28]	; (80013fc <main+0x3d0>)
 80013e0:	f000 fd6e 	bl	8001ec0 <HAL_ADC_Start>
	  	  	  HAL_ADC_Start(&hadc2);
 80013e4:	4806      	ldr	r0, [pc, #24]	; (8001400 <main+0x3d4>)
 80013e6:	f000 fd6b 	bl	8001ec0 <HAL_ADC_Start>
  {
 80013ea:	e661      	b.n	80010b0 <main+0x84>
 80013ec:	200002f0 	.word	0x200002f0
 80013f0:	40b00000 	.word	0x40b00000
 80013f4:	200002f8 	.word	0x200002f8
 80013f8:	40020c00 	.word	0x40020c00
 80013fc:	20000318 	.word	0x20000318
 8001400:	20000360 	.word	0x20000360

08001404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b094      	sub	sp, #80	; 0x50
 8001408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140a:	f107 0320 	add.w	r3, r7, #32
 800140e:	2230      	movs	r2, #48	; 0x30
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f008 f866 	bl	80094e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <SystemClock_Config+0xcc>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	4a27      	ldr	r2, [pc, #156]	; (80014d0 <SystemClock_Config+0xcc>)
 8001432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001436:	6413      	str	r3, [r2, #64]	; 0x40
 8001438:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <SystemClock_Config+0xcc>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <SystemClock_Config+0xd0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <SystemClock_Config+0xd0>)
 800144e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <SystemClock_Config+0xd0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001460:	2301      	movs	r3, #1
 8001462:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001464:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146a:	2302      	movs	r3, #2
 800146c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800146e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001472:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001474:	2304      	movs	r3, #4
 8001476:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001478:	23a8      	movs	r3, #168	; 0xa8
 800147a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800147c:	2302      	movs	r3, #2
 800147e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001480:	2307      	movs	r3, #7
 8001482:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001484:	f107 0320 	add.w	r3, r7, #32
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fde5 	bl	8004058 <HAL_RCC_OscConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001494:	f000 f9ca 	bl	800182c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001498:	230f      	movs	r3, #15
 800149a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800149c:	2302      	movs	r3, #2
 800149e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2105      	movs	r1, #5
 80014b6:	4618      	mov	r0, r3
 80014b8:	f003 f846 	bl	8004548 <HAL_RCC_ClockConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014c2:	f000 f9b3 	bl	800182c <Error_Handler>
  }
}
 80014c6:	bf00      	nop
 80014c8:	3750      	adds	r7, #80	; 0x50
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40007000 	.word	0x40007000

080014d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014de:	463b      	mov	r3, r7
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <MX_ADC1_Init+0x98>)
 80014ec:	4a21      	ldr	r2, [pc, #132]	; (8001574 <MX_ADC1_Init+0x9c>)
 80014ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <MX_ADC1_Init+0x98>)
 80014f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014f8:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <MX_ADC1_Init+0x98>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <MX_ADC1_Init+0x98>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <MX_ADC1_Init+0x98>)
 8001506:	2200      	movs	r2, #0
 8001508:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <MX_ADC1_Init+0x98>)
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <MX_ADC1_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <MX_ADC1_Init+0x98>)
 800151a:	4a17      	ldr	r2, [pc, #92]	; (8001578 <MX_ADC1_Init+0xa0>)
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MX_ADC1_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <MX_ADC1_Init+0x98>)
 8001526:	2201      	movs	r2, #1
 8001528:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_ADC1_Init+0x98>)
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_ADC1_Init+0x98>)
 8001534:	2201      	movs	r2, #1
 8001536:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001538:	480d      	ldr	r0, [pc, #52]	; (8001570 <MX_ADC1_Init+0x98>)
 800153a:	f000 fc7d 	bl	8001e38 <HAL_ADC_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001544:	f000 f972 	bl	800182c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001548:	2300      	movs	r3, #0
 800154a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800154c:	2301      	movs	r3, #1
 800154e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001550:	2307      	movs	r3, #7
 8001552:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001554:	463b      	mov	r3, r7
 8001556:	4619      	mov	r1, r3
 8001558:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_ADC1_Init+0x98>)
 800155a:	f000 fe1b 	bl	8002194 <HAL_ADC_ConfigChannel>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001564:	f000 f962 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000318 	.word	0x20000318
 8001574:	40012000 	.word	0x40012000
 8001578:	0f000001 	.word	0x0f000001

0800157c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001582:	463b      	mov	r3, r7
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800158e:	4b21      	ldr	r3, [pc, #132]	; (8001614 <MX_ADC2_Init+0x98>)
 8001590:	4a21      	ldr	r2, [pc, #132]	; (8001618 <MX_ADC2_Init+0x9c>)
 8001592:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001594:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <MX_ADC2_Init+0x98>)
 8001596:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800159a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <MX_ADC2_Init+0x98>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <MX_ADC2_Init+0x98>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <MX_ADC2_Init+0x98>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <MX_ADC2_Init+0x98>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <MX_ADC2_Init+0x98>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <MX_ADC2_Init+0x98>)
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <MX_ADC2_Init+0xa0>)
 80015c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_ADC2_Init+0x98>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <MX_ADC2_Init+0x98>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_ADC2_Init+0x98>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MX_ADC2_Init+0x98>)
 80015d8:	2201      	movs	r2, #1
 80015da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_ADC2_Init+0x98>)
 80015de:	f000 fc2b 	bl	8001e38 <HAL_ADC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80015e8:	f000 f920 	bl	800182c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015f0:	2301      	movs	r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80015f4:	2307      	movs	r3, #7
 80015f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015f8:	463b      	mov	r3, r7
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_ADC2_Init+0x98>)
 80015fe:	f000 fdc9 	bl	8002194 <HAL_ADC_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001608:	f000 f910 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000360 	.word	0x20000360
 8001618:	40012100 	.word	0x40012100
 800161c:	0f000001 	.word	0x0f000001

08001620 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001626:	f107 0320 	add.w	r3, r7, #32
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	615a      	str	r2, [r3, #20]
 8001640:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001642:	4b22      	ldr	r3, [pc, #136]	; (80016cc <MX_TIM3_Init+0xac>)
 8001644:	4a22      	ldr	r2, [pc, #136]	; (80016d0 <MX_TIM3_Init+0xb0>)
 8001646:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 25000-1;
 8001648:	4b20      	ldr	r3, [pc, #128]	; (80016cc <MX_TIM3_Init+0xac>)
 800164a:	f246 12a7 	movw	r2, #24999	; 0x61a7
 800164e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001650:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <MX_TIM3_Init+0xac>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001656:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <MX_TIM3_Init+0xac>)
 8001658:	2263      	movs	r2, #99	; 0x63
 800165a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <MX_TIM3_Init+0xac>)
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <MX_TIM3_Init+0xac>)
 8001664:	2280      	movs	r2, #128	; 0x80
 8001666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001668:	4818      	ldr	r0, [pc, #96]	; (80016cc <MX_TIM3_Init+0xac>)
 800166a:	f003 f965 	bl	8004938 <HAL_TIM_PWM_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001674:	f000 f8da 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001680:	f107 0320 	add.w	r3, r7, #32
 8001684:	4619      	mov	r1, r3
 8001686:	4811      	ldr	r0, [pc, #68]	; (80016cc <MX_TIM3_Init+0xac>)
 8001688:	f003 fda6 	bl	80051d8 <HAL_TIMEx_MasterConfigSynchronization>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001692:	f000 f8cb 	bl	800182c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001696:	2360      	movs	r3, #96	; 0x60
 8001698:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 60-1;
 800169a:	233b      	movs	r3, #59	; 0x3b
 800169c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2200      	movs	r2, #0
 80016aa:	4619      	mov	r1, r3
 80016ac:	4807      	ldr	r0, [pc, #28]	; (80016cc <MX_TIM3_Init+0xac>)
 80016ae:	f003 fa5b 	bl	8004b68 <HAL_TIM_PWM_ConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80016b8:	f000 f8b8 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016bc:	4803      	ldr	r0, [pc, #12]	; (80016cc <MX_TIM3_Init+0xac>)
 80016be:	f000 f98f 	bl	80019e0 <HAL_TIM_MspPostInit>

}
 80016c2:	bf00      	nop
 80016c4:	3728      	adds	r7, #40	; 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200003a8 	.word	0x200003a8
 80016d0:	40000400 	.word	0x40000400

080016d4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]
 80016f2:	615a      	str	r2, [r3, #20]
 80016f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <MX_TIM5_Init+0xac>)
 80016f8:	4a22      	ldr	r2, [pc, #136]	; (8001784 <MX_TIM5_Init+0xb0>)
 80016fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 25000-1;
 80016fc:	4b20      	ldr	r3, [pc, #128]	; (8001780 <MX_TIM5_Init+0xac>)
 80016fe:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001702:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_TIM5_Init+0xac>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <MX_TIM5_Init+0xac>)
 800170c:	2263      	movs	r2, #99	; 0x63
 800170e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <MX_TIM5_Init+0xac>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MX_TIM5_Init+0xac>)
 8001718:	2280      	movs	r2, #128	; 0x80
 800171a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800171c:	4818      	ldr	r0, [pc, #96]	; (8001780 <MX_TIM5_Init+0xac>)
 800171e:	f003 f90b 	bl	8004938 <HAL_TIM_PWM_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001728:	f000 f880 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001734:	f107 0320 	add.w	r3, r7, #32
 8001738:	4619      	mov	r1, r3
 800173a:	4811      	ldr	r0, [pc, #68]	; (8001780 <MX_TIM5_Init+0xac>)
 800173c:	f003 fd4c 	bl	80051d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001746:	f000 f871 	bl	800182c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800174a:	2360      	movs	r3, #96	; 0x60
 800174c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 40-1;
 800174e:	2327      	movs	r3, #39	; 0x27
 8001750:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2208      	movs	r2, #8
 800175e:	4619      	mov	r1, r3
 8001760:	4807      	ldr	r0, [pc, #28]	; (8001780 <MX_TIM5_Init+0xac>)
 8001762:	f003 fa01 	bl	8004b68 <HAL_TIM_PWM_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800176c:	f000 f85e 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001770:	4803      	ldr	r0, [pc, #12]	; (8001780 <MX_TIM5_Init+0xac>)
 8001772:	f000 f935 	bl	80019e0 <HAL_TIM_MspPostInit>

}
 8001776:	bf00      	nop
 8001778:	3728      	adds	r7, #40	; 0x28
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200003f0 	.word	0x200003f0
 8001784:	40000c00 	.word	0x40000c00

08001788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a1f      	ldr	r2, [pc, #124]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a18      	ldr	r2, [pc, #96]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a11      	ldr	r2, [pc, #68]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017e0:	f043 0308 	orr.w	r3, r3, #8
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <MX_GPIO_Init+0x9c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80017f8:	480b      	ldr	r0, [pc, #44]	; (8001828 <MX_GPIO_Init+0xa0>)
 80017fa:	f001 f997 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80017fe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001804:	2301      	movs	r3, #1
 8001806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	4619      	mov	r1, r3
 8001816:	4804      	ldr	r0, [pc, #16]	; (8001828 <MX_GPIO_Init+0xa0>)
 8001818:	f000 ffec 	bl	80027f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800181c:	bf00      	nop
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40023800 	.word	0x40023800
 8001828:	40020c00 	.word	0x40020c00

0800182c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001834:	e7fe      	b.n	8001834 <Error_Handler+0x8>
	...

08001838 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <HAL_MspInit+0x4c>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a0f      	ldr	r2, [pc, #60]	; (8001884 <HAL_MspInit+0x4c>)
 8001848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <HAL_MspInit+0x4c>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_MspInit+0x4c>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a08      	ldr	r2, [pc, #32]	; (8001884 <HAL_MspInit+0x4c>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_MspInit+0x4c>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800

08001888 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08c      	sub	sp, #48	; 0x30
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a2e      	ldr	r2, [pc, #184]	; (8001960 <HAL_ADC_MspInit+0xd8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d128      	bne.n	80018fc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a2c      	ldr	r2, [pc, #176]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b2a      	ldr	r3, [pc, #168]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a25      	ldr	r2, [pc, #148]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b23      	ldr	r3, [pc, #140]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018e2:	2301      	movs	r3, #1
 80018e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e6:	2303      	movs	r3, #3
 80018e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	481c      	ldr	r0, [pc, #112]	; (8001968 <HAL_ADC_MspInit+0xe0>)
 80018f6:	f000 ff7d 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80018fa:	e02c      	b.n	8001956 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a1a      	ldr	r2, [pc, #104]	; (800196c <HAL_ADC_MspInit+0xe4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d127      	bne.n	8001956 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	4a15      	ldr	r2, [pc, #84]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 8001910:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_ADC_MspInit+0xdc>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800193e:	2302      	movs	r3, #2
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001942:	2303      	movs	r3, #3
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 031c 	add.w	r3, r7, #28
 800194e:	4619      	mov	r1, r3
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <HAL_ADC_MspInit+0xe0>)
 8001952:	f000 ff4f 	bl	80027f4 <HAL_GPIO_Init>
}
 8001956:	bf00      	nop
 8001958:	3730      	adds	r7, #48	; 0x30
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40012000 	.word	0x40012000
 8001964:	40023800 	.word	0x40023800
 8001968:	40020000 	.word	0x40020000
 800196c:	40012100 	.word	0x40012100

08001970 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a15      	ldr	r2, [pc, #84]	; (80019d4 <HAL_TIM_PWM_MspInit+0x64>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d10e      	bne.n	80019a0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_TIM_PWM_MspInit+0x68>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a13      	ldr	r2, [pc, #76]	; (80019d8 <HAL_TIM_PWM_MspInit+0x68>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_TIM_PWM_MspInit+0x68>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800199e:	e012      	b.n	80019c6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM5)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <HAL_TIM_PWM_MspInit+0x6c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d10d      	bne.n	80019c6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <HAL_TIM_PWM_MspInit+0x68>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <HAL_TIM_PWM_MspInit+0x68>)
 80019b4:	f043 0308 	orr.w	r3, r3, #8
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <HAL_TIM_PWM_MspInit+0x68>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40000400 	.word	0x40000400
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40000c00 	.word	0x40000c00

080019e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a24      	ldr	r2, [pc, #144]	; (8001a90 <HAL_TIM_MspPostInit+0xb0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d11e      	bne.n	8001a40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <HAL_TIM_MspPostInit+0xb4>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <HAL_TIM_MspPostInit+0xb4>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <HAL_TIM_MspPostInit+0xb4>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a1e:	2340      	movs	r3, #64	; 0x40
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	4817      	ldr	r0, [pc, #92]	; (8001a98 <HAL_TIM_MspPostInit+0xb8>)
 8001a3a:	f000 fedb 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001a3e:	e022      	b.n	8001a86 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a15      	ldr	r2, [pc, #84]	; (8001a9c <HAL_TIM_MspPostInit+0xbc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d11d      	bne.n	8001a86 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_TIM_MspPostInit+0xb4>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <HAL_TIM_MspPostInit+0xb4>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_TIM_MspPostInit+0xb4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a66:	2304      	movs	r3, #4
 8001a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a76:	2302      	movs	r3, #2
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <HAL_TIM_MspPostInit+0xb8>)
 8001a82:	f000 feb7 	bl	80027f4 <HAL_GPIO_Init>
}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40000400 	.word	0x40000400
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020000 	.word	0x40020000
 8001a9c:	40000c00 	.word	0x40000c00

08001aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <NMI_Handler+0x4>

08001aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <HardFault_Handler+0x4>

08001aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <MemManage_Handler+0x4>

08001ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <BusFault_Handler+0x4>

08001ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <UsageFault_Handler+0x4>

08001abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aec:	f000 f960 	bl	8001db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <OTG_FS_IRQHandler+0x10>)
 8001afa:	f001 f980 	bl	8002dfe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000196c 	.word	0x2000196c

08001b08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return 1;
 8001b0c:	2301      	movs	r3, #1
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_kill>:

int _kill(int pid, int sig)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b22:	f007 fca7 	bl	8009474 <__errno>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2216      	movs	r2, #22
 8001b2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_exit>:

void _exit (int status)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ffe7 	bl	8001b18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b4a:	e7fe      	b.n	8001b4a <_exit+0x12>

08001b4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	e00a      	b.n	8001b74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b5e:	f3af 8000 	nop.w
 8001b62:	4601      	mov	r1, r0
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	60ba      	str	r2, [r7, #8]
 8001b6a:	b2ca      	uxtb	r2, r1
 8001b6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3301      	adds	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	dbf0      	blt.n	8001b5e <_read+0x12>
  }

  return len;
 8001b7c:	687b      	ldr	r3, [r7, #4]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e009      	b.n	8001bac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	60ba      	str	r2, [r7, #8]
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	dbf1      	blt.n	8001b98 <_write+0x12>
  }
  return len;
 8001bb4:	687b      	ldr	r3, [r7, #4]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_close>:

int _close(int file)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001be6:	605a      	str	r2, [r3, #4]
  return 0;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <_isatty>:

int _isatty(int file)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bfe:	2301      	movs	r3, #1
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c30:	4a14      	ldr	r2, [pc, #80]	; (8001c84 <_sbrk+0x5c>)
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <_sbrk+0x60>)
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c3c:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <_sbrk+0x64>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <_sbrk+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d207      	bcs.n	8001c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c58:	f007 fc0c 	bl	8009474 <__errno>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	220c      	movs	r2, #12
 8001c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
 8001c66:	e009      	b.n	8001c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <_sbrk+0x64>)
 8001c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20020000 	.word	0x20020000
 8001c88:	00000400 	.word	0x00000400
 8001c8c:	20000484 	.word	0x20000484
 8001c90:	200020a8 	.word	0x200020a8

08001c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <SystemInit+0x20>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9e:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <SystemInit+0x20>)
 8001ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cbc:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cbe:	490e      	ldr	r1, [pc, #56]	; (8001cf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cc0:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc4:	e002      	b.n	8001ccc <LoopCopyDataInit>

08001cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cca:	3304      	adds	r3, #4

08001ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd0:	d3f9      	bcc.n	8001cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cd4:	4c0b      	ldr	r4, [pc, #44]	; (8001d04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd8:	e001      	b.n	8001cde <LoopFillZerobss>

08001cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cdc:	3204      	adds	r2, #4

08001cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce0:	d3fb      	bcc.n	8001cda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ce2:	f7ff ffd7 	bl	8001c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f007 fbcb 	bl	8009480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cea:	f7ff f99f 	bl	800102c <main>
  bx  lr    
 8001cee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf8:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8001cfc:	0800c754 	.word	0x0800c754
  ldr r2, =_sbss
 8001d00:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8001d04:	200020a8 	.word	0x200020a8

08001d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d08:	e7fe      	b.n	8001d08 <ADC_IRQHandler>
	...

08001d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <HAL_Init+0x40>)
 8001d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <HAL_Init+0x40>)
 8001d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <HAL_Init+0x40>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d34:	2003      	movs	r0, #3
 8001d36:	f000 fd1b 	bl	8002770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3a:	200f      	movs	r0, #15
 8001d3c:	f000 f808 	bl	8001d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d40:	f7ff fd7a 	bl	8001838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00

08001d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_InitTick+0x54>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_InitTick+0x58>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 fd33 	bl	80027da <HAL_SYSTICK_Config>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00e      	b.n	8001d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b0f      	cmp	r3, #15
 8001d82:	d80a      	bhi.n	8001d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d84:	2200      	movs	r2, #0
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f000 fcfb 	bl	8002786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d90:	4a06      	ldr	r2, [pc, #24]	; (8001dac <HAL_InitTick+0x5c>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000000 	.word	0x20000000
 8001da8:	20000008 	.word	0x20000008
 8001dac:	20000004 	.word	0x20000004

08001db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_IncTick+0x20>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000008 	.word	0x20000008
 8001dd4:	20000488 	.word	0x20000488

08001dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_GetTick+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000488 	.word	0x20000488

08001df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff ffee 	bl	8001dd8 <HAL_GetTick>
 8001dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d005      	beq.n	8001e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_Delay+0x44>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e16:	bf00      	nop
 8001e18:	f7ff ffde 	bl	8001dd8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d8f7      	bhi.n	8001e18 <HAL_Delay+0x28>
  {
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000008 	.word	0x20000008

08001e38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e033      	b.n	8001eb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d109      	bne.n	8001e6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff fd16 	bl	8001888 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d118      	bne.n	8001ea8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e7e:	f023 0302 	bic.w	r3, r3, #2
 8001e82:	f043 0202 	orr.w	r2, r3, #2
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 faa4 	bl	80023d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f023 0303 	bic.w	r3, r3, #3
 8001e9e:	f043 0201 	orr.w	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ea6:	e001      	b.n	8001eac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_Start+0x1a>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e0b2      	b.n	8002040 <HAL_ADC_Start+0x180>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d018      	beq.n	8001f22 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f00:	4b52      	ldr	r3, [pc, #328]	; (800204c <HAL_ADC_Start+0x18c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a52      	ldr	r2, [pc, #328]	; (8002050 <HAL_ADC_Start+0x190>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0c9a      	lsrs	r2, r3, #18
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f14:	e002      	b.n	8001f1c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f9      	bne.n	8001f16 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d17a      	bne.n	8002026 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d007      	beq.n	8001f62 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f6e:	d106      	bne.n	8001f7e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	f023 0206 	bic.w	r2, r3, #6
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	645a      	str	r2, [r3, #68]	; 0x44
 8001f7c:	e002      	b.n	8001f84 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f8c:	4b31      	ldr	r3, [pc, #196]	; (8002054 <HAL_ADC_Start+0x194>)
 8001f8e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f98:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d12a      	bne.n	8001ffc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a2b      	ldr	r2, [pc, #172]	; (8002058 <HAL_ADC_Start+0x198>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d015      	beq.n	8001fdc <HAL_ADC_Start+0x11c>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a29      	ldr	r2, [pc, #164]	; (800205c <HAL_ADC_Start+0x19c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d105      	bne.n	8001fc6 <HAL_ADC_Start+0x106>
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <HAL_ADC_Start+0x194>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a25      	ldr	r2, [pc, #148]	; (8002060 <HAL_ADC_Start+0x1a0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d136      	bne.n	800203e <HAL_ADC_Start+0x17e>
 8001fd0:	4b20      	ldr	r3, [pc, #128]	; (8002054 <HAL_ADC_Start+0x194>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d130      	bne.n	800203e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d129      	bne.n	800203e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	e020      	b.n	800203e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a15      	ldr	r2, [pc, #84]	; (8002058 <HAL_ADC_Start+0x198>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d11b      	bne.n	800203e <HAL_ADC_Start+0x17e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d114      	bne.n	800203e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	e00b      	b.n	800203e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f043 0210 	orr.w	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	20000000 	.word	0x20000000
 8002050:	431bde83 	.word	0x431bde83
 8002054:	40012300 	.word	0x40012300
 8002058:	40012000 	.word	0x40012000
 800205c:	40012100 	.word	0x40012100
 8002060:	40012200 	.word	0x40012200

08002064 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002080:	d113      	bne.n	80020aa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800208c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002090:	d10b      	bne.n	80020aa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f043 0220 	orr.w	r2, r3, #32
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e063      	b.n	8002172 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80020aa:	f7ff fe95 	bl	8001dd8 <HAL_GetTick>
 80020ae:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020b0:	e021      	b.n	80020f6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b8:	d01d      	beq.n	80020f6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d007      	beq.n	80020d0 <HAL_ADC_PollForConversion+0x6c>
 80020c0:	f7ff fe8a 	bl	8001dd8 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d212      	bcs.n	80020f6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d00b      	beq.n	80020f6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f043 0204 	orr.w	r2, r3, #4
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e03d      	b.n	8002172 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b02      	cmp	r3, #2
 8002102:	d1d6      	bne.n	80020b2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0212 	mvn.w	r2, #18
 800210c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d123      	bne.n	8002170 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800212c:	2b00      	cmp	r3, #0
 800212e:	d11f      	bne.n	8002170 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800213a:	2b00      	cmp	r3, #0
 800213c:	d006      	beq.n	800214c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002148:	2b00      	cmp	r3, #0
 800214a:	d111      	bne.n	8002170 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d105      	bne.n	8002170 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	f043 0201 	orr.w	r2, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x1c>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e105      	b.n	80023bc <HAL_ADC_ConfigChannel+0x228>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b09      	cmp	r3, #9
 80021be:	d925      	bls.n	800220c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68d9      	ldr	r1, [r3, #12]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	4613      	mov	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4413      	add	r3, r2
 80021d4:	3b1e      	subs	r3, #30
 80021d6:	2207      	movs	r2, #7
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43da      	mvns	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	400a      	ands	r2, r1
 80021e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68d9      	ldr	r1, [r3, #12]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4618      	mov	r0, r3
 80021f8:	4603      	mov	r3, r0
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4403      	add	r3, r0
 80021fe:	3b1e      	subs	r3, #30
 8002200:	409a      	lsls	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	e022      	b.n	8002252 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6919      	ldr	r1, [r3, #16]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	4613      	mov	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	2207      	movs	r2, #7
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	400a      	ands	r2, r1
 800222e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6919      	ldr	r1, [r3, #16]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	b29b      	uxth	r3, r3
 8002240:	4618      	mov	r0, r3
 8002242:	4603      	mov	r3, r0
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4403      	add	r3, r0
 8002248:	409a      	lsls	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b06      	cmp	r3, #6
 8002258:	d824      	bhi.n	80022a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	3b05      	subs	r3, #5
 800226c:	221f      	movs	r2, #31
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43da      	mvns	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	400a      	ands	r2, r1
 800227a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	4618      	mov	r0, r3
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	3b05      	subs	r3, #5
 8002296:	fa00 f203 	lsl.w	r2, r0, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	635a      	str	r2, [r3, #52]	; 0x34
 80022a2:	e04c      	b.n	800233e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b0c      	cmp	r3, #12
 80022aa:	d824      	bhi.n	80022f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	3b23      	subs	r3, #35	; 0x23
 80022be:	221f      	movs	r2, #31
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43da      	mvns	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	400a      	ands	r2, r1
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	4618      	mov	r0, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	3b23      	subs	r3, #35	; 0x23
 80022e8:	fa00 f203 	lsl.w	r2, r0, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
 80022f4:	e023      	b.n	800233e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	3b41      	subs	r3, #65	; 0x41
 8002308:	221f      	movs	r2, #31
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43da      	mvns	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	400a      	ands	r2, r1
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	4618      	mov	r0, r3
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	3b41      	subs	r3, #65	; 0x41
 8002332:	fa00 f203 	lsl.w	r2, r0, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800233e:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <HAL_ADC_ConfigChannel+0x234>)
 8002340:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a21      	ldr	r2, [pc, #132]	; (80023cc <HAL_ADC_ConfigChannel+0x238>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d109      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1cc>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b12      	cmp	r3, #18
 8002352:	d105      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a19      	ldr	r2, [pc, #100]	; (80023cc <HAL_ADC_ConfigChannel+0x238>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d123      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x21e>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b10      	cmp	r3, #16
 8002370:	d003      	beq.n	800237a <HAL_ADC_ConfigChannel+0x1e6>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b11      	cmp	r3, #17
 8002378:	d11b      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b10      	cmp	r3, #16
 800238c:	d111      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <HAL_ADC_ConfigChannel+0x23c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a10      	ldr	r2, [pc, #64]	; (80023d4 <HAL_ADC_ConfigChannel+0x240>)
 8002394:	fba2 2303 	umull	r2, r3, r2, r3
 8002398:	0c9a      	lsrs	r2, r3, #18
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023a4:	e002      	b.n	80023ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f9      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	40012300 	.word	0x40012300
 80023cc:	40012000 	.word	0x40012000
 80023d0:	20000000 	.word	0x20000000
 80023d4:	431bde83 	.word	0x431bde83

080023d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023e0:	4b79      	ldr	r3, [pc, #484]	; (80025c8 <ADC_Init+0x1f0>)
 80023e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	431a      	orrs	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800240c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	021a      	lsls	r2, r3, #8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002430:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002452:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6899      	ldr	r1, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	4a58      	ldr	r2, [pc, #352]	; (80025cc <ADC_Init+0x1f4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d022      	beq.n	80024b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800247e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6899      	ldr	r1, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6899      	ldr	r1, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	e00f      	b.n	80024d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0202 	bic.w	r2, r2, #2
 80024e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6899      	ldr	r1, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7e1b      	ldrb	r3, [r3, #24]
 80024f0:	005a      	lsls	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01b      	beq.n	800253c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002512:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002522:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	3b01      	subs	r3, #1
 8002530:	035a      	lsls	r2, r3, #13
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	e007      	b.n	800254c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800254a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	3b01      	subs	r3, #1
 8002568:	051a      	lsls	r2, r3, #20
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002580:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6899      	ldr	r1, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800258e:	025a      	lsls	r2, r3, #9
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6899      	ldr	r1, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	029a      	lsls	r2, r3, #10
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	609a      	str	r2, [r3, #8]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40012300 	.word	0x40012300
 80025cc:	0f000001 	.word	0x0f000001

080025d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025ec:	4013      	ands	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002602:	4a04      	ldr	r2, [pc, #16]	; (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	60d3      	str	r3, [r2, #12]
}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800261c:	4b04      	ldr	r3, [pc, #16]	; (8002630 <__NVIC_GetPriorityGrouping+0x18>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 0307 	and.w	r3, r3, #7
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	2b00      	cmp	r3, #0
 8002644:	db0b      	blt.n	800265e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	4907      	ldr	r1, [pc, #28]	; (800266c <__NVIC_EnableIRQ+0x38>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2001      	movs	r0, #1
 8002656:	fa00 f202 	lsl.w	r2, r0, r2
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000e100 	.word	0xe000e100

08002670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	2b00      	cmp	r3, #0
 8002682:	db0a      	blt.n	800269a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	490c      	ldr	r1, [pc, #48]	; (80026bc <__NVIC_SetPriority+0x4c>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	440b      	add	r3, r1
 8002694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002698:	e00a      	b.n	80026b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4908      	ldr	r1, [pc, #32]	; (80026c0 <__NVIC_SetPriority+0x50>)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	3b04      	subs	r3, #4
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	440b      	add	r3, r1
 80026ae:	761a      	strb	r2, [r3, #24]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	; 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f1c3 0307 	rsb	r3, r3, #7
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf28      	it	cs
 80026e2:	2304      	movcs	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d902      	bls.n	80026f4 <NVIC_EncodePriority+0x30>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3b03      	subs	r3, #3
 80026f2:	e000      	b.n	80026f6 <NVIC_EncodePriority+0x32>
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43d9      	mvns	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	4313      	orrs	r3, r2
         );
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	; 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800273c:	d301      	bcc.n	8002742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273e:	2301      	movs	r3, #1
 8002740:	e00f      	b.n	8002762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002742:	4a0a      	ldr	r2, [pc, #40]	; (800276c <SysTick_Config+0x40>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274a:	210f      	movs	r1, #15
 800274c:	f04f 30ff 	mov.w	r0, #4294967295
 8002750:	f7ff ff8e 	bl	8002670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <SysTick_Config+0x40>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275a:	4b04      	ldr	r3, [pc, #16]	; (800276c <SysTick_Config+0x40>)
 800275c:	2207      	movs	r2, #7
 800275e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	e000e010 	.word	0xe000e010

08002770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff29 	bl	80025d0 <__NVIC_SetPriorityGrouping>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002798:	f7ff ff3e 	bl	8002618 <__NVIC_GetPriorityGrouping>
 800279c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f7ff ff8e 	bl	80026c4 <NVIC_EncodePriority>
 80027a8:	4602      	mov	r2, r0
 80027aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff5d 	bl	8002670 <__NVIC_SetPriority>
}
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff31 	bl	8002634 <__NVIC_EnableIRQ>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ffa2 	bl	800272c <SysTick_Config>
 80027e8:	4603      	mov	r3, r0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	e16b      	b.n	8002ae8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002810:	2201      	movs	r2, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	429a      	cmp	r2, r3
 800282a:	f040 815a 	bne.w	8002ae2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d005      	beq.n	8002846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002842:	2b02      	cmp	r3, #2
 8002844:	d130      	bne.n	80028a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	2203      	movs	r2, #3
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 0201 	and.w	r2, r3, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d017      	beq.n	80028e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	2203      	movs	r2, #3
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d123      	bne.n	8002938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	08da      	lsrs	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3208      	adds	r2, #8
 80028f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	220f      	movs	r2, #15
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	08da      	lsrs	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3208      	adds	r2, #8
 8002932:	69b9      	ldr	r1, [r7, #24]
 8002934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0203 	and.w	r2, r3, #3
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80b4 	beq.w	8002ae2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4b60      	ldr	r3, [pc, #384]	; (8002b00 <HAL_GPIO_Init+0x30c>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	4a5f      	ldr	r2, [pc, #380]	; (8002b00 <HAL_GPIO_Init+0x30c>)
 8002984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002988:	6453      	str	r3, [r2, #68]	; 0x44
 800298a:	4b5d      	ldr	r3, [pc, #372]	; (8002b00 <HAL_GPIO_Init+0x30c>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002996:	4a5b      	ldr	r2, [pc, #364]	; (8002b04 <HAL_GPIO_Init+0x310>)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	3302      	adds	r3, #2
 800299e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	220f      	movs	r2, #15
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a52      	ldr	r2, [pc, #328]	; (8002b08 <HAL_GPIO_Init+0x314>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d02b      	beq.n	8002a1a <HAL_GPIO_Init+0x226>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a51      	ldr	r2, [pc, #324]	; (8002b0c <HAL_GPIO_Init+0x318>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d025      	beq.n	8002a16 <HAL_GPIO_Init+0x222>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a50      	ldr	r2, [pc, #320]	; (8002b10 <HAL_GPIO_Init+0x31c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d01f      	beq.n	8002a12 <HAL_GPIO_Init+0x21e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a4f      	ldr	r2, [pc, #316]	; (8002b14 <HAL_GPIO_Init+0x320>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d019      	beq.n	8002a0e <HAL_GPIO_Init+0x21a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a4e      	ldr	r2, [pc, #312]	; (8002b18 <HAL_GPIO_Init+0x324>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_GPIO_Init+0x216>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4d      	ldr	r2, [pc, #308]	; (8002b1c <HAL_GPIO_Init+0x328>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00d      	beq.n	8002a06 <HAL_GPIO_Init+0x212>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a4c      	ldr	r2, [pc, #304]	; (8002b20 <HAL_GPIO_Init+0x32c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d007      	beq.n	8002a02 <HAL_GPIO_Init+0x20e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4b      	ldr	r2, [pc, #300]	; (8002b24 <HAL_GPIO_Init+0x330>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_GPIO_Init+0x20a>
 80029fa:	2307      	movs	r3, #7
 80029fc:	e00e      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 80029fe:	2308      	movs	r3, #8
 8002a00:	e00c      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a02:	2306      	movs	r3, #6
 8002a04:	e00a      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a06:	2305      	movs	r3, #5
 8002a08:	e008      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	e006      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e004      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e002      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	f002 0203 	and.w	r2, r2, #3
 8002a22:	0092      	lsls	r2, r2, #2
 8002a24:	4093      	lsls	r3, r2
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a2c:	4935      	ldr	r1, [pc, #212]	; (8002b04 <HAL_GPIO_Init+0x310>)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	3302      	adds	r3, #2
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a3a:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a5e:	4a32      	ldr	r2, [pc, #200]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a64:	4b30      	ldr	r3, [pc, #192]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a88:	4a27      	ldr	r2, [pc, #156]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a8e:	4b26      	ldr	r3, [pc, #152]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002adc:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	61fb      	str	r3, [r7, #28]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b0f      	cmp	r3, #15
 8002aec:	f67f ae90 	bls.w	8002810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3724      	adds	r7, #36	; 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40013800 	.word	0x40013800
 8002b08:	40020000 	.word	0x40020000
 8002b0c:	40020400 	.word	0x40020400
 8002b10:	40020800 	.word	0x40020800
 8002b14:	40020c00 	.word	0x40020c00
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40021400 	.word	0x40021400
 8002b20:	40021800 	.word	0x40021800
 8002b24:	40021c00 	.word	0x40021c00
 8002b28:	40013c00 	.word	0x40013c00

08002b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	807b      	strh	r3, [r7, #2]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b3c:	787b      	ldrb	r3, [r7, #1]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b48:	e003      	b.n	8002b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	041a      	lsls	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	619a      	str	r2, [r3, #24]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b60:	b08f      	sub	sp, #60	; 0x3c
 8002b62:	af0a      	add	r7, sp, #40	; 0x28
 8002b64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e10f      	b.n	8002d90 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f006 f95a 	bl	8008e44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2203      	movs	r2, #3
 8002b94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f002 fca3 	bl	80054fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	603b      	str	r3, [r7, #0]
 8002bba:	687e      	ldr	r6, [r7, #4]
 8002bbc:	466d      	mov	r5, sp
 8002bbe:	f106 0410 	add.w	r4, r6, #16
 8002bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bce:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bd2:	1d33      	adds	r3, r6, #4
 8002bd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bd6:	6838      	ldr	r0, [r7, #0]
 8002bd8:	f002 fb7a 	bl	80052d0 <USB_CoreInit>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0d0      	b.n	8002d90 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f002 fc91 	bl	800551c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
 8002bfe:	e04a      	b.n	8002c96 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	333d      	adds	r3, #61	; 0x3d
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	333c      	adds	r3, #60	; 0x3c
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	b298      	uxth	r0, r3
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	3344      	adds	r3, #68	; 0x44
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3340      	adds	r3, #64	; 0x40
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c54:	7bfa      	ldrb	r2, [r7, #15]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	3348      	adds	r3, #72	; 0x48
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	334c      	adds	r3, #76	; 0x4c
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c7c:	7bfa      	ldrb	r2, [r7, #15]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	3354      	adds	r3, #84	; 0x54
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	3301      	adds	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d3af      	bcc.n	8002c00 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	73fb      	strb	r3, [r7, #15]
 8002ca4:	e044      	b.n	8002d30 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002cce:	7bfa      	ldrb	r2, [r7, #15]
 8002cd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cd2:	7bfa      	ldrb	r2, [r7, #15]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cfe:	7bfa      	ldrb	r2, [r7, #15]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
 8002d30:	7bfa      	ldrb	r2, [r7, #15]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d3b5      	bcc.n	8002ca6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	687e      	ldr	r6, [r7, #4]
 8002d42:	466d      	mov	r5, sp
 8002d44:	f106 0410 	add.w	r4, r6, #16
 8002d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d54:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d58:	1d33      	adds	r3, r6, #4
 8002d5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d5c:	6838      	ldr	r0, [r7, #0]
 8002d5e:	f002 fc29 	bl	80055b4 <USB_DevInit>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e00d      	b.n	8002d90 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fd78 	bl	800687e <USB_DevDisconnect>

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_PCD_Start+0x1c>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e020      	b.n	8002df6 <HAL_PCD_Start+0x5e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d109      	bne.n	8002dd8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d005      	beq.n	8002dd8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f002 fb7b 	bl	80054d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f003 fd28 	bl	800683c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dfe:	b590      	push	{r4, r7, lr}
 8002e00:	b08d      	sub	sp, #52	; 0x34
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f003 fde6 	bl	80069e6 <USB_GetMode>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f040 848a 	bne.w	8003736 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f003 fd4a 	bl	80068c0 <USB_ReadInterrupts>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 8480 	beq.w	8003734 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	0a1b      	lsrs	r3, r3, #8
 8002e3e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f003 fd37 	bl	80068c0 <USB_ReadInterrupts>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d107      	bne.n	8002e6c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f002 0202 	and.w	r2, r2, #2
 8002e6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f003 fd25 	bl	80068c0 <USB_ReadInterrupts>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b10      	cmp	r3, #16
 8002e7e:	d161      	bne.n	8002f44 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0210 	bic.w	r2, r2, #16
 8002e8e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f003 020f 	and.w	r2, r3, #15
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	4413      	add	r3, r2
 8002eac:	3304      	adds	r3, #4
 8002eae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	0c5b      	lsrs	r3, r3, #17
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d124      	bne.n	8002f06 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d035      	beq.n	8002f34 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	6a38      	ldr	r0, [r7, #32]
 8002edc:	f003 fb5c 	bl	8006598 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	091b      	lsrs	r3, r3, #4
 8002ee8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eec:	441a      	add	r2, r3
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	6a1a      	ldr	r2, [r3, #32]
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	091b      	lsrs	r3, r3, #4
 8002efa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002efe:	441a      	add	r2, r3
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	621a      	str	r2, [r3, #32]
 8002f04:	e016      	b.n	8002f34 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	0c5b      	lsrs	r3, r3, #17
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d110      	bne.n	8002f34 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f18:	2208      	movs	r2, #8
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	6a38      	ldr	r0, [r7, #32]
 8002f1e:	f003 fb3b 	bl	8006598 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	6a1a      	ldr	r2, [r3, #32]
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f2e:	441a      	add	r2, r3
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0210 	orr.w	r2, r2, #16
 8002f42:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 fcb9 	bl	80068c0 <USB_ReadInterrupts>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f58:	f040 80a7 	bne.w	80030aa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f003 fcbe 	bl	80068e6 <USB_ReadDevAllOutEpInterrupt>
 8002f6a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f6c:	e099      	b.n	80030a2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 808e 	beq.w	8003096 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 fce2 	bl	800694e <USB_ReadDevOutEPInterrupt>
 8002f8a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00c      	beq.n	8002fb0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002fa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fec2 	bl	8003d34 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00c      	beq.n	8002fd4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2308      	movs	r3, #8
 8002fca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002fcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 ff98 	bl	8003f04 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fea:	461a      	mov	r2, r3
 8002fec:	2310      	movs	r3, #16
 8002fee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d030      	beq.n	800305c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003002:	2b80      	cmp	r3, #128	; 0x80
 8003004:	d109      	bne.n	800301a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003014:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003018:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800301a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301c:	4613      	mov	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	4413      	add	r3, r2
 800302c:	3304      	adds	r3, #4
 800302e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	78db      	ldrb	r3, [r3, #3]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d108      	bne.n	800304a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2200      	movs	r2, #0
 800303c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	b2db      	uxtb	r3, r3
 8003042:	4619      	mov	r1, r3
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f006 f803 	bl	8009050 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003056:	461a      	mov	r2, r3
 8003058:	2302      	movs	r3, #2
 800305a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f003 0320 	and.w	r3, r3, #32
 8003062:	2b00      	cmp	r3, #0
 8003064:	d008      	beq.n	8003078 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	4413      	add	r3, r2
 800306e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003072:	461a      	mov	r2, r3
 8003074:	2320      	movs	r3, #32
 8003076:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d009      	beq.n	8003096 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	4413      	add	r3, r2
 800308a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308e:	461a      	mov	r2, r3
 8003090:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003094:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	3301      	adds	r3, #1
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	085b      	lsrs	r3, r3, #1
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f47f af62 	bne.w	8002f6e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f003 fc06 	bl	80068c0 <USB_ReadInterrupts>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030be:	f040 80db 	bne.w	8003278 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f003 fc27 	bl	800691a <USB_ReadDevAllInEpInterrupt>
 80030cc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80030d2:	e0cd      	b.n	8003270 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80c2 	beq.w	8003264 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f003 fc4d 	bl	800698a <USB_ReadDevInEPInterrupt>
 80030f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d057      	beq.n	80031ac <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	2201      	movs	r2, #1
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	43db      	mvns	r3, r3
 8003116:	69f9      	ldr	r1, [r7, #28]
 8003118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800311c:	4013      	ands	r3, r2
 800311e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	4413      	add	r3, r2
 8003128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800312c:	461a      	mov	r2, r3
 800312e:	2301      	movs	r3, #1
 8003130:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d132      	bne.n	80031a0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	334c      	adds	r3, #76	; 0x4c
 800314a:	6819      	ldr	r1, [r3, #0]
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4403      	add	r3, r0
 800315a:	3348      	adds	r3, #72	; 0x48
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4419      	add	r1, r3
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4403      	add	r3, r0
 800316e:	334c      	adds	r3, #76	; 0x4c
 8003170:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	2b00      	cmp	r3, #0
 8003176:	d113      	bne.n	80031a0 <HAL_PCD_IRQHandler+0x3a2>
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3354      	adds	r3, #84	; 0x54
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d108      	bne.n	80031a0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003198:	461a      	mov	r2, r3
 800319a:	2101      	movs	r1, #1
 800319c:	f003 fc54 	bl	8006a48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	4619      	mov	r1, r3
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f005 fecd 	bl	8008f46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d008      	beq.n	80031c8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c2:	461a      	mov	r2, r3
 80031c4:	2308      	movs	r3, #8
 80031c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d008      	beq.n	80031e4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031de:	461a      	mov	r2, r3
 80031e0:	2310      	movs	r3, #16
 80031e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fa:	461a      	mov	r2, r3
 80031fc:	2340      	movs	r3, #64	; 0x40
 80031fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d023      	beq.n	8003252 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800320a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800320c:	6a38      	ldr	r0, [r7, #32]
 800320e:	f002 fb35 	bl	800587c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	3338      	adds	r3, #56	; 0x38
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	3304      	adds	r3, #4
 8003224:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	78db      	ldrb	r3, [r3, #3]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d108      	bne.n	8003240 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2200      	movs	r2, #0
 8003232:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	b2db      	uxtb	r3, r3
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f005 ff1a 	bl	8009074 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800324c:	461a      	mov	r2, r3
 800324e:	2302      	movs	r3, #2
 8003250:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800325c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fcdb 	bl	8003c1a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	3301      	adds	r3, #1
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800326a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326c:	085b      	lsrs	r3, r3, #1
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003272:	2b00      	cmp	r3, #0
 8003274:	f47f af2e 	bne.w	80030d4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f003 fb1f 	bl	80068c0 <USB_ReadInterrupts>
 8003282:	4603      	mov	r3, r0
 8003284:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003288:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800328c:	d122      	bne.n	80032d4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d108      	bne.n	80032be <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032b4:	2100      	movs	r1, #0
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fec2 	bl	8004040 <HAL_PCDEx_LPM_Callback>
 80032bc:	e002      	b.n	80032c4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f005 feb8 	bl	8009034 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80032d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f003 faf1 	bl	80068c0 <USB_ReadInterrupts>
 80032de:	4603      	mov	r3, r0
 80032e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e8:	d112      	bne.n	8003310 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d102      	bne.n	8003300 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f005 fe74 	bl	8008fe8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800330e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f003 fad3 	bl	80068c0 <USB_ReadInterrupts>
 800331a:	4603      	mov	r3, r0
 800331c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003324:	f040 80b7 	bne.w	8003496 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	69fa      	ldr	r2, [r7, #28]
 8003332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003336:	f023 0301 	bic.w	r3, r3, #1
 800333a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2110      	movs	r1, #16
 8003342:	4618      	mov	r0, r3
 8003344:	f002 fa9a 	bl	800587c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003348:	2300      	movs	r3, #0
 800334a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800334c:	e046      	b.n	80033dc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	4413      	add	r3, r2
 8003356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335a:	461a      	mov	r2, r3
 800335c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003360:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003372:	0151      	lsls	r1, r2, #5
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	440a      	add	r2, r1
 8003378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800337c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003380:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338e:	461a      	mov	r2, r3
 8003390:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003394:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	4413      	add	r3, r2
 800339e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a6:	0151      	lsls	r1, r2, #5
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	440a      	add	r2, r1
 80033ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033c6:	0151      	lsls	r1, r2, #5
 80033c8:	69fa      	ldr	r2, [r7, #28]
 80033ca:	440a      	add	r2, r1
 80033cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033d4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d8:	3301      	adds	r3, #1
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d3b3      	bcc.n	800334e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033f4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d016      	beq.n	8003430 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003412:	f043 030b 	orr.w	r3, r3, #11
 8003416:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003428:	f043 030b 	orr.w	r3, r3, #11
 800342c:	6453      	str	r3, [r2, #68]	; 0x44
 800342e:	e015      	b.n	800345c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800343e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003442:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003446:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	69fa      	ldr	r2, [r7, #28]
 8003452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003456:	f043 030b 	orr.w	r3, r3, #11
 800345a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800346a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800346e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003480:	461a      	mov	r2, r3
 8003482:	f003 fae1 	bl	8006a48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003494:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f003 fa10 	bl	80068c0 <USB_ReadInterrupts>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034aa:	d124      	bne.n	80034f6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f003 faa6 	bl	8006a02 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f002 fa5b 	bl	8005976 <USB_GetDevSpeed>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461a      	mov	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681c      	ldr	r4, [r3, #0]
 80034cc:	f001 fa28 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 80034d0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	461a      	mov	r2, r3
 80034da:	4620      	mov	r0, r4
 80034dc:	f001 ff5a 	bl	8005394 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f005 fd58 	bl	8008f96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80034f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f003 f9e0 	bl	80068c0 <USB_ReadInterrupts>
 8003500:	4603      	mov	r3, r0
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b08      	cmp	r3, #8
 8003508:	d10a      	bne.n	8003520 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f005 fd35 	bl	8008f7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f002 0208 	and.w	r2, r2, #8
 800351e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f003 f9cb 	bl	80068c0 <USB_ReadInterrupts>
 800352a:	4603      	mov	r3, r0
 800352c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003530:	2b80      	cmp	r3, #128	; 0x80
 8003532:	d122      	bne.n	800357a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003540:	2301      	movs	r3, #1
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
 8003544:	e014      	b.n	8003570 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d105      	bne.n	800356a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	b2db      	uxtb	r3, r3
 8003562:	4619      	mov	r1, r3
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fb27 	bl	8003bb8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	3301      	adds	r3, #1
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003576:	429a      	cmp	r2, r3
 8003578:	d3e5      	bcc.n	8003546 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f003 f99e 	bl	80068c0 <USB_ReadInterrupts>
 8003584:	4603      	mov	r3, r0
 8003586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800358a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800358e:	d13b      	bne.n	8003608 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003590:	2301      	movs	r3, #1
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
 8003594:	e02b      	b.n	80035ee <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	3340      	adds	r3, #64	; 0x40
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d115      	bne.n	80035e8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035be:	2b00      	cmp	r3, #0
 80035c0:	da12      	bge.n	80035e8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	333f      	adds	r3, #63	; 0x3f
 80035d2:	2201      	movs	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	4619      	mov	r1, r3
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fae8 	bl	8003bb8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	3301      	adds	r3, #1
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d3ce      	bcc.n	8003596 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003606:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f003 f957 	bl	80068c0 <USB_ReadInterrupts>
 8003612:	4603      	mov	r3, r0
 8003614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003618:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800361c:	d155      	bne.n	80036ca <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800361e:	2301      	movs	r3, #1
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
 8003622:	e045      	b.n	80036b0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d12e      	bne.n	80036aa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800364c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800364e:	2b00      	cmp	r3, #0
 8003650:	da2b      	bge.n	80036aa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800365e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003662:	429a      	cmp	r2, r3
 8003664:	d121      	bne.n	80036aa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003678:	2201      	movs	r2, #1
 800367a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10a      	bne.n	80036aa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036a6:	6053      	str	r3, [r2, #4]
            break;
 80036a8:	e007      	b.n	80036ba <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	3301      	adds	r3, #1
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d3b4      	bcc.n	8003624 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695a      	ldr	r2, [r3, #20]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80036c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f003 f8f6 	bl	80068c0 <USB_ReadInterrupts>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036de:	d10a      	bne.n	80036f6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f005 fcd9 	bl	8009098 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80036f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f003 f8e0 	bl	80068c0 <USB_ReadInterrupts>
 8003700:	4603      	mov	r3, r0
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b04      	cmp	r3, #4
 8003708:	d115      	bne.n	8003736 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f005 fcc9 	bl	80090b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
 8003732:	e000      	b.n	8003736 <HAL_PCD_IRQHandler+0x938>
      return;
 8003734:	bf00      	nop
    }
  }
}
 8003736:	3734      	adds	r7, #52	; 0x34
 8003738:	46bd      	mov	sp, r7
 800373a:	bd90      	pop	{r4, r7, pc}

0800373c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_PCD_SetAddress+0x1a>
 8003752:	2302      	movs	r3, #2
 8003754:	e013      	b.n	800377e <HAL_PCD_SetAddress+0x42>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	78fa      	ldrb	r2, [r7, #3]
 800376c:	4611      	mov	r1, r2
 800376e:	4618      	mov	r0, r3
 8003770:	f003 f83e 	bl	80067f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	4608      	mov	r0, r1
 8003790:	4611      	mov	r1, r2
 8003792:	461a      	mov	r2, r3
 8003794:	4603      	mov	r3, r0
 8003796:	70fb      	strb	r3, [r7, #3]
 8003798:	460b      	mov	r3, r1
 800379a:	803b      	strh	r3, [r7, #0]
 800379c:	4613      	mov	r3, r2
 800379e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	da0f      	bge.n	80037cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	f003 020f 	and.w	r2, r3, #15
 80037b2:	4613      	mov	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	3338      	adds	r3, #56	; 0x38
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4413      	add	r3, r2
 80037c0:	3304      	adds	r3, #4
 80037c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	705a      	strb	r2, [r3, #1]
 80037ca:	e00f      	b.n	80037ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	f003 020f 	and.w	r2, r3, #15
 80037d2:	4613      	mov	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4413      	add	r3, r2
 80037e2:	3304      	adds	r3, #4
 80037e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037f8:	883a      	ldrh	r2, [r7, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	78ba      	ldrb	r2, [r7, #2]
 8003802:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	785b      	ldrb	r3, [r3, #1]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d004      	beq.n	8003816 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003816:	78bb      	ldrb	r3, [r7, #2]
 8003818:	2b02      	cmp	r3, #2
 800381a:	d102      	bne.n	8003822 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_PCD_EP_Open+0xaa>
 800382c:	2302      	movs	r3, #2
 800382e:	e00e      	b.n	800384e <HAL_PCD_EP_Open+0xc8>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68f9      	ldr	r1, [r7, #12]
 800383e:	4618      	mov	r0, r3
 8003840:	f002 f8be 	bl	80059c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800384c:	7afb      	ldrb	r3, [r7, #11]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	460b      	mov	r3, r1
 8003860:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003862:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003866:	2b00      	cmp	r3, #0
 8003868:	da0f      	bge.n	800388a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	f003 020f 	and.w	r2, r3, #15
 8003870:	4613      	mov	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	3338      	adds	r3, #56	; 0x38
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	3304      	adds	r3, #4
 8003880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	705a      	strb	r2, [r3, #1]
 8003888:	e00f      	b.n	80038aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	f003 020f 	and.w	r2, r3, #15
 8003890:	4613      	mov	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	4413      	add	r3, r2
 80038a0:	3304      	adds	r3, #4
 80038a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_PCD_EP_Close+0x6e>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e00e      	b.n	80038e2 <HAL_PCD_EP_Close+0x8c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68f9      	ldr	r1, [r7, #12]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f002 f8fc 	bl	8005ad0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b086      	sub	sp, #24
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
 80038f6:	460b      	mov	r3, r1
 80038f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038fa:	7afb      	ldrb	r3, [r7, #11]
 80038fc:	f003 020f 	and.w	r2, r3, #15
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4413      	add	r3, r2
 8003910:	3304      	adds	r3, #4
 8003912:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	2200      	movs	r2, #0
 8003924:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800392c:	7afb      	ldrb	r3, [r7, #11]
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	b2da      	uxtb	r2, r3
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d102      	bne.n	8003946 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003946:	7afb      	ldrb	r3, [r7, #11]
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	2b00      	cmp	r3, #0
 800394e:	d109      	bne.n	8003964 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	6979      	ldr	r1, [r7, #20]
 800395e:	f002 fbdb 	bl	8006118 <USB_EP0StartXfer>
 8003962:	e008      	b.n	8003976 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6818      	ldr	r0, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	461a      	mov	r2, r3
 8003970:	6979      	ldr	r1, [r7, #20]
 8003972:	f002 f989 	bl	8005c88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	f003 020f 	and.w	r2, r3, #15
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80039a2:	681b      	ldr	r3, [r3, #0]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	607a      	str	r2, [r7, #4]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	460b      	mov	r3, r1
 80039be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c0:	7afb      	ldrb	r3, [r7, #11]
 80039c2:	f003 020f 	and.w	r2, r3, #15
 80039c6:	4613      	mov	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	3338      	adds	r3, #56	; 0x38
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	3304      	adds	r3, #4
 80039d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2200      	movs	r2, #0
 80039e8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2201      	movs	r2, #1
 80039ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039f0:	7afb      	ldrb	r3, [r7, #11]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d102      	bne.n	8003a0a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a0a:	7afb      	ldrb	r3, [r7, #11]
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d109      	bne.n	8003a28 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	6979      	ldr	r1, [r7, #20]
 8003a22:	f002 fb79 	bl	8006118 <USB_EP0StartXfer>
 8003a26:	e008      	b.n	8003a3a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	6979      	ldr	r1, [r7, #20]
 8003a36:	f002 f927 	bl	8005c88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	f003 020f 	and.w	r2, r3, #15
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d901      	bls.n	8003a62 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e050      	b.n	8003b04 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	da0f      	bge.n	8003a8a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	f003 020f 	and.w	r2, r3, #15
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	3338      	adds	r3, #56	; 0x38
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3304      	adds	r3, #4
 8003a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	705a      	strb	r2, [r3, #1]
 8003a88:	e00d      	b.n	8003aa6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4413      	add	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_PCD_EP_SetStall+0x82>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e01e      	b.n	8003b04 <HAL_PCD_EP_SetStall+0xc0>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68f9      	ldr	r1, [r7, #12]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f002 fdb7 	bl	8006648 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10a      	bne.n	8003afa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6818      	ldr	r0, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	b2d9      	uxtb	r1, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003af4:	461a      	mov	r2, r3
 8003af6:	f002 ffa7 	bl	8006a48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	f003 020f 	and.w	r2, r3, #15
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d901      	bls.n	8003b2a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e042      	b.n	8003bb0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	da0f      	bge.n	8003b52 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	f003 020f 	and.w	r2, r3, #15
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	3338      	adds	r3, #56	; 0x38
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	4413      	add	r3, r2
 8003b46:	3304      	adds	r3, #4
 8003b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	705a      	strb	r2, [r3, #1]
 8003b50:	e00f      	b.n	8003b72 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	f003 020f 	and.w	r2, r3, #15
 8003b58:	4613      	mov	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	4413      	add	r3, r2
 8003b68:	3304      	adds	r3, #4
 8003b6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_PCD_EP_ClrStall+0x86>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e00e      	b.n	8003bb0 <HAL_PCD_EP_ClrStall+0xa4>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68f9      	ldr	r1, [r7, #12]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f002 fdbf 	bl	8006724 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	da0c      	bge.n	8003be6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	f003 020f 	and.w	r2, r3, #15
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	3338      	adds	r3, #56	; 0x38
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	4413      	add	r3, r2
 8003be0:	3304      	adds	r3, #4
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	e00c      	b.n	8003c00 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	f003 020f 	and.w	r2, r3, #15
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68f9      	ldr	r1, [r7, #12]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f002 fbde 	bl	80063c8 <USB_EPStopXfer>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c10:	7afb      	ldrb	r3, [r7, #11]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b08a      	sub	sp, #40	; 0x28
 8003c1e:	af02      	add	r7, sp, #8
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	3338      	adds	r3, #56	; 0x38
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3304      	adds	r3, #4
 8003c40:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a1a      	ldr	r2, [r3, #32]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d901      	bls.n	8003c52 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e06c      	b.n	8003d2c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d902      	bls.n	8003c6e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3303      	adds	r3, #3
 8003c72:	089b      	lsrs	r3, r3, #2
 8003c74:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c76:	e02b      	b.n	8003cd0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	699a      	ldr	r2, [r3, #24]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d902      	bls.n	8003c94 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	3303      	adds	r3, #3
 8003c98:	089b      	lsrs	r3, r3, #2
 8003c9a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6919      	ldr	r1, [r3, #16]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	6978      	ldr	r0, [r7, #20]
 8003cb4:	f002 fc32 	bl	800651c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	441a      	add	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a1a      	ldr	r2, [r3, #32]
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	441a      	add	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d809      	bhi.n	8003cfa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a1a      	ldr	r2, [r3, #32]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d203      	bcs.n	8003cfa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1be      	bne.n	8003c78 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d811      	bhi.n	8003d2a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	6939      	ldr	r1, [r7, #16]
 8003d22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d26:	4013      	ands	r3, r2
 8003d28:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3720      	adds	r7, #32
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	333c      	adds	r3, #60	; 0x3c
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d17b      	bne.n	8003e62 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d015      	beq.n	8003da0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	4a61      	ldr	r2, [pc, #388]	; (8003efc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	f240 80b9 	bls.w	8003ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80b3 	beq.w	8003ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d96:	461a      	mov	r2, r3
 8003d98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d9c:	6093      	str	r3, [r2, #8]
 8003d9e:	e0a7      	b.n	8003ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db6:	461a      	mov	r2, r3
 8003db8:	2320      	movs	r3, #32
 8003dba:	6093      	str	r3, [r2, #8]
 8003dbc:	e098      	b.n	8003ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f040 8093 	bne.w	8003ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	4a4b      	ldr	r2, [pc, #300]	; (8003efc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d90f      	bls.n	8003df2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de8:	461a      	mov	r2, r3
 8003dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dee:	6093      	str	r3, [r2, #8]
 8003df0:	e07e      	b.n	8003ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	4613      	mov	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	4413      	add	r3, r2
 8003e04:	3304      	adds	r3, #4
 8003e06:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	0159      	lsls	r1, r3, #5
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	440b      	add	r3, r1
 8003e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e1e:	1ad2      	subs	r2, r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d114      	bne.n	8003e54 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	2101      	movs	r1, #1
 8003e40:	f002 fe02 	bl	8006a48 <USB_EP0_OutStart>
 8003e44:	e006      	b.n	8003e54 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	441a      	add	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	4619      	mov	r1, r3
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f005 f858 	bl	8008f10 <HAL_PCD_DataOutStageCallback>
 8003e60:	e046      	b.n	8003ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	4a26      	ldr	r2, [pc, #152]	; (8003f00 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d124      	bne.n	8003eb4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e80:	461a      	mov	r2, r3
 8003e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e86:	6093      	str	r3, [r2, #8]
 8003e88:	e032      	b.n	8003ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2320      	movs	r3, #32
 8003ea4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f005 f82f 	bl	8008f10 <HAL_PCD_DataOutStageCallback>
 8003eb2:	e01d      	b.n	8003ef0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d114      	bne.n	8003ee4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d108      	bne.n	8003ee4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003edc:	461a      	mov	r2, r3
 8003ede:	2100      	movs	r1, #0
 8003ee0:	f002 fdb2 	bl	8006a48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	4619      	mov	r1, r3
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f005 f810 	bl	8008f10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3720      	adds	r7, #32
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	4f54300a 	.word	0x4f54300a
 8003f00:	4f54310a 	.word	0x4f54310a

08003f04 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	333c      	adds	r3, #60	; 0x3c
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4a15      	ldr	r2, [pc, #84]	; (8003f8c <PCD_EP_OutSetupPacket_int+0x88>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d90e      	bls.n	8003f58 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d009      	beq.n	8003f58 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f50:	461a      	mov	r2, r3
 8003f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f56:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f004 ffc7 	bl	8008eec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <PCD_EP_OutSetupPacket_int+0x88>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d90c      	bls.n	8003f80 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d108      	bne.n	8003f80 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f78:	461a      	mov	r2, r3
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	f002 fd64 	bl	8006a48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	4f54300a 	.word	0x4f54300a

08003f90 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	70fb      	strb	r3, [r7, #3]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d107      	bne.n	8003fbe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003fae:	883b      	ldrh	r3, [r7, #0]
 8003fb0:	0419      	lsls	r1, r3, #16
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	629a      	str	r2, [r3, #40]	; 0x28
 8003fbc:	e028      	b.n	8004010 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	0c1b      	lsrs	r3, r3, #16
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	4413      	add	r3, r2
 8003fca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73fb      	strb	r3, [r7, #15]
 8003fd0:	e00d      	b.n	8003fee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	3340      	adds	r3, #64	; 0x40
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	0c1b      	lsrs	r3, r3, #16
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	3301      	adds	r3, #1
 8003fec:	73fb      	strb	r3, [r7, #15]
 8003fee:	7bfa      	ldrb	r2, [r7, #15]
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d3ec      	bcc.n	8003fd2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ff8:	883b      	ldrh	r3, [r7, #0]
 8003ffa:	0418      	lsls	r0, r3, #16
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6819      	ldr	r1, [r3, #0]
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	3b01      	subs	r3, #1
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	4302      	orrs	r2, r0
 8004008:	3340      	adds	r3, #64	; 0x40
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	460b      	mov	r3, r1
 8004028:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	887a      	ldrh	r2, [r7, #2]
 8004030:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e267      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d075      	beq.n	8004162 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004076:	4b88      	ldr	r3, [pc, #544]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
 800407e:	2b04      	cmp	r3, #4
 8004080:	d00c      	beq.n	800409c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004082:	4b85      	ldr	r3, [pc, #532]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800408a:	2b08      	cmp	r3, #8
 800408c:	d112      	bne.n	80040b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800408e:	4b82      	ldr	r3, [pc, #520]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004096:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800409a:	d10b      	bne.n	80040b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800409c:	4b7e      	ldr	r3, [pc, #504]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d05b      	beq.n	8004160 <HAL_RCC_OscConfig+0x108>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d157      	bne.n	8004160 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e242      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040bc:	d106      	bne.n	80040cc <HAL_RCC_OscConfig+0x74>
 80040be:	4b76      	ldr	r3, [pc, #472]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a75      	ldr	r2, [pc, #468]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 80040c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	e01d      	b.n	8004108 <HAL_RCC_OscConfig+0xb0>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040d4:	d10c      	bne.n	80040f0 <HAL_RCC_OscConfig+0x98>
 80040d6:	4b70      	ldr	r3, [pc, #448]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a6f      	ldr	r2, [pc, #444]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 80040dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	4b6d      	ldr	r3, [pc, #436]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a6c      	ldr	r2, [pc, #432]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 80040e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	e00b      	b.n	8004108 <HAL_RCC_OscConfig+0xb0>
 80040f0:	4b69      	ldr	r3, [pc, #420]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a68      	ldr	r2, [pc, #416]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 80040f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	4b66      	ldr	r3, [pc, #408]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a65      	ldr	r2, [pc, #404]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 8004102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d013      	beq.n	8004138 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004110:	f7fd fe62 	bl	8001dd8 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004118:	f7fd fe5e 	bl	8001dd8 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b64      	cmp	r3, #100	; 0x64
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e207      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412a:	4b5b      	ldr	r3, [pc, #364]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f0      	beq.n	8004118 <HAL_RCC_OscConfig+0xc0>
 8004136:	e014      	b.n	8004162 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fd fe4e 	bl	8001dd8 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004140:	f7fd fe4a 	bl	8001dd8 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b64      	cmp	r3, #100	; 0x64
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e1f3      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004152:	4b51      	ldr	r3, [pc, #324]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0xe8>
 800415e:	e000      	b.n	8004162 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d063      	beq.n	8004236 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800416e:	4b4a      	ldr	r3, [pc, #296]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00b      	beq.n	8004192 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800417a:	4b47      	ldr	r3, [pc, #284]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004182:	2b08      	cmp	r3, #8
 8004184:	d11c      	bne.n	80041c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004186:	4b44      	ldr	r3, [pc, #272]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d116      	bne.n	80041c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004192:	4b41      	ldr	r3, [pc, #260]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d005      	beq.n	80041aa <HAL_RCC_OscConfig+0x152>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d001      	beq.n	80041aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e1c7      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041aa:	4b3b      	ldr	r3, [pc, #236]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4937      	ldr	r1, [pc, #220]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041be:	e03a      	b.n	8004236 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d020      	beq.n	800420a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041c8:	4b34      	ldr	r3, [pc, #208]	; (800429c <HAL_RCC_OscConfig+0x244>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ce:	f7fd fe03 	bl	8001dd8 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041d6:	f7fd fdff 	bl	8001dd8 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e1a8      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e8:	4b2b      	ldr	r3, [pc, #172]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0f0      	beq.n	80041d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f4:	4b28      	ldr	r3, [pc, #160]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4925      	ldr	r1, [pc, #148]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 8004204:	4313      	orrs	r3, r2
 8004206:	600b      	str	r3, [r1, #0]
 8004208:	e015      	b.n	8004236 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800420a:	4b24      	ldr	r3, [pc, #144]	; (800429c <HAL_RCC_OscConfig+0x244>)
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fd fde2 	bl	8001dd8 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004218:	f7fd fdde 	bl	8001dd8 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e187      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422a:	4b1b      	ldr	r3, [pc, #108]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f0      	bne.n	8004218 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d036      	beq.n	80042b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d016      	beq.n	8004278 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800424a:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <HAL_RCC_OscConfig+0x248>)
 800424c:	2201      	movs	r2, #1
 800424e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004250:	f7fd fdc2 	bl	8001dd8 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004258:	f7fd fdbe 	bl	8001dd8 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e167      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800426a:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <HAL_RCC_OscConfig+0x240>)
 800426c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0f0      	beq.n	8004258 <HAL_RCC_OscConfig+0x200>
 8004276:	e01b      	b.n	80042b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004278:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <HAL_RCC_OscConfig+0x248>)
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427e:	f7fd fdab 	bl	8001dd8 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004284:	e00e      	b.n	80042a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004286:	f7fd fda7 	bl	8001dd8 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d907      	bls.n	80042a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e150      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
 8004298:	40023800 	.word	0x40023800
 800429c:	42470000 	.word	0x42470000
 80042a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a4:	4b88      	ldr	r3, [pc, #544]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 80042a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1ea      	bne.n	8004286 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 8097 	beq.w	80043ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042be:	2300      	movs	r3, #0
 80042c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042c2:	4b81      	ldr	r3, [pc, #516]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10f      	bne.n	80042ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ce:	2300      	movs	r3, #0
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	4b7d      	ldr	r3, [pc, #500]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	4a7c      	ldr	r2, [pc, #496]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 80042d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042dc:	6413      	str	r3, [r2, #64]	; 0x40
 80042de:	4b7a      	ldr	r3, [pc, #488]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e6:	60bb      	str	r3, [r7, #8]
 80042e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ea:	2301      	movs	r3, #1
 80042ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ee:	4b77      	ldr	r3, [pc, #476]	; (80044cc <HAL_RCC_OscConfig+0x474>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d118      	bne.n	800432c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042fa:	4b74      	ldr	r3, [pc, #464]	; (80044cc <HAL_RCC_OscConfig+0x474>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a73      	ldr	r2, [pc, #460]	; (80044cc <HAL_RCC_OscConfig+0x474>)
 8004300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004306:	f7fd fd67 	bl	8001dd8 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800430e:	f7fd fd63 	bl	8001dd8 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e10c      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004320:	4b6a      	ldr	r3, [pc, #424]	; (80044cc <HAL_RCC_OscConfig+0x474>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0f0      	beq.n	800430e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d106      	bne.n	8004342 <HAL_RCC_OscConfig+0x2ea>
 8004334:	4b64      	ldr	r3, [pc, #400]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	4a63      	ldr	r2, [pc, #396]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	6713      	str	r3, [r2, #112]	; 0x70
 8004340:	e01c      	b.n	800437c <HAL_RCC_OscConfig+0x324>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	2b05      	cmp	r3, #5
 8004348:	d10c      	bne.n	8004364 <HAL_RCC_OscConfig+0x30c>
 800434a:	4b5f      	ldr	r3, [pc, #380]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	4a5e      	ldr	r2, [pc, #376]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 8004350:	f043 0304 	orr.w	r3, r3, #4
 8004354:	6713      	str	r3, [r2, #112]	; 0x70
 8004356:	4b5c      	ldr	r3, [pc, #368]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 8004358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435a:	4a5b      	ldr	r2, [pc, #364]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	6713      	str	r3, [r2, #112]	; 0x70
 8004362:	e00b      	b.n	800437c <HAL_RCC_OscConfig+0x324>
 8004364:	4b58      	ldr	r3, [pc, #352]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 8004366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004368:	4a57      	ldr	r2, [pc, #348]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	6713      	str	r3, [r2, #112]	; 0x70
 8004370:	4b55      	ldr	r3, [pc, #340]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	4a54      	ldr	r2, [pc, #336]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 8004376:	f023 0304 	bic.w	r3, r3, #4
 800437a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d015      	beq.n	80043b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004384:	f7fd fd28 	bl	8001dd8 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800438a:	e00a      	b.n	80043a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800438c:	f7fd fd24 	bl	8001dd8 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	f241 3288 	movw	r2, #5000	; 0x1388
 800439a:	4293      	cmp	r3, r2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e0cb      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a2:	4b49      	ldr	r3, [pc, #292]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0ee      	beq.n	800438c <HAL_RCC_OscConfig+0x334>
 80043ae:	e014      	b.n	80043da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b0:	f7fd fd12 	bl	8001dd8 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b6:	e00a      	b.n	80043ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b8:	f7fd fd0e 	bl	8001dd8 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e0b5      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ce:	4b3e      	ldr	r3, [pc, #248]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1ee      	bne.n	80043b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043da:	7dfb      	ldrb	r3, [r7, #23]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d105      	bne.n	80043ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e0:	4b39      	ldr	r3, [pc, #228]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	4a38      	ldr	r2, [pc, #224]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 80043e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 80a1 	beq.w	8004538 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043f6:	4b34      	ldr	r3, [pc, #208]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 030c 	and.w	r3, r3, #12
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d05c      	beq.n	80044bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d141      	bne.n	800448e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440a:	4b31      	ldr	r3, [pc, #196]	; (80044d0 <HAL_RCC_OscConfig+0x478>)
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004410:	f7fd fce2 	bl	8001dd8 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004418:	f7fd fcde 	bl	8001dd8 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e087      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442a:	4b27      	ldr	r3, [pc, #156]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69da      	ldr	r2, [r3, #28]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	019b      	lsls	r3, r3, #6
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444c:	085b      	lsrs	r3, r3, #1
 800444e:	3b01      	subs	r3, #1
 8004450:	041b      	lsls	r3, r3, #16
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	061b      	lsls	r3, r3, #24
 800445a:	491b      	ldr	r1, [pc, #108]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 800445c:	4313      	orrs	r3, r2
 800445e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004460:	4b1b      	ldr	r3, [pc, #108]	; (80044d0 <HAL_RCC_OscConfig+0x478>)
 8004462:	2201      	movs	r2, #1
 8004464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004466:	f7fd fcb7 	bl	8001dd8 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800446e:	f7fd fcb3 	bl	8001dd8 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e05c      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004480:	4b11      	ldr	r3, [pc, #68]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_OscConfig+0x416>
 800448c:	e054      	b.n	8004538 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800448e:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <HAL_RCC_OscConfig+0x478>)
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004494:	f7fd fca0 	bl	8001dd8 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800449c:	f7fd fc9c 	bl	8001dd8 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e045      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ae:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <HAL_RCC_OscConfig+0x470>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x444>
 80044ba:	e03d      	b.n	8004538 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d107      	bne.n	80044d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e038      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
 80044c8:	40023800 	.word	0x40023800
 80044cc:	40007000 	.word	0x40007000
 80044d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044d4:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <HAL_RCC_OscConfig+0x4ec>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d028      	beq.n	8004534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d121      	bne.n	8004534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d11a      	bne.n	8004534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004504:	4013      	ands	r3, r2
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800450a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800450c:	4293      	cmp	r3, r2
 800450e:	d111      	bne.n	8004534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	085b      	lsrs	r3, r3, #1
 800451c:	3b01      	subs	r3, #1
 800451e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d107      	bne.n	8004534 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004530:	429a      	cmp	r2, r3
 8004532:	d001      	beq.n	8004538 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800

08004548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0cc      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800455c:	4b68      	ldr	r3, [pc, #416]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d90c      	bls.n	8004584 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456a:	4b65      	ldr	r3, [pc, #404]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004572:	4b63      	ldr	r3, [pc, #396]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0b8      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d020      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800459c:	4b59      	ldr	r3, [pc, #356]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	4a58      	ldr	r2, [pc, #352]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045b4:	4b53      	ldr	r3, [pc, #332]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4a52      	ldr	r2, [pc, #328]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c0:	4b50      	ldr	r3, [pc, #320]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	494d      	ldr	r1, [pc, #308]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d044      	beq.n	8004668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d107      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	4b47      	ldr	r3, [pc, #284]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d119      	bne.n	8004626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e07f      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d003      	beq.n	8004606 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004602:	2b03      	cmp	r3, #3
 8004604:	d107      	bne.n	8004616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004606:	4b3f      	ldr	r3, [pc, #252]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e06f      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004616:	4b3b      	ldr	r3, [pc, #236]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e067      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004626:	4b37      	ldr	r3, [pc, #220]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f023 0203 	bic.w	r2, r3, #3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	4934      	ldr	r1, [pc, #208]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 8004634:	4313      	orrs	r3, r2
 8004636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004638:	f7fd fbce 	bl	8001dd8 <HAL_GetTick>
 800463c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463e:	e00a      	b.n	8004656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004640:	f7fd fbca 	bl	8001dd8 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	f241 3288 	movw	r2, #5000	; 0x1388
 800464e:	4293      	cmp	r3, r2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e04f      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004656:	4b2b      	ldr	r3, [pc, #172]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 020c 	and.w	r2, r3, #12
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	429a      	cmp	r2, r3
 8004666:	d1eb      	bne.n	8004640 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004668:	4b25      	ldr	r3, [pc, #148]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d20c      	bcs.n	8004690 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004676:	4b22      	ldr	r3, [pc, #136]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800467e:	4b20      	ldr	r3, [pc, #128]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e032      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800469c:	4b19      	ldr	r3, [pc, #100]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	4916      	ldr	r1, [pc, #88]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ba:	4b12      	ldr	r3, [pc, #72]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	490e      	ldr	r1, [pc, #56]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046ce:	f000 f821 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 80046d2:	4602      	mov	r2, r0
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	490a      	ldr	r1, [pc, #40]	; (8004708 <HAL_RCC_ClockConfig+0x1c0>)
 80046e0:	5ccb      	ldrb	r3, [r1, r3]
 80046e2:	fa22 f303 	lsr.w	r3, r2, r3
 80046e6:	4a09      	ldr	r2, [pc, #36]	; (800470c <HAL_RCC_ClockConfig+0x1c4>)
 80046e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046ea:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_RCC_ClockConfig+0x1c8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fd fb2e 	bl	8001d50 <HAL_InitTick>

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40023c00 	.word	0x40023c00
 8004704:	40023800 	.word	0x40023800
 8004708:	0800c308 	.word	0x0800c308
 800470c:	20000000 	.word	0x20000000
 8004710:	20000004 	.word	0x20000004

08004714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004718:	b094      	sub	sp, #80	; 0x50
 800471a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	647b      	str	r3, [r7, #68]	; 0x44
 8004720:	2300      	movs	r3, #0
 8004722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004724:	2300      	movs	r3, #0
 8004726:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800472c:	4b79      	ldr	r3, [pc, #484]	; (8004914 <HAL_RCC_GetSysClockFreq+0x200>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f003 030c 	and.w	r3, r3, #12
 8004734:	2b08      	cmp	r3, #8
 8004736:	d00d      	beq.n	8004754 <HAL_RCC_GetSysClockFreq+0x40>
 8004738:	2b08      	cmp	r3, #8
 800473a:	f200 80e1 	bhi.w	8004900 <HAL_RCC_GetSysClockFreq+0x1ec>
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <HAL_RCC_GetSysClockFreq+0x34>
 8004742:	2b04      	cmp	r3, #4
 8004744:	d003      	beq.n	800474e <HAL_RCC_GetSysClockFreq+0x3a>
 8004746:	e0db      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004748:	4b73      	ldr	r3, [pc, #460]	; (8004918 <HAL_RCC_GetSysClockFreq+0x204>)
 800474a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800474c:	e0db      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800474e:	4b73      	ldr	r3, [pc, #460]	; (800491c <HAL_RCC_GetSysClockFreq+0x208>)
 8004750:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004752:	e0d8      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004754:	4b6f      	ldr	r3, [pc, #444]	; (8004914 <HAL_RCC_GetSysClockFreq+0x200>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800475c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800475e:	4b6d      	ldr	r3, [pc, #436]	; (8004914 <HAL_RCC_GetSysClockFreq+0x200>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d063      	beq.n	8004832 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800476a:	4b6a      	ldr	r3, [pc, #424]	; (8004914 <HAL_RCC_GetSysClockFreq+0x200>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	099b      	lsrs	r3, r3, #6
 8004770:	2200      	movs	r2, #0
 8004772:	63bb      	str	r3, [r7, #56]	; 0x38
 8004774:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800477c:	633b      	str	r3, [r7, #48]	; 0x30
 800477e:	2300      	movs	r3, #0
 8004780:	637b      	str	r3, [r7, #52]	; 0x34
 8004782:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004786:	4622      	mov	r2, r4
 8004788:	462b      	mov	r3, r5
 800478a:	f04f 0000 	mov.w	r0, #0
 800478e:	f04f 0100 	mov.w	r1, #0
 8004792:	0159      	lsls	r1, r3, #5
 8004794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004798:	0150      	lsls	r0, r2, #5
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4621      	mov	r1, r4
 80047a0:	1a51      	subs	r1, r2, r1
 80047a2:	6139      	str	r1, [r7, #16]
 80047a4:	4629      	mov	r1, r5
 80047a6:	eb63 0301 	sbc.w	r3, r3, r1
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047b8:	4659      	mov	r1, fp
 80047ba:	018b      	lsls	r3, r1, #6
 80047bc:	4651      	mov	r1, sl
 80047be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047c2:	4651      	mov	r1, sl
 80047c4:	018a      	lsls	r2, r1, #6
 80047c6:	4651      	mov	r1, sl
 80047c8:	ebb2 0801 	subs.w	r8, r2, r1
 80047cc:	4659      	mov	r1, fp
 80047ce:	eb63 0901 	sbc.w	r9, r3, r1
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047e6:	4690      	mov	r8, r2
 80047e8:	4699      	mov	r9, r3
 80047ea:	4623      	mov	r3, r4
 80047ec:	eb18 0303 	adds.w	r3, r8, r3
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	462b      	mov	r3, r5
 80047f4:	eb49 0303 	adc.w	r3, r9, r3
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004806:	4629      	mov	r1, r5
 8004808:	024b      	lsls	r3, r1, #9
 800480a:	4621      	mov	r1, r4
 800480c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004810:	4621      	mov	r1, r4
 8004812:	024a      	lsls	r2, r1, #9
 8004814:	4610      	mov	r0, r2
 8004816:	4619      	mov	r1, r3
 8004818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800481a:	2200      	movs	r2, #0
 800481c:	62bb      	str	r3, [r7, #40]	; 0x28
 800481e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004820:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004824:	f7fc f9f2 	bl	8000c0c <__aeabi_uldivmod>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4613      	mov	r3, r2
 800482e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004830:	e058      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004832:	4b38      	ldr	r3, [pc, #224]	; (8004914 <HAL_RCC_GetSysClockFreq+0x200>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	099b      	lsrs	r3, r3, #6
 8004838:	2200      	movs	r2, #0
 800483a:	4618      	mov	r0, r3
 800483c:	4611      	mov	r1, r2
 800483e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004842:	623b      	str	r3, [r7, #32]
 8004844:	2300      	movs	r3, #0
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
 8004848:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800484c:	4642      	mov	r2, r8
 800484e:	464b      	mov	r3, r9
 8004850:	f04f 0000 	mov.w	r0, #0
 8004854:	f04f 0100 	mov.w	r1, #0
 8004858:	0159      	lsls	r1, r3, #5
 800485a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800485e:	0150      	lsls	r0, r2, #5
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4641      	mov	r1, r8
 8004866:	ebb2 0a01 	subs.w	sl, r2, r1
 800486a:	4649      	mov	r1, r9
 800486c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800487c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004880:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004884:	ebb2 040a 	subs.w	r4, r2, sl
 8004888:	eb63 050b 	sbc.w	r5, r3, fp
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	f04f 0300 	mov.w	r3, #0
 8004894:	00eb      	lsls	r3, r5, #3
 8004896:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800489a:	00e2      	lsls	r2, r4, #3
 800489c:	4614      	mov	r4, r2
 800489e:	461d      	mov	r5, r3
 80048a0:	4643      	mov	r3, r8
 80048a2:	18e3      	adds	r3, r4, r3
 80048a4:	603b      	str	r3, [r7, #0]
 80048a6:	464b      	mov	r3, r9
 80048a8:	eb45 0303 	adc.w	r3, r5, r3
 80048ac:	607b      	str	r3, [r7, #4]
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048ba:	4629      	mov	r1, r5
 80048bc:	028b      	lsls	r3, r1, #10
 80048be:	4621      	mov	r1, r4
 80048c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048c4:	4621      	mov	r1, r4
 80048c6:	028a      	lsls	r2, r1, #10
 80048c8:	4610      	mov	r0, r2
 80048ca:	4619      	mov	r1, r3
 80048cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ce:	2200      	movs	r2, #0
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	61fa      	str	r2, [r7, #28]
 80048d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048d8:	f7fc f998 	bl	8000c0c <__aeabi_uldivmod>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4613      	mov	r3, r2
 80048e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048e4:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <HAL_RCC_GetSysClockFreq+0x200>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	0c1b      	lsrs	r3, r3, #16
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	3301      	adds	r3, #1
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80048f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048fe:	e002      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004900:	4b05      	ldr	r3, [pc, #20]	; (8004918 <HAL_RCC_GetSysClockFreq+0x204>)
 8004902:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004908:	4618      	mov	r0, r3
 800490a:	3750      	adds	r7, #80	; 0x50
 800490c:	46bd      	mov	sp, r7
 800490e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004912:	bf00      	nop
 8004914:	40023800 	.word	0x40023800
 8004918:	00f42400 	.word	0x00f42400
 800491c:	007a1200 	.word	0x007a1200

08004920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004924:	4b03      	ldr	r3, [pc, #12]	; (8004934 <HAL_RCC_GetHCLKFreq+0x14>)
 8004926:	681b      	ldr	r3, [r3, #0]
}
 8004928:	4618      	mov	r0, r3
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000000 	.word	0x20000000

08004938 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e041      	b.n	80049ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fd f806 	bl	8001970 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3304      	adds	r3, #4
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f000 f9b8 	bl	8004cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d109      	bne.n	80049fc <HAL_TIM_PWM_Start+0x24>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	bf14      	ite	ne
 80049f4:	2301      	movne	r3, #1
 80049f6:	2300      	moveq	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	e022      	b.n	8004a42 <HAL_TIM_PWM_Start+0x6a>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d109      	bne.n	8004a16 <HAL_TIM_PWM_Start+0x3e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	bf14      	ite	ne
 8004a0e:	2301      	movne	r3, #1
 8004a10:	2300      	moveq	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	e015      	b.n	8004a42 <HAL_TIM_PWM_Start+0x6a>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d109      	bne.n	8004a30 <HAL_TIM_PWM_Start+0x58>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	bf14      	ite	ne
 8004a28:	2301      	movne	r3, #1
 8004a2a:	2300      	moveq	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	e008      	b.n	8004a42 <HAL_TIM_PWM_Start+0x6a>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	bf14      	ite	ne
 8004a3c:	2301      	movne	r3, #1
 8004a3e:	2300      	moveq	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e07c      	b.n	8004b44 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d104      	bne.n	8004a5a <HAL_TIM_PWM_Start+0x82>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a58:	e013      	b.n	8004a82 <HAL_TIM_PWM_Start+0xaa>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d104      	bne.n	8004a6a <HAL_TIM_PWM_Start+0x92>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a68:	e00b      	b.n	8004a82 <HAL_TIM_PWM_Start+0xaa>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d104      	bne.n	8004a7a <HAL_TIM_PWM_Start+0xa2>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a78:	e003      	b.n	8004a82 <HAL_TIM_PWM_Start+0xaa>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2201      	movs	r2, #1
 8004a88:	6839      	ldr	r1, [r7, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fb7e 	bl	800518c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a2d      	ldr	r2, [pc, #180]	; (8004b4c <HAL_TIM_PWM_Start+0x174>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <HAL_TIM_PWM_Start+0xcc>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a2c      	ldr	r2, [pc, #176]	; (8004b50 <HAL_TIM_PWM_Start+0x178>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d101      	bne.n	8004aa8 <HAL_TIM_PWM_Start+0xd0>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <HAL_TIM_PWM_Start+0xd2>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d007      	beq.n	8004abe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004abc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a22      	ldr	r2, [pc, #136]	; (8004b4c <HAL_TIM_PWM_Start+0x174>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d022      	beq.n	8004b0e <HAL_TIM_PWM_Start+0x136>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad0:	d01d      	beq.n	8004b0e <HAL_TIM_PWM_Start+0x136>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1f      	ldr	r2, [pc, #124]	; (8004b54 <HAL_TIM_PWM_Start+0x17c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d018      	beq.n	8004b0e <HAL_TIM_PWM_Start+0x136>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1d      	ldr	r2, [pc, #116]	; (8004b58 <HAL_TIM_PWM_Start+0x180>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d013      	beq.n	8004b0e <HAL_TIM_PWM_Start+0x136>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1c      	ldr	r2, [pc, #112]	; (8004b5c <HAL_TIM_PWM_Start+0x184>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00e      	beq.n	8004b0e <HAL_TIM_PWM_Start+0x136>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a16      	ldr	r2, [pc, #88]	; (8004b50 <HAL_TIM_PWM_Start+0x178>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d009      	beq.n	8004b0e <HAL_TIM_PWM_Start+0x136>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a18      	ldr	r2, [pc, #96]	; (8004b60 <HAL_TIM_PWM_Start+0x188>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d004      	beq.n	8004b0e <HAL_TIM_PWM_Start+0x136>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a16      	ldr	r2, [pc, #88]	; (8004b64 <HAL_TIM_PWM_Start+0x18c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d111      	bne.n	8004b32 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b06      	cmp	r3, #6
 8004b1e:	d010      	beq.n	8004b42 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b30:	e007      	b.n	8004b42 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0201 	orr.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40010000 	.word	0x40010000
 8004b50:	40010400 	.word	0x40010400
 8004b54:	40000400 	.word	0x40000400
 8004b58:	40000800 	.word	0x40000800
 8004b5c:	40000c00 	.word	0x40000c00
 8004b60:	40014000 	.word	0x40014000
 8004b64:	40001800 	.word	0x40001800

08004b68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d101      	bne.n	8004b86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b82:	2302      	movs	r3, #2
 8004b84:	e0ae      	b.n	8004ce4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b0c      	cmp	r3, #12
 8004b92:	f200 809f 	bhi.w	8004cd4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b96:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9c:	08004bd1 	.word	0x08004bd1
 8004ba0:	08004cd5 	.word	0x08004cd5
 8004ba4:	08004cd5 	.word	0x08004cd5
 8004ba8:	08004cd5 	.word	0x08004cd5
 8004bac:	08004c11 	.word	0x08004c11
 8004bb0:	08004cd5 	.word	0x08004cd5
 8004bb4:	08004cd5 	.word	0x08004cd5
 8004bb8:	08004cd5 	.word	0x08004cd5
 8004bbc:	08004c53 	.word	0x08004c53
 8004bc0:	08004cd5 	.word	0x08004cd5
 8004bc4:	08004cd5 	.word	0x08004cd5
 8004bc8:	08004cd5 	.word	0x08004cd5
 8004bcc:	08004c93 	.word	0x08004c93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 f928 	bl	8004e2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699a      	ldr	r2, [r3, #24]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0208 	orr.w	r2, r2, #8
 8004bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0204 	bic.w	r2, r2, #4
 8004bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6999      	ldr	r1, [r3, #24]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	619a      	str	r2, [r3, #24]
      break;
 8004c0e:	e064      	b.n	8004cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 f978 	bl	8004f0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699a      	ldr	r2, [r3, #24]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699a      	ldr	r2, [r3, #24]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6999      	ldr	r1, [r3, #24]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	021a      	lsls	r2, r3, #8
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	619a      	str	r2, [r3, #24]
      break;
 8004c50:	e043      	b.n	8004cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 f9cd 	bl	8004ff8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69da      	ldr	r2, [r3, #28]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f042 0208 	orr.w	r2, r2, #8
 8004c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69da      	ldr	r2, [r3, #28]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0204 	bic.w	r2, r2, #4
 8004c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69d9      	ldr	r1, [r3, #28]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	61da      	str	r2, [r3, #28]
      break;
 8004c90:	e023      	b.n	8004cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68b9      	ldr	r1, [r7, #8]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 fa21 	bl	80050e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69da      	ldr	r2, [r3, #28]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69da      	ldr	r2, [r3, #28]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69d9      	ldr	r1, [r3, #28]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	021a      	lsls	r2, r3, #8
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	61da      	str	r2, [r3, #28]
      break;
 8004cd2:	e002      	b.n	8004cda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004cd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a40      	ldr	r2, [pc, #256]	; (8004e00 <TIM_Base_SetConfig+0x114>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d013      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0a:	d00f      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a3d      	ldr	r2, [pc, #244]	; (8004e04 <TIM_Base_SetConfig+0x118>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00b      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a3c      	ldr	r2, [pc, #240]	; (8004e08 <TIM_Base_SetConfig+0x11c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d007      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a3b      	ldr	r2, [pc, #236]	; (8004e0c <TIM_Base_SetConfig+0x120>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d003      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a3a      	ldr	r2, [pc, #232]	; (8004e10 <TIM_Base_SetConfig+0x124>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d108      	bne.n	8004d3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a2f      	ldr	r2, [pc, #188]	; (8004e00 <TIM_Base_SetConfig+0x114>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d02b      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4c:	d027      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a2c      	ldr	r2, [pc, #176]	; (8004e04 <TIM_Base_SetConfig+0x118>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d023      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a2b      	ldr	r2, [pc, #172]	; (8004e08 <TIM_Base_SetConfig+0x11c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d01f      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2a      	ldr	r2, [pc, #168]	; (8004e0c <TIM_Base_SetConfig+0x120>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d01b      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a29      	ldr	r2, [pc, #164]	; (8004e10 <TIM_Base_SetConfig+0x124>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d017      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a28      	ldr	r2, [pc, #160]	; (8004e14 <TIM_Base_SetConfig+0x128>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d013      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a27      	ldr	r2, [pc, #156]	; (8004e18 <TIM_Base_SetConfig+0x12c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00f      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a26      	ldr	r2, [pc, #152]	; (8004e1c <TIM_Base_SetConfig+0x130>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00b      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a25      	ldr	r2, [pc, #148]	; (8004e20 <TIM_Base_SetConfig+0x134>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d007      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a24      	ldr	r2, [pc, #144]	; (8004e24 <TIM_Base_SetConfig+0x138>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d003      	beq.n	8004d9e <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a23      	ldr	r2, [pc, #140]	; (8004e28 <TIM_Base_SetConfig+0x13c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d108      	bne.n	8004db0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a0a      	ldr	r2, [pc, #40]	; (8004e00 <TIM_Base_SetConfig+0x114>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d003      	beq.n	8004de4 <TIM_Base_SetConfig+0xf8>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a0c      	ldr	r2, [pc, #48]	; (8004e10 <TIM_Base_SetConfig+0x124>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d103      	bne.n	8004dec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	615a      	str	r2, [r3, #20]
}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40010000 	.word	0x40010000
 8004e04:	40000400 	.word	0x40000400
 8004e08:	40000800 	.word	0x40000800
 8004e0c:	40000c00 	.word	0x40000c00
 8004e10:	40010400 	.word	0x40010400
 8004e14:	40014000 	.word	0x40014000
 8004e18:	40014400 	.word	0x40014400
 8004e1c:	40014800 	.word	0x40014800
 8004e20:	40001800 	.word	0x40001800
 8004e24:	40001c00 	.word	0x40001c00
 8004e28:	40002000 	.word	0x40002000

08004e2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f023 0201 	bic.w	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0303 	bic.w	r3, r3, #3
 8004e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f023 0302 	bic.w	r3, r3, #2
 8004e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a20      	ldr	r2, [pc, #128]	; (8004f04 <TIM_OC1_SetConfig+0xd8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_OC1_SetConfig+0x64>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a1f      	ldr	r2, [pc, #124]	; (8004f08 <TIM_OC1_SetConfig+0xdc>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d10c      	bne.n	8004eaa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f023 0308 	bic.w	r3, r3, #8
 8004e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f023 0304 	bic.w	r3, r3, #4
 8004ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a15      	ldr	r2, [pc, #84]	; (8004f04 <TIM_OC1_SetConfig+0xd8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d003      	beq.n	8004eba <TIM_OC1_SetConfig+0x8e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a14      	ldr	r2, [pc, #80]	; (8004f08 <TIM_OC1_SetConfig+0xdc>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d111      	bne.n	8004ede <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	621a      	str	r2, [r3, #32]
}
 8004ef8:	bf00      	nop
 8004efa:	371c      	adds	r7, #28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	40010000 	.word	0x40010000
 8004f08:	40010400 	.word	0x40010400

08004f0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	f023 0210 	bic.w	r2, r3, #16
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	021b      	lsls	r3, r3, #8
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f023 0320 	bic.w	r3, r3, #32
 8004f56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a22      	ldr	r2, [pc, #136]	; (8004ff0 <TIM_OC2_SetConfig+0xe4>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d003      	beq.n	8004f74 <TIM_OC2_SetConfig+0x68>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a21      	ldr	r2, [pc, #132]	; (8004ff4 <TIM_OC2_SetConfig+0xe8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d10d      	bne.n	8004f90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a17      	ldr	r2, [pc, #92]	; (8004ff0 <TIM_OC2_SetConfig+0xe4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_OC2_SetConfig+0x94>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a16      	ldr	r2, [pc, #88]	; (8004ff4 <TIM_OC2_SetConfig+0xe8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d113      	bne.n	8004fc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	621a      	str	r2, [r3, #32]
}
 8004fe2:	bf00      	nop
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40010000 	.word	0x40010000
 8004ff4:	40010400 	.word	0x40010400

08004ff8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0303 	bic.w	r3, r3, #3
 800502e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	021b      	lsls	r3, r3, #8
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a21      	ldr	r2, [pc, #132]	; (80050d8 <TIM_OC3_SetConfig+0xe0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d003      	beq.n	800505e <TIM_OC3_SetConfig+0x66>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a20      	ldr	r2, [pc, #128]	; (80050dc <TIM_OC3_SetConfig+0xe4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d10d      	bne.n	800507a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	4313      	orrs	r3, r2
 8005070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a16      	ldr	r2, [pc, #88]	; (80050d8 <TIM_OC3_SetConfig+0xe0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d003      	beq.n	800508a <TIM_OC3_SetConfig+0x92>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a15      	ldr	r2, [pc, #84]	; (80050dc <TIM_OC3_SetConfig+0xe4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d113      	bne.n	80050b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	621a      	str	r2, [r3, #32]
}
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	40010000 	.word	0x40010000
 80050dc:	40010400 	.word	0x40010400

080050e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	021b      	lsls	r3, r3, #8
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800512a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	031b      	lsls	r3, r3, #12
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a12      	ldr	r2, [pc, #72]	; (8005184 <TIM_OC4_SetConfig+0xa4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_OC4_SetConfig+0x68>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a11      	ldr	r2, [pc, #68]	; (8005188 <TIM_OC4_SetConfig+0xa8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d109      	bne.n	800515c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800514e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	019b      	lsls	r3, r3, #6
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	621a      	str	r2, [r3, #32]
}
 8005176:	bf00      	nop
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40010000 	.word	0x40010000
 8005188:	40010400 	.word	0x40010400

0800518c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f003 031f 	and.w	r3, r3, #31
 800519e:	2201      	movs	r2, #1
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1a      	ldr	r2, [r3, #32]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	43db      	mvns	r3, r3
 80051ae:	401a      	ands	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a1a      	ldr	r2, [r3, #32]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	f003 031f 	and.w	r3, r3, #31
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	fa01 f303 	lsl.w	r3, r1, r3
 80051c4:	431a      	orrs	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	621a      	str	r2, [r3, #32]
}
 80051ca:	bf00      	nop
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d101      	bne.n	80051f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051ec:	2302      	movs	r3, #2
 80051ee:	e05a      	b.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005216:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a21      	ldr	r2, [pc, #132]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d022      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523c:	d01d      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a1d      	ldr	r2, [pc, #116]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d018      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a1b      	ldr	r2, [pc, #108]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d013      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a1a      	ldr	r2, [pc, #104]	; (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00e      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d009      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a17      	ldr	r2, [pc, #92]	; (80052c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d004      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a15      	ldr	r2, [pc, #84]	; (80052cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d10c      	bne.n	8005294 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005280:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	4313      	orrs	r3, r2
 800528a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40010000 	.word	0x40010000
 80052b8:	40000400 	.word	0x40000400
 80052bc:	40000800 	.word	0x40000800
 80052c0:	40000c00 	.word	0x40000c00
 80052c4:	40010400 	.word	0x40010400
 80052c8:	40014000 	.word	0x40014000
 80052cc:	40001800 	.word	0x40001800

080052d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052d0:	b084      	sub	sp, #16
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	f107 001c 	add.w	r0, r7, #28
 80052de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d122      	bne.n	800532e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80052fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005312:	2b01      	cmp	r3, #1
 8005314:	d105      	bne.n	8005322 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f001 fbee 	bl	8006b04 <USB_CoreReset>
 8005328:	4603      	mov	r3, r0
 800532a:	73fb      	strb	r3, [r7, #15]
 800532c:	e01a      	b.n	8005364 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f001 fbe2 	bl	8006b04 <USB_CoreReset>
 8005340:	4603      	mov	r3, r0
 8005342:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	639a      	str	r2, [r3, #56]	; 0x38
 8005356:	e005      	b.n	8005364 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	2b01      	cmp	r3, #1
 8005368:	d10b      	bne.n	8005382 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f043 0206 	orr.w	r2, r3, #6
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f043 0220 	orr.w	r2, r3, #32
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005382:	7bfb      	ldrb	r3, [r7, #15]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800538e:	b004      	add	sp, #16
 8005390:	4770      	bx	lr
	...

08005394 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	4613      	mov	r3, r2
 80053a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d165      	bne.n	8005474 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	4a41      	ldr	r2, [pc, #260]	; (80054b0 <USB_SetTurnaroundTime+0x11c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d906      	bls.n	80053be <USB_SetTurnaroundTime+0x2a>
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4a40      	ldr	r2, [pc, #256]	; (80054b4 <USB_SetTurnaroundTime+0x120>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d202      	bcs.n	80053be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80053b8:	230f      	movs	r3, #15
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	e062      	b.n	8005484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	4a3c      	ldr	r2, [pc, #240]	; (80054b4 <USB_SetTurnaroundTime+0x120>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d306      	bcc.n	80053d4 <USB_SetTurnaroundTime+0x40>
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	4a3b      	ldr	r2, [pc, #236]	; (80054b8 <USB_SetTurnaroundTime+0x124>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d202      	bcs.n	80053d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80053ce:	230e      	movs	r3, #14
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	e057      	b.n	8005484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4a38      	ldr	r2, [pc, #224]	; (80054b8 <USB_SetTurnaroundTime+0x124>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d306      	bcc.n	80053ea <USB_SetTurnaroundTime+0x56>
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4a37      	ldr	r2, [pc, #220]	; (80054bc <USB_SetTurnaroundTime+0x128>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d202      	bcs.n	80053ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80053e4:	230d      	movs	r3, #13
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	e04c      	b.n	8005484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	4a33      	ldr	r2, [pc, #204]	; (80054bc <USB_SetTurnaroundTime+0x128>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d306      	bcc.n	8005400 <USB_SetTurnaroundTime+0x6c>
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	4a32      	ldr	r2, [pc, #200]	; (80054c0 <USB_SetTurnaroundTime+0x12c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d802      	bhi.n	8005400 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80053fa:	230c      	movs	r3, #12
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	e041      	b.n	8005484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4a2f      	ldr	r2, [pc, #188]	; (80054c0 <USB_SetTurnaroundTime+0x12c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d906      	bls.n	8005416 <USB_SetTurnaroundTime+0x82>
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4a2e      	ldr	r2, [pc, #184]	; (80054c4 <USB_SetTurnaroundTime+0x130>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d802      	bhi.n	8005416 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005410:	230b      	movs	r3, #11
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	e036      	b.n	8005484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	4a2a      	ldr	r2, [pc, #168]	; (80054c4 <USB_SetTurnaroundTime+0x130>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d906      	bls.n	800542c <USB_SetTurnaroundTime+0x98>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	4a29      	ldr	r2, [pc, #164]	; (80054c8 <USB_SetTurnaroundTime+0x134>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d802      	bhi.n	800542c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005426:	230a      	movs	r3, #10
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	e02b      	b.n	8005484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	4a26      	ldr	r2, [pc, #152]	; (80054c8 <USB_SetTurnaroundTime+0x134>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d906      	bls.n	8005442 <USB_SetTurnaroundTime+0xae>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4a25      	ldr	r2, [pc, #148]	; (80054cc <USB_SetTurnaroundTime+0x138>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d202      	bcs.n	8005442 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800543c:	2309      	movs	r3, #9
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	e020      	b.n	8005484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	4a21      	ldr	r2, [pc, #132]	; (80054cc <USB_SetTurnaroundTime+0x138>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d306      	bcc.n	8005458 <USB_SetTurnaroundTime+0xc4>
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	4a20      	ldr	r2, [pc, #128]	; (80054d0 <USB_SetTurnaroundTime+0x13c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d802      	bhi.n	8005458 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005452:	2308      	movs	r3, #8
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	e015      	b.n	8005484 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4a1d      	ldr	r2, [pc, #116]	; (80054d0 <USB_SetTurnaroundTime+0x13c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d906      	bls.n	800546e <USB_SetTurnaroundTime+0xda>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4a1c      	ldr	r2, [pc, #112]	; (80054d4 <USB_SetTurnaroundTime+0x140>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d202      	bcs.n	800546e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005468:	2307      	movs	r3, #7
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	e00a      	b.n	8005484 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800546e:	2306      	movs	r3, #6
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	e007      	b.n	8005484 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d102      	bne.n	8005480 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800547a:	2309      	movs	r3, #9
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	e001      	b.n	8005484 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005480:	2309      	movs	r3, #9
 8005482:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	029b      	lsls	r3, r3, #10
 8005498:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800549c:	431a      	orrs	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	00d8acbf 	.word	0x00d8acbf
 80054b4:	00e4e1c0 	.word	0x00e4e1c0
 80054b8:	00f42400 	.word	0x00f42400
 80054bc:	01067380 	.word	0x01067380
 80054c0:	011a499f 	.word	0x011a499f
 80054c4:	01312cff 	.word	0x01312cff
 80054c8:	014ca43f 	.word	0x014ca43f
 80054cc:	016e3600 	.word	0x016e3600
 80054d0:	01a6ab1f 	.word	0x01a6ab1f
 80054d4:	01e84800 	.word	0x01e84800

080054d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f043 0201 	orr.w	r2, r3, #1
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f023 0201 	bic.w	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	460b      	mov	r3, r1
 8005526:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d115      	bne.n	800556a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800554a:	2001      	movs	r0, #1
 800554c:	f7fc fc50 	bl	8001df0 <HAL_Delay>
      ms++;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3301      	adds	r3, #1
 8005554:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f001 fa45 	bl	80069e6 <USB_GetMode>
 800555c:	4603      	mov	r3, r0
 800555e:	2b01      	cmp	r3, #1
 8005560:	d01e      	beq.n	80055a0 <USB_SetCurrentMode+0x84>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b31      	cmp	r3, #49	; 0x31
 8005566:	d9f0      	bls.n	800554a <USB_SetCurrentMode+0x2e>
 8005568:	e01a      	b.n	80055a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d115      	bne.n	800559c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800557c:	2001      	movs	r0, #1
 800557e:	f7fc fc37 	bl	8001df0 <HAL_Delay>
      ms++;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3301      	adds	r3, #1
 8005586:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f001 fa2c 	bl	80069e6 <USB_GetMode>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <USB_SetCurrentMode+0x84>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b31      	cmp	r3, #49	; 0x31
 8005598:	d9f0      	bls.n	800557c <USB_SetCurrentMode+0x60>
 800559a:	e001      	b.n	80055a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e005      	b.n	80055ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2b32      	cmp	r3, #50	; 0x32
 80055a4:	d101      	bne.n	80055aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055b4:	b084      	sub	sp, #16
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b086      	sub	sp, #24
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80055c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055ce:	2300      	movs	r3, #0
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	e009      	b.n	80055e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	3340      	adds	r3, #64	; 0x40
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	2200      	movs	r2, #0
 80055e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	3301      	adds	r3, #1
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	2b0e      	cmp	r3, #14
 80055ec:	d9f2      	bls.n	80055d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d11c      	bne.n	800562e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005602:	f043 0302 	orr.w	r3, r3, #2
 8005606:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005618:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	639a      	str	r2, [r3, #56]	; 0x38
 800562c:	e00b      	b.n	8005646 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800564c:	461a      	mov	r2, r3
 800564e:	2300      	movs	r3, #0
 8005650:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005658:	4619      	mov	r1, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005660:	461a      	mov	r2, r3
 8005662:	680b      	ldr	r3, [r1, #0]
 8005664:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	2b01      	cmp	r3, #1
 800566a:	d10c      	bne.n	8005686 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800566c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566e:	2b00      	cmp	r3, #0
 8005670:	d104      	bne.n	800567c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005672:	2100      	movs	r1, #0
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f965 	bl	8005944 <USB_SetDevSpeed>
 800567a:	e008      	b.n	800568e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800567c:	2101      	movs	r1, #1
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f960 	bl	8005944 <USB_SetDevSpeed>
 8005684:	e003      	b.n	800568e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005686:	2103      	movs	r1, #3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f95b 	bl	8005944 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800568e:	2110      	movs	r1, #16
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f8f3 	bl	800587c <USB_FlushTxFifo>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f91f 	bl	80058e4 <USB_FlushRxFifo>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b6:	461a      	mov	r2, r3
 80056b8:	2300      	movs	r3, #0
 80056ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c2:	461a      	mov	r2, r3
 80056c4:	2300      	movs	r3, #0
 80056c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ce:	461a      	mov	r2, r3
 80056d0:	2300      	movs	r3, #0
 80056d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056d4:	2300      	movs	r3, #0
 80056d6:	613b      	str	r3, [r7, #16]
 80056d8:	e043      	b.n	8005762 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056f0:	d118      	bne.n	8005724 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005704:	461a      	mov	r2, r3
 8005706:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	e013      	b.n	8005736 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571a:	461a      	mov	r2, r3
 800571c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	e008      	b.n	8005736 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005730:	461a      	mov	r2, r3
 8005732:	2300      	movs	r3, #0
 8005734:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005742:	461a      	mov	r2, r3
 8005744:	2300      	movs	r3, #0
 8005746:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005754:	461a      	mov	r2, r3
 8005756:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800575a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	3301      	adds	r3, #1
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	429a      	cmp	r2, r3
 8005768:	d3b7      	bcc.n	80056da <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800576a:	2300      	movs	r3, #0
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	e043      	b.n	80057f8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005786:	d118      	bne.n	80057ba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10a      	bne.n	80057a4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579a:	461a      	mov	r2, r3
 800579c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	e013      	b.n	80057cc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b0:	461a      	mov	r2, r3
 80057b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	e008      	b.n	80057cc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c6:	461a      	mov	r2, r3
 80057c8:	2300      	movs	r3, #0
 80057ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d8:	461a      	mov	r2, r3
 80057da:	2300      	movs	r3, #0
 80057dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ea:	461a      	mov	r2, r3
 80057ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	3301      	adds	r3, #1
 80057f6:	613b      	str	r3, [r7, #16]
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d3b7      	bcc.n	8005770 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800580e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005812:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005820:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	2b00      	cmp	r3, #0
 8005826:	d105      	bne.n	8005834 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	f043 0210 	orr.w	r2, r3, #16
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	699a      	ldr	r2, [r3, #24]
 8005838:	4b0f      	ldr	r3, [pc, #60]	; (8005878 <USB_DevInit+0x2c4>)
 800583a:	4313      	orrs	r3, r2
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	f043 0208 	orr.w	r2, r3, #8
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005854:	2b01      	cmp	r3, #1
 8005856:	d107      	bne.n	8005868 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005860:	f043 0304 	orr.w	r3, r3, #4
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005868:	7dfb      	ldrb	r3, [r7, #23]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005874:	b004      	add	sp, #16
 8005876:	4770      	bx	lr
 8005878:	803c3800 	.word	0x803c3800

0800587c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3301      	adds	r3, #1
 800588e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4a13      	ldr	r2, [pc, #76]	; (80058e0 <USB_FlushTxFifo+0x64>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d901      	bls.n	800589c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e01b      	b.n	80058d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	daf2      	bge.n	800588a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	019b      	lsls	r3, r3, #6
 80058ac:	f043 0220 	orr.w	r2, r3, #32
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	3301      	adds	r3, #1
 80058b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4a08      	ldr	r2, [pc, #32]	; (80058e0 <USB_FlushTxFifo+0x64>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d901      	bls.n	80058c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e006      	b.n	80058d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b20      	cmp	r3, #32
 80058d0:	d0f0      	beq.n	80058b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	00030d40 	.word	0x00030d40

080058e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3301      	adds	r3, #1
 80058f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4a11      	ldr	r2, [pc, #68]	; (8005940 <USB_FlushRxFifo+0x5c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d901      	bls.n	8005902 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e018      	b.n	8005934 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	daf2      	bge.n	80058f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2210      	movs	r2, #16
 8005912:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	3301      	adds	r3, #1
 8005918:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4a08      	ldr	r2, [pc, #32]	; (8005940 <USB_FlushRxFifo+0x5c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d901      	bls.n	8005926 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e006      	b.n	8005934 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f003 0310 	and.w	r3, r3, #16
 800592e:	2b10      	cmp	r3, #16
 8005930:	d0f0      	beq.n	8005914 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	00030d40 	.word	0x00030d40

08005944 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	68f9      	ldr	r1, [r7, #12]
 8005960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005964:	4313      	orrs	r3, r2
 8005966:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005976:	b480      	push	{r7}
 8005978:	b087      	sub	sp, #28
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 0306 	and.w	r3, r3, #6
 800598e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d102      	bne.n	800599c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005996:	2300      	movs	r3, #0
 8005998:	75fb      	strb	r3, [r7, #23]
 800599a:	e00a      	b.n	80059b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d002      	beq.n	80059a8 <USB_GetDevSpeed+0x32>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b06      	cmp	r3, #6
 80059a6:	d102      	bne.n	80059ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059a8:	2302      	movs	r3, #2
 80059aa:	75fb      	strb	r3, [r7, #23]
 80059ac:	e001      	b.n	80059b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80059ae:	230f      	movs	r3, #15
 80059b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d13a      	bne.n	8005a52 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	f003 030f 	and.w	r3, r3, #15
 80059ec:	2101      	movs	r1, #1
 80059ee:	fa01 f303 	lsl.w	r3, r1, r3
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	68f9      	ldr	r1, [r7, #12]
 80059f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059fa:	4313      	orrs	r3, r2
 80059fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d155      	bne.n	8005ac0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	791b      	ldrb	r3, [r3, #4]
 8005a2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	059b      	lsls	r3, r3, #22
 8005a36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	0151      	lsls	r1, r2, #5
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	440a      	add	r2, r1
 8005a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	e036      	b.n	8005ac0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a58:	69da      	ldr	r2, [r3, #28]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	2101      	movs	r1, #1
 8005a64:	fa01 f303 	lsl.w	r3, r1, r3
 8005a68:	041b      	lsls	r3, r3, #16
 8005a6a:	68f9      	ldr	r1, [r7, #12]
 8005a6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a70:	4313      	orrs	r3, r2
 8005a72:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d11a      	bne.n	8005ac0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	791b      	ldrb	r3, [r3, #4]
 8005aa4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005aa6:	430b      	orrs	r3, r1
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	0151      	lsls	r1, r2, #5
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	440a      	add	r2, r1
 8005ab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005abe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
	...

08005ad0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d161      	bne.n	8005bb0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005afe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b02:	d11f      	bne.n	8005b44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	0151      	lsls	r1, r2, #5
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	440a      	add	r2, r1
 8005b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	0151      	lsls	r1, r2, #5
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	440a      	add	r2, r1
 8005b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	f003 030f 	and.w	r3, r3, #15
 8005b54:	2101      	movs	r1, #1
 8005b56:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	68f9      	ldr	r1, [r7, #12]
 8005b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b64:	4013      	ands	r3, r2
 8005b66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6e:	69da      	ldr	r2, [r3, #28]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	f003 030f 	and.w	r3, r3, #15
 8005b78:	2101      	movs	r1, #1
 8005b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	43db      	mvns	r3, r3
 8005b82:	68f9      	ldr	r1, [r7, #12]
 8005b84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b88:	4013      	ands	r3, r2
 8005b8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	0159      	lsls	r1, r3, #5
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	440b      	add	r3, r1
 8005ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	4b35      	ldr	r3, [pc, #212]	; (8005c80 <USB_DeactivateEndpoint+0x1b0>)
 8005baa:	4013      	ands	r3, r2
 8005bac:	600b      	str	r3, [r1, #0]
 8005bae:	e060      	b.n	8005c72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bc6:	d11f      	bne.n	8005c08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005be6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	0151      	lsls	r1, r2, #5
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	440a      	add	r2, r1
 8005bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	f003 030f 	and.w	r3, r3, #15
 8005c18:	2101      	movs	r1, #1
 8005c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1e:	041b      	lsls	r3, r3, #16
 8005c20:	43db      	mvns	r3, r3
 8005c22:	68f9      	ldr	r1, [r7, #12]
 8005c24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c28:	4013      	ands	r3, r2
 8005c2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c32:	69da      	ldr	r2, [r3, #28]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	f003 030f 	and.w	r3, r3, #15
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c42:	041b      	lsls	r3, r3, #16
 8005c44:	43db      	mvns	r3, r3
 8005c46:	68f9      	ldr	r1, [r7, #12]
 8005c48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	0159      	lsls	r1, r3, #5
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	440b      	add	r3, r1
 8005c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <USB_DeactivateEndpoint+0x1b4>)
 8005c6e:	4013      	ands	r3, r2
 8005c70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	ec337800 	.word	0xec337800
 8005c84:	eff37800 	.word	0xeff37800

08005c88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08a      	sub	sp, #40	; 0x28
 8005c8c:	af02      	add	r7, sp, #8
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	4613      	mov	r3, r2
 8005c94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	785b      	ldrb	r3, [r3, #1]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	f040 815c 	bne.w	8005f62 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d132      	bne.n	8005d18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	0151      	lsls	r1, r2, #5
 8005cc4:	69fa      	ldr	r2, [r7, #28]
 8005cc6:	440a      	add	r2, r1
 8005cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ccc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	0151      	lsls	r1, r2, #5
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	440a      	add	r2, r1
 8005d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d10:	0cdb      	lsrs	r3, r3, #19
 8005d12:	04db      	lsls	r3, r3, #19
 8005d14:	6113      	str	r3, [r2, #16]
 8005d16:	e074      	b.n	8005e02 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	69fa      	ldr	r2, [r7, #28]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d32:	0cdb      	lsrs	r3, r3, #19
 8005d34:	04db      	lsls	r3, r3, #19
 8005d36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	0151      	lsls	r1, r2, #5
 8005d4a:	69fa      	ldr	r2, [r7, #28]
 8005d4c:	440a      	add	r2, r1
 8005d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d68:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	6999      	ldr	r1, [r3, #24]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	440b      	add	r3, r1
 8005d74:	1e59      	subs	r1, r3, #1
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d7e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d80:	4b9d      	ldr	r3, [pc, #628]	; (8005ff8 <USB_EPStartXfer+0x370>)
 8005d82:	400b      	ands	r3, r1
 8005d84:	69b9      	ldr	r1, [r7, #24]
 8005d86:	0148      	lsls	r0, r1, #5
 8005d88:	69f9      	ldr	r1, [r7, #28]
 8005d8a:	4401      	add	r1, r0
 8005d8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d90:	4313      	orrs	r3, r2
 8005d92:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da0:	691a      	ldr	r2, [r3, #16]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005daa:	69b9      	ldr	r1, [r7, #24]
 8005dac:	0148      	lsls	r0, r1, #5
 8005dae:	69f9      	ldr	r1, [r7, #28]
 8005db0:	4401      	add	r1, r0
 8005db2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005db6:	4313      	orrs	r3, r2
 8005db8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	791b      	ldrb	r3, [r3, #4]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d11f      	bne.n	8005e02 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	0151      	lsls	r1, r2, #5
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ddc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005de0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e00:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d14b      	bne.n	8005ea0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d009      	beq.n	8005e24 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	791b      	ldrb	r3, [r3, #4]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d128      	bne.n	8005e7e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d110      	bne.n	8005e5e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	0151      	lsls	r1, r2, #5
 8005e4e:	69fa      	ldr	r2, [r7, #28]
 8005e50:	440a      	add	r2, r1
 8005e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e5a:	6013      	str	r3, [r2, #0]
 8005e5c:	e00f      	b.n	8005e7e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	0151      	lsls	r1, r2, #5
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	440a      	add	r2, r1
 8005e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	0151      	lsls	r1, r2, #5
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	440a      	add	r2, r1
 8005e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	e133      	b.n	8006108 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	0151      	lsls	r1, r2, #5
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	440a      	add	r2, r1
 8005eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ebe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	791b      	ldrb	r3, [r3, #4]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d015      	beq.n	8005ef4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 811b 	beq.w	8006108 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	f003 030f 	and.w	r3, r3, #15
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee8:	69f9      	ldr	r1, [r7, #28]
 8005eea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	634b      	str	r3, [r1, #52]	; 0x34
 8005ef2:	e109      	b.n	8006108 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d110      	bne.n	8005f26 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	e00f      	b.n	8005f46 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	0151      	lsls	r1, r2, #5
 8005f38:	69fa      	ldr	r2, [r7, #28]
 8005f3a:	440a      	add	r2, r1
 8005f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f44:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	6919      	ldr	r1, [r3, #16]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	781a      	ldrb	r2, [r3, #0]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	b298      	uxth	r0, r3
 8005f54:	79fb      	ldrb	r3, [r7, #7]
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	4603      	mov	r3, r0
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 fade 	bl	800651c <USB_WritePacket>
 8005f60:	e0d2      	b.n	8006108 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	0151      	lsls	r1, r2, #5
 8005f74:	69fa      	ldr	r2, [r7, #28]
 8005f76:	440a      	add	r2, r1
 8005f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f7c:	0cdb      	lsrs	r3, r3, #19
 8005f7e:	04db      	lsls	r3, r3, #19
 8005f80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	0151      	lsls	r1, r2, #5
 8005f94:	69fa      	ldr	r2, [r7, #28]
 8005f96:	440a      	add	r2, r1
 8005f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fa0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fa4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d126      	bne.n	8005ffc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fba:	691a      	ldr	r2, [r3, #16]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc4:	69b9      	ldr	r1, [r7, #24]
 8005fc6:	0148      	lsls	r0, r1, #5
 8005fc8:	69f9      	ldr	r1, [r7, #28]
 8005fca:	4401      	add	r1, r0
 8005fcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	0151      	lsls	r1, r2, #5
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	440a      	add	r2, r1
 8005fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ff2:	6113      	str	r3, [r2, #16]
 8005ff4:	e03a      	b.n	800606c <USB_EPStartXfer+0x3e4>
 8005ff6:	bf00      	nop
 8005ff8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	699a      	ldr	r2, [r3, #24]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	4413      	add	r3, r2
 8006006:	1e5a      	subs	r2, r3, #1
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006010:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	8afa      	ldrh	r2, [r7, #22]
 8006018:	fb03 f202 	mul.w	r2, r3, r2
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602c:	691a      	ldr	r2, [r3, #16]
 800602e:	8afb      	ldrh	r3, [r7, #22]
 8006030:	04d9      	lsls	r1, r3, #19
 8006032:	4b38      	ldr	r3, [pc, #224]	; (8006114 <USB_EPStartXfer+0x48c>)
 8006034:	400b      	ands	r3, r1
 8006036:	69b9      	ldr	r1, [r7, #24]
 8006038:	0148      	lsls	r0, r1, #5
 800603a:	69f9      	ldr	r1, [r7, #28]
 800603c:	4401      	add	r1, r0
 800603e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006042:	4313      	orrs	r3, r2
 8006044:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800605c:	69b9      	ldr	r1, [r7, #24]
 800605e:	0148      	lsls	r0, r1, #5
 8006060:	69f9      	ldr	r1, [r7, #28]
 8006062:	4401      	add	r1, r0
 8006064:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006068:	4313      	orrs	r3, r2
 800606a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800606c:	79fb      	ldrb	r3, [r7, #7]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d10d      	bne.n	800608e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	6919      	ldr	r1, [r3, #16]
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608a:	460a      	mov	r2, r1
 800608c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	791b      	ldrb	r3, [r3, #4]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d128      	bne.n	80060e8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d110      	bne.n	80060c8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	0151      	lsls	r1, r2, #5
 80060b8:	69fa      	ldr	r2, [r7, #28]
 80060ba:	440a      	add	r2, r1
 80060bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	e00f      	b.n	80060e8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	0151      	lsls	r1, r2, #5
 80060da:	69fa      	ldr	r2, [r7, #28]
 80060dc:	440a      	add	r2, r1
 80060de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	0151      	lsls	r1, r2, #5
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	440a      	add	r2, r1
 80060fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006102:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006106:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3720      	adds	r7, #32
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	1ff80000 	.word	0x1ff80000

08006118 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	4613      	mov	r3, r2
 8006124:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	785b      	ldrb	r3, [r3, #1]
 8006134:	2b01      	cmp	r3, #1
 8006136:	f040 80ce 	bne.w	80062d6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d132      	bne.n	80061a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	0151      	lsls	r1, r2, #5
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	440a      	add	r2, r1
 8006158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006160:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006164:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	440a      	add	r2, r1
 800617c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006180:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006184:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	0151      	lsls	r1, r2, #5
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	440a      	add	r2, r1
 800619c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a0:	0cdb      	lsrs	r3, r3, #19
 80061a2:	04db      	lsls	r3, r3, #19
 80061a4:	6113      	str	r3, [r2, #16]
 80061a6:	e04e      	b.n	8006246 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c2:	0cdb      	lsrs	r3, r3, #19
 80061c4:	04db      	lsls	r3, r3, #19
 80061c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	0151      	lsls	r1, r2, #5
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	440a      	add	r2, r1
 80061de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	699a      	ldr	r2, [r3, #24]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d903      	bls.n	8006200 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	0151      	lsls	r1, r2, #5
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	440a      	add	r2, r1
 8006216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800621e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622c:	691a      	ldr	r2, [r3, #16]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006236:	6939      	ldr	r1, [r7, #16]
 8006238:	0148      	lsls	r0, r1, #5
 800623a:	6979      	ldr	r1, [r7, #20]
 800623c:	4401      	add	r1, r0
 800623e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006242:	4313      	orrs	r3, r2
 8006244:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006246:	79fb      	ldrb	r3, [r7, #7]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d11e      	bne.n	800628a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d009      	beq.n	8006268 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006260:	461a      	mov	r2, r3
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	4413      	add	r3, r2
 8006270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	0151      	lsls	r1, r2, #5
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	440a      	add	r2, r1
 800627e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006282:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	e097      	b.n	80063ba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	0151      	lsls	r1, r2, #5
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	440a      	add	r2, r1
 80062a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 8083 	beq.w	80063ba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	2101      	movs	r1, #1
 80062c6:	fa01 f303 	lsl.w	r3, r1, r3
 80062ca:	6979      	ldr	r1, [r7, #20]
 80062cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062d0:	4313      	orrs	r3, r2
 80062d2:	634b      	str	r3, [r1, #52]	; 0x34
 80062d4:	e071      	b.n	80063ba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	0151      	lsls	r1, r2, #5
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	440a      	add	r2, r1
 80062ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f0:	0cdb      	lsrs	r3, r3, #19
 80062f2:	04db      	lsls	r3, r3, #19
 80062f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	0151      	lsls	r1, r2, #5
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	440a      	add	r2, r1
 800630c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006310:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006314:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006318:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	0151      	lsls	r1, r2, #5
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	440a      	add	r2, r1
 8006348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800634c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006350:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006368:	6939      	ldr	r1, [r7, #16]
 800636a:	0148      	lsls	r0, r1, #5
 800636c:	6979      	ldr	r1, [r7, #20]
 800636e:	4401      	add	r1, r0
 8006370:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006374:	4313      	orrs	r3, r2
 8006376:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006378:	79fb      	ldrb	r3, [r7, #7]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d10d      	bne.n	800639a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d009      	beq.n	800639a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	6919      	ldr	r1, [r3, #16]
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006396:	460a      	mov	r2, r1
 8006398:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	0151      	lsls	r1, r2, #5
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	440a      	add	r2, r1
 80063b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	785b      	ldrb	r3, [r3, #1]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d14a      	bne.n	800647c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063fe:	f040 8086 	bne.w	800650e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	7812      	ldrb	r2, [r2, #0]
 8006416:	0151      	lsls	r1, r2, #5
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	440a      	add	r2, r1
 800641c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006420:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006424:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	7812      	ldrb	r2, [r2, #0]
 800643a:	0151      	lsls	r1, r2, #5
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	440a      	add	r2, r1
 8006440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006444:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006448:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	3301      	adds	r3, #1
 800644e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f242 7210 	movw	r2, #10000	; 0x2710
 8006456:	4293      	cmp	r3, r2
 8006458:	d902      	bls.n	8006460 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	75fb      	strb	r3, [r7, #23]
          break;
 800645e:	e056      	b.n	800650e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006474:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006478:	d0e7      	beq.n	800644a <USB_EPStopXfer+0x82>
 800647a:	e048      	b.n	800650e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006490:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006494:	d13b      	bne.n	800650e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	7812      	ldrb	r2, [r2, #0]
 80064aa:	0151      	lsls	r1, r2, #5
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	440a      	add	r2, r1
 80064b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	7812      	ldrb	r2, [r2, #0]
 80064ce:	0151      	lsls	r1, r2, #5
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	440a      	add	r2, r1
 80064d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3301      	adds	r3, #1
 80064e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d902      	bls.n	80064f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	75fb      	strb	r3, [r7, #23]
          break;
 80064f2:	e00c      	b.n	800650e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006508:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800650c:	d0e7      	beq.n	80064de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800650e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006510:	4618      	mov	r0, r3
 8006512:	371c      	adds	r7, #28
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800651c:	b480      	push	{r7}
 800651e:	b089      	sub	sp, #36	; 0x24
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	4611      	mov	r1, r2
 8006528:	461a      	mov	r2, r3
 800652a:	460b      	mov	r3, r1
 800652c:	71fb      	strb	r3, [r7, #7]
 800652e:	4613      	mov	r3, r2
 8006530:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800653a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800653e:	2b00      	cmp	r3, #0
 8006540:	d123      	bne.n	800658a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006542:	88bb      	ldrh	r3, [r7, #4]
 8006544:	3303      	adds	r3, #3
 8006546:	089b      	lsrs	r3, r3, #2
 8006548:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800654a:	2300      	movs	r3, #0
 800654c:	61bb      	str	r3, [r7, #24]
 800654e:	e018      	b.n	8006582 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	031a      	lsls	r2, r3, #12
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	4413      	add	r3, r2
 8006558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800655c:	461a      	mov	r2, r3
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	3301      	adds	r3, #1
 8006568:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	3301      	adds	r3, #1
 800656e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	3301      	adds	r3, #1
 8006574:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	3301      	adds	r3, #1
 800657a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	3301      	adds	r3, #1
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	429a      	cmp	r2, r3
 8006588:	d3e2      	bcc.n	8006550 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3724      	adds	r7, #36	; 0x24
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006598:	b480      	push	{r7}
 800659a:	b08b      	sub	sp, #44	; 0x2c
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	4613      	mov	r3, r2
 80065a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80065ae:	88fb      	ldrh	r3, [r7, #6]
 80065b0:	089b      	lsrs	r3, r3, #2
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80065b6:	88fb      	ldrh	r3, [r7, #6]
 80065b8:	f003 0303 	and.w	r3, r3, #3
 80065bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80065be:	2300      	movs	r3, #0
 80065c0:	623b      	str	r3, [r7, #32]
 80065c2:	e014      	b.n	80065ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	3301      	adds	r3, #1
 80065d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	3301      	adds	r3, #1
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	3301      	adds	r3, #1
 80065e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	3301      	adds	r3, #1
 80065e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	3301      	adds	r3, #1
 80065ec:	623b      	str	r3, [r7, #32]
 80065ee:	6a3a      	ldr	r2, [r7, #32]
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d3e6      	bcc.n	80065c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80065f6:	8bfb      	ldrh	r3, [r7, #30]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01e      	beq.n	800663a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80065fc:	2300      	movs	r3, #0
 80065fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006606:	461a      	mov	r2, r3
 8006608:	f107 0310 	add.w	r3, r7, #16
 800660c:	6812      	ldr	r2, [r2, #0]
 800660e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	fa22 f303 	lsr.w	r3, r2, r3
 800661c:	b2da      	uxtb	r2, r3
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	701a      	strb	r2, [r3, #0]
      i++;
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	3301      	adds	r3, #1
 8006626:	623b      	str	r3, [r7, #32]
      pDest++;
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	3301      	adds	r3, #1
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800662e:	8bfb      	ldrh	r3, [r7, #30]
 8006630:	3b01      	subs	r3, #1
 8006632:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006634:	8bfb      	ldrh	r3, [r7, #30]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1ea      	bne.n	8006610 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800663c:	4618      	mov	r0, r3
 800663e:	372c      	adds	r7, #44	; 0x2c
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	785b      	ldrb	r3, [r3, #1]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d12c      	bne.n	80066be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	db12      	blt.n	800669c <USB_EPSetStall+0x54>
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00f      	beq.n	800669c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	0151      	lsls	r1, r2, #5
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	440a      	add	r2, r1
 8006692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006696:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800669a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	0151      	lsls	r1, r2, #5
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	440a      	add	r2, r1
 80066b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	e02b      	b.n	8006716 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	db12      	blt.n	80066f6 <USB_EPSetStall+0xae>
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00f      	beq.n	80066f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	0151      	lsls	r1, r2, #5
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	440a      	add	r2, r1
 80066ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	0151      	lsls	r1, r2, #5
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	440a      	add	r2, r1
 800670c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006710:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006714:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	785b      	ldrb	r3, [r3, #1]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d128      	bne.n	8006792 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	0151      	lsls	r1, r2, #5
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	440a      	add	r2, r1
 8006756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800675a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800675e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	791b      	ldrb	r3, [r3, #4]
 8006764:	2b03      	cmp	r3, #3
 8006766:	d003      	beq.n	8006770 <USB_EPClearStall+0x4c>
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	791b      	ldrb	r3, [r3, #4]
 800676c:	2b02      	cmp	r3, #2
 800676e:	d138      	bne.n	80067e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	0151      	lsls	r1, r2, #5
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	440a      	add	r2, r1
 8006786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800678a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	e027      	b.n	80067e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	791b      	ldrb	r3, [r3, #4]
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d003      	beq.n	80067c2 <USB_EPClearStall+0x9e>
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	791b      	ldrb	r3, [r3, #4]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d10f      	bne.n	80067e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800680e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006812:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	78fb      	ldrb	r3, [r7, #3]
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006824:	68f9      	ldr	r1, [r7, #12]
 8006826:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800682a:	4313      	orrs	r3, r2
 800682c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006856:	f023 0303 	bic.w	r3, r3, #3
 800685a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800686a:	f023 0302 	bic.w	r3, r3, #2
 800686e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800687e:	b480      	push	{r7}
 8006880:	b085      	sub	sp, #20
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006898:	f023 0303 	bic.w	r3, r3, #3
 800689c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ac:	f043 0302 	orr.w	r3, r3, #2
 80068b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	4013      	ands	r3, r2
 80068d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068d8:	68fb      	ldr	r3, [r7, #12]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b085      	sub	sp, #20
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	4013      	ands	r3, r2
 8006908:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	0c1b      	lsrs	r3, r3, #16
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800691a:	b480      	push	{r7}
 800691c:	b085      	sub	sp, #20
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	4013      	ands	r3, r2
 800693c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	b29b      	uxth	r3, r3
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800694e:	b480      	push	{r7}
 8006950:	b085      	sub	sp, #20
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	460b      	mov	r3, r1
 8006958:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	4013      	ands	r3, r2
 800697a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800697c:	68bb      	ldr	r3, [r7, #8]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800698a:	b480      	push	{r7}
 800698c:	b087      	sub	sp, #28
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	460b      	mov	r3, r1
 8006994:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80069ae:	78fb      	ldrb	r3, [r7, #3]
 80069b0:	f003 030f 	and.w	r3, r3, #15
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ba:	01db      	lsls	r3, r3, #7
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4013      	ands	r3, r2
 80069d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069d8:	68bb      	ldr	r3, [r7, #8]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	371c      	adds	r7, #28
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	f003 0301 	and.w	r3, r3, #1
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b085      	sub	sp, #20
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a1c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a20:	f023 0307 	bic.w	r3, r3, #7
 8006a24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	460b      	mov	r3, r1
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	333c      	adds	r3, #60	; 0x3c
 8006a5e:	3304      	adds	r3, #4
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	4a26      	ldr	r2, [pc, #152]	; (8006b00 <USB_EP0_OutStart+0xb8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d90a      	bls.n	8006a82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a7c:	d101      	bne.n	8006a82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	e037      	b.n	8006af2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a88:	461a      	mov	r2, r3
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006aa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab0:	f043 0318 	orr.w	r3, r3, #24
 8006ab4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ac4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ac8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006aca:	7afb      	ldrb	r3, [r7, #11]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d10f      	bne.n	8006af0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006aee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	371c      	adds	r7, #28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	4f54300a 	.word	0x4f54300a

08006b04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	3301      	adds	r3, #1
 8006b14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4a13      	ldr	r2, [pc, #76]	; (8006b68 <USB_CoreReset+0x64>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d901      	bls.n	8006b22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e01b      	b.n	8006b5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	daf2      	bge.n	8006b10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f043 0201 	orr.w	r2, r3, #1
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4a09      	ldr	r2, [pc, #36]	; (8006b68 <USB_CoreReset+0x64>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d901      	bls.n	8006b4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e006      	b.n	8006b5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d0f0      	beq.n	8006b3a <USB_CoreReset+0x36>

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	00030d40 	.word	0x00030d40

08006b6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b7c:	f002 fc32 	bl	80093e4 <USBD_static_malloc>
 8006b80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d109      	bne.n	8006b9c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	32b0      	adds	r2, #176	; 0xb0
 8006b92:	2100      	movs	r1, #0
 8006b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e0d4      	b.n	8006d46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006b9c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f002 fc9e 	bl	80094e4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	32b0      	adds	r2, #176	; 0xb0
 8006bb2:	68f9      	ldr	r1, [r7, #12]
 8006bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	32b0      	adds	r2, #176	; 0xb0
 8006bc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	7c1b      	ldrb	r3, [r3, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d138      	bne.n	8006c46 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006bd4:	4b5e      	ldr	r3, [pc, #376]	; (8006d50 <USBD_CDC_Init+0x1e4>)
 8006bd6:	7819      	ldrb	r1, [r3, #0]
 8006bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bdc:	2202      	movs	r2, #2
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f002 fadd 	bl	800919e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006be4:	4b5a      	ldr	r3, [pc, #360]	; (8006d50 <USBD_CDC_Init+0x1e4>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	f003 020f 	and.w	r2, r3, #15
 8006bec:	6879      	ldr	r1, [r7, #4]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	440b      	add	r3, r1
 8006bf8:	3324      	adds	r3, #36	; 0x24
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006bfe:	4b55      	ldr	r3, [pc, #340]	; (8006d54 <USBD_CDC_Init+0x1e8>)
 8006c00:	7819      	ldrb	r1, [r3, #0]
 8006c02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c06:	2202      	movs	r2, #2
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f002 fac8 	bl	800919e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c0e:	4b51      	ldr	r3, [pc, #324]	; (8006d54 <USBD_CDC_Init+0x1e8>)
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	f003 020f 	and.w	r2, r3, #15
 8006c16:	6879      	ldr	r1, [r7, #4]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	440b      	add	r3, r1
 8006c22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c26:	2201      	movs	r2, #1
 8006c28:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c2a:	4b4b      	ldr	r3, [pc, #300]	; (8006d58 <USBD_CDC_Init+0x1ec>)
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	f003 020f 	and.w	r2, r3, #15
 8006c32:	6879      	ldr	r1, [r7, #4]
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	440b      	add	r3, r1
 8006c3e:	3326      	adds	r3, #38	; 0x26
 8006c40:	2210      	movs	r2, #16
 8006c42:	801a      	strh	r2, [r3, #0]
 8006c44:	e035      	b.n	8006cb2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c46:	4b42      	ldr	r3, [pc, #264]	; (8006d50 <USBD_CDC_Init+0x1e4>)
 8006c48:	7819      	ldrb	r1, [r3, #0]
 8006c4a:	2340      	movs	r3, #64	; 0x40
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f002 faa5 	bl	800919e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c54:	4b3e      	ldr	r3, [pc, #248]	; (8006d50 <USBD_CDC_Init+0x1e4>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	f003 020f 	and.w	r2, r3, #15
 8006c5c:	6879      	ldr	r1, [r7, #4]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	440b      	add	r3, r1
 8006c68:	3324      	adds	r3, #36	; 0x24
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c6e:	4b39      	ldr	r3, [pc, #228]	; (8006d54 <USBD_CDC_Init+0x1e8>)
 8006c70:	7819      	ldrb	r1, [r3, #0]
 8006c72:	2340      	movs	r3, #64	; 0x40
 8006c74:	2202      	movs	r2, #2
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f002 fa91 	bl	800919e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c7c:	4b35      	ldr	r3, [pc, #212]	; (8006d54 <USBD_CDC_Init+0x1e8>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	f003 020f 	and.w	r2, r3, #15
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	440b      	add	r3, r1
 8006c90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c94:	2201      	movs	r2, #1
 8006c96:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c98:	4b2f      	ldr	r3, [pc, #188]	; (8006d58 <USBD_CDC_Init+0x1ec>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	f003 020f 	and.w	r2, r3, #15
 8006ca0:	6879      	ldr	r1, [r7, #4]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	440b      	add	r3, r1
 8006cac:	3326      	adds	r3, #38	; 0x26
 8006cae:	2210      	movs	r2, #16
 8006cb0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006cb2:	4b29      	ldr	r3, [pc, #164]	; (8006d58 <USBD_CDC_Init+0x1ec>)
 8006cb4:	7819      	ldrb	r1, [r3, #0]
 8006cb6:	2308      	movs	r3, #8
 8006cb8:	2203      	movs	r2, #3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f002 fa6f 	bl	800919e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006cc0:	4b25      	ldr	r3, [pc, #148]	; (8006d58 <USBD_CDC_Init+0x1ec>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	f003 020f 	and.w	r2, r3, #15
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	440b      	add	r3, r1
 8006cd4:	3324      	adds	r3, #36	; 0x24
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	33b0      	adds	r3, #176	; 0xb0
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006d10:	2302      	movs	r3, #2
 8006d12:	e018      	b.n	8006d46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	7c1b      	ldrb	r3, [r3, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10a      	bne.n	8006d32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d1c:	4b0d      	ldr	r3, [pc, #52]	; (8006d54 <USBD_CDC_Init+0x1e8>)
 8006d1e:	7819      	ldrb	r1, [r3, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f002 fb26 	bl	800937c <USBD_LL_PrepareReceive>
 8006d30:	e008      	b.n	8006d44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d32:	4b08      	ldr	r3, [pc, #32]	; (8006d54 <USBD_CDC_Init+0x1e8>)
 8006d34:	7819      	ldrb	r1, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d3c:	2340      	movs	r3, #64	; 0x40
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f002 fb1c 	bl	800937c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000093 	.word	0x20000093
 8006d54:	20000094 	.word	0x20000094
 8006d58:	20000095 	.word	0x20000095

08006d5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	460b      	mov	r3, r1
 8006d66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006d68:	4b3a      	ldr	r3, [pc, #232]	; (8006e54 <USBD_CDC_DeInit+0xf8>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f002 fa3b 	bl	80091ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006d74:	4b37      	ldr	r3, [pc, #220]	; (8006e54 <USBD_CDC_DeInit+0xf8>)
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	f003 020f 	and.w	r2, r3, #15
 8006d7c:	6879      	ldr	r1, [r7, #4]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	440b      	add	r3, r1
 8006d88:	3324      	adds	r3, #36	; 0x24
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006d8e:	4b32      	ldr	r3, [pc, #200]	; (8006e58 <USBD_CDC_DeInit+0xfc>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f002 fa28 	bl	80091ea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006d9a:	4b2f      	ldr	r3, [pc, #188]	; (8006e58 <USBD_CDC_DeInit+0xfc>)
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	f003 020f 	and.w	r2, r3, #15
 8006da2:	6879      	ldr	r1, [r7, #4]
 8006da4:	4613      	mov	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	440b      	add	r3, r1
 8006dae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006db2:	2200      	movs	r2, #0
 8006db4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006db6:	4b29      	ldr	r3, [pc, #164]	; (8006e5c <USBD_CDC_DeInit+0x100>)
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f002 fa14 	bl	80091ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006dc2:	4b26      	ldr	r3, [pc, #152]	; (8006e5c <USBD_CDC_DeInit+0x100>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	f003 020f 	and.w	r2, r3, #15
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	440b      	add	r3, r1
 8006dd6:	3324      	adds	r3, #36	; 0x24
 8006dd8:	2200      	movs	r2, #0
 8006dda:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006ddc:	4b1f      	ldr	r3, [pc, #124]	; (8006e5c <USBD_CDC_DeInit+0x100>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	f003 020f 	and.w	r2, r3, #15
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	4613      	mov	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	440b      	add	r3, r1
 8006df0:	3326      	adds	r3, #38	; 0x26
 8006df2:	2200      	movs	r2, #0
 8006df4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	32b0      	adds	r2, #176	; 0xb0
 8006e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d01f      	beq.n	8006e48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	33b0      	adds	r3, #176	; 0xb0
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	32b0      	adds	r2, #176	; 0xb0
 8006e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f002 fae8 	bl	8009400 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	32b0      	adds	r2, #176	; 0xb0
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20000093 	.word	0x20000093
 8006e58:	20000094 	.word	0x20000094
 8006e5c:	20000095 	.word	0x20000095

08006e60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	32b0      	adds	r2, #176	; 0xb0
 8006e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e0bf      	b.n	8007010 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d050      	beq.n	8006f3e <USBD_CDC_Setup+0xde>
 8006e9c:	2b20      	cmp	r3, #32
 8006e9e:	f040 80af 	bne.w	8007000 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	88db      	ldrh	r3, [r3, #6]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d03a      	beq.n	8006f20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	b25b      	sxtb	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	da1b      	bge.n	8006eec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	33b0      	adds	r3, #176	; 0xb0
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006eca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	88d2      	ldrh	r2, [r2, #6]
 8006ed0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	88db      	ldrh	r3, [r3, #6]
 8006ed6:	2b07      	cmp	r3, #7
 8006ed8:	bf28      	it	cs
 8006eda:	2307      	movcs	r3, #7
 8006edc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	89fa      	ldrh	r2, [r7, #14]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f001 fd43 	bl	8008970 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006eea:	e090      	b.n	800700e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	785a      	ldrb	r2, [r3, #1]
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	88db      	ldrh	r3, [r3, #6]
 8006efa:	2b3f      	cmp	r3, #63	; 0x3f
 8006efc:	d803      	bhi.n	8006f06 <USBD_CDC_Setup+0xa6>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	88db      	ldrh	r3, [r3, #6]
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	e000      	b.n	8006f08 <USBD_CDC_Setup+0xa8>
 8006f06:	2240      	movs	r2, #64	; 0x40
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006f0e:	6939      	ldr	r1, [r7, #16]
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006f16:	461a      	mov	r2, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f001 fd55 	bl	80089c8 <USBD_CtlPrepareRx>
      break;
 8006f1e:	e076      	b.n	800700e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	33b0      	adds	r3, #176	; 0xb0
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	7850      	ldrb	r0, [r2, #1]
 8006f36:	2200      	movs	r2, #0
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	4798      	blx	r3
      break;
 8006f3c:	e067      	b.n	800700e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	785b      	ldrb	r3, [r3, #1]
 8006f42:	2b0b      	cmp	r3, #11
 8006f44:	d851      	bhi.n	8006fea <USBD_CDC_Setup+0x18a>
 8006f46:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <USBD_CDC_Setup+0xec>)
 8006f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4c:	08006f7d 	.word	0x08006f7d
 8006f50:	08006ff9 	.word	0x08006ff9
 8006f54:	08006feb 	.word	0x08006feb
 8006f58:	08006feb 	.word	0x08006feb
 8006f5c:	08006feb 	.word	0x08006feb
 8006f60:	08006feb 	.word	0x08006feb
 8006f64:	08006feb 	.word	0x08006feb
 8006f68:	08006feb 	.word	0x08006feb
 8006f6c:	08006feb 	.word	0x08006feb
 8006f70:	08006feb 	.word	0x08006feb
 8006f74:	08006fa7 	.word	0x08006fa7
 8006f78:	08006fd1 	.word	0x08006fd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d107      	bne.n	8006f98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f88:	f107 030a 	add.w	r3, r7, #10
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 fced 	bl	8008970 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f96:	e032      	b.n	8006ffe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 fc77 	bl	800888e <USBD_CtlError>
            ret = USBD_FAIL;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	75fb      	strb	r3, [r7, #23]
          break;
 8006fa4:	e02b      	b.n	8006ffe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d107      	bne.n	8006fc2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006fb2:	f107 030d 	add.w	r3, r7, #13
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f001 fcd8 	bl	8008970 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fc0:	e01d      	b.n	8006ffe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f001 fc62 	bl	800888e <USBD_CtlError>
            ret = USBD_FAIL;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	75fb      	strb	r3, [r7, #23]
          break;
 8006fce:	e016      	b.n	8006ffe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b03      	cmp	r3, #3
 8006fda:	d00f      	beq.n	8006ffc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f001 fc55 	bl	800888e <USBD_CtlError>
            ret = USBD_FAIL;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006fe8:	e008      	b.n	8006ffc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f001 fc4e 	bl	800888e <USBD_CtlError>
          ret = USBD_FAIL;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ff6:	e002      	b.n	8006ffe <USBD_CDC_Setup+0x19e>
          break;
 8006ff8:	bf00      	nop
 8006ffa:	e008      	b.n	800700e <USBD_CDC_Setup+0x1ae>
          break;
 8006ffc:	bf00      	nop
      }
      break;
 8006ffe:	e006      	b.n	800700e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f001 fc43 	bl	800888e <USBD_CtlError>
      ret = USBD_FAIL;
 8007008:	2303      	movs	r3, #3
 800700a:	75fb      	strb	r3, [r7, #23]
      break;
 800700c:	bf00      	nop
  }

  return (uint8_t)ret;
 800700e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	460b      	mov	r3, r1
 8007022:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800702a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	32b0      	adds	r2, #176	; 0xb0
 8007036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800703e:	2303      	movs	r3, #3
 8007040:	e065      	b.n	800710e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	32b0      	adds	r2, #176	; 0xb0
 800704c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007050:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007052:	78fb      	ldrb	r3, [r7, #3]
 8007054:	f003 020f 	and.w	r2, r3, #15
 8007058:	6879      	ldr	r1, [r7, #4]
 800705a:	4613      	mov	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	440b      	add	r3, r1
 8007064:	3318      	adds	r3, #24
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d02f      	beq.n	80070cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800706c:	78fb      	ldrb	r3, [r7, #3]
 800706e:	f003 020f 	and.w	r2, r3, #15
 8007072:	6879      	ldr	r1, [r7, #4]
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	440b      	add	r3, r1
 800707e:	3318      	adds	r3, #24
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	78fb      	ldrb	r3, [r7, #3]
 8007084:	f003 010f 	and.w	r1, r3, #15
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	460b      	mov	r3, r1
 800708c:	00db      	lsls	r3, r3, #3
 800708e:	440b      	add	r3, r1
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4403      	add	r3, r0
 8007094:	3348      	adds	r3, #72	; 0x48
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	fbb2 f1f3 	udiv	r1, r2, r3
 800709c:	fb01 f303 	mul.w	r3, r1, r3
 80070a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d112      	bne.n	80070cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80070a6:	78fb      	ldrb	r3, [r7, #3]
 80070a8:	f003 020f 	and.w	r2, r3, #15
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	4613      	mov	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	440b      	add	r3, r1
 80070b8:	3318      	adds	r3, #24
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070be:	78f9      	ldrb	r1, [r7, #3]
 80070c0:	2300      	movs	r3, #0
 80070c2:	2200      	movs	r2, #0
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f002 f938 	bl	800933a <USBD_LL_Transmit>
 80070ca:	e01f      	b.n	800710c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	33b0      	adds	r3, #176	; 0xb0
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d010      	beq.n	800710c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	33b0      	adds	r3, #176	; 0xb0
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007108:	78fa      	ldrb	r2, [r7, #3]
 800710a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b084      	sub	sp, #16
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	460b      	mov	r3, r1
 8007120:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	32b0      	adds	r2, #176	; 0xb0
 800712c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007130:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	32b0      	adds	r2, #176	; 0xb0
 800713c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007144:	2303      	movs	r3, #3
 8007146:	e01a      	b.n	800717e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f002 f936 	bl	80093be <USBD_LL_GetRxDataSize>
 8007152:	4602      	mov	r2, r0
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	33b0      	adds	r3, #176	; 0xb0
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007178:	4611      	mov	r1, r2
 800717a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	32b0      	adds	r2, #176	; 0xb0
 8007198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e025      	b.n	80071f4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	33b0      	adds	r3, #176	; 0xb0
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d01a      	beq.n	80071f2 <USBD_CDC_EP0_RxReady+0x6c>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80071c2:	2bff      	cmp	r3, #255	; 0xff
 80071c4:	d015      	beq.n	80071f2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	33b0      	adds	r3, #176	; 0xb0
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80071de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80071e6:	b292      	uxth	r2, r2
 80071e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	22ff      	movs	r2, #255	; 0xff
 80071ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007204:	2182      	movs	r1, #130	; 0x82
 8007206:	4818      	ldr	r0, [pc, #96]	; (8007268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007208:	f000 fd09 	bl	8007c1e <USBD_GetEpDesc>
 800720c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800720e:	2101      	movs	r1, #1
 8007210:	4815      	ldr	r0, [pc, #84]	; (8007268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007212:	f000 fd04 	bl	8007c1e <USBD_GetEpDesc>
 8007216:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007218:	2181      	movs	r1, #129	; 0x81
 800721a:	4813      	ldr	r0, [pc, #76]	; (8007268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800721c:	f000 fcff 	bl	8007c1e <USBD_GetEpDesc>
 8007220:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2210      	movs	r2, #16
 800722c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d006      	beq.n	8007242 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	2200      	movs	r2, #0
 8007238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800723c:	711a      	strb	r2, [r3, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d006      	beq.n	8007256 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007250:	711a      	strb	r2, [r3, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2243      	movs	r2, #67	; 0x43
 800725a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800725c:	4b02      	ldr	r3, [pc, #8]	; (8007268 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800725e:	4618      	mov	r0, r3
 8007260:	3718      	adds	r7, #24
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	20000050 	.word	0x20000050

0800726c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007274:	2182      	movs	r1, #130	; 0x82
 8007276:	4818      	ldr	r0, [pc, #96]	; (80072d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007278:	f000 fcd1 	bl	8007c1e <USBD_GetEpDesc>
 800727c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800727e:	2101      	movs	r1, #1
 8007280:	4815      	ldr	r0, [pc, #84]	; (80072d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007282:	f000 fccc 	bl	8007c1e <USBD_GetEpDesc>
 8007286:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007288:	2181      	movs	r1, #129	; 0x81
 800728a:	4813      	ldr	r0, [pc, #76]	; (80072d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800728c:	f000 fcc7 	bl	8007c1e <USBD_GetEpDesc>
 8007290:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2210      	movs	r2, #16
 800729c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d006      	beq.n	80072b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	2200      	movs	r2, #0
 80072a8:	711a      	strb	r2, [r3, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f042 0202 	orr.w	r2, r2, #2
 80072b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d006      	beq.n	80072c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	711a      	strb	r2, [r3, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f042 0202 	orr.w	r2, r2, #2
 80072c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2243      	movs	r2, #67	; 0x43
 80072ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072cc:	4b02      	ldr	r3, [pc, #8]	; (80072d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3718      	adds	r7, #24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20000050 	.word	0x20000050

080072dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072e4:	2182      	movs	r1, #130	; 0x82
 80072e6:	4818      	ldr	r0, [pc, #96]	; (8007348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072e8:	f000 fc99 	bl	8007c1e <USBD_GetEpDesc>
 80072ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072ee:	2101      	movs	r1, #1
 80072f0:	4815      	ldr	r0, [pc, #84]	; (8007348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072f2:	f000 fc94 	bl	8007c1e <USBD_GetEpDesc>
 80072f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072f8:	2181      	movs	r1, #129	; 0x81
 80072fa:	4813      	ldr	r0, [pc, #76]	; (8007348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072fc:	f000 fc8f 	bl	8007c1e <USBD_GetEpDesc>
 8007300:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d002      	beq.n	800730e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2210      	movs	r2, #16
 800730c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d006      	beq.n	8007322 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	2200      	movs	r2, #0
 8007318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800731c:	711a      	strb	r2, [r3, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d006      	beq.n	8007336 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007330:	711a      	strb	r2, [r3, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2243      	movs	r2, #67	; 0x43
 800733a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800733c:	4b02      	ldr	r3, [pc, #8]	; (8007348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800733e:	4618      	mov	r0, r3
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20000050 	.word	0x20000050

0800734c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	220a      	movs	r2, #10
 8007358:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800735a:	4b03      	ldr	r3, [pc, #12]	; (8007368 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	2000000c 	.word	0x2000000c

0800736c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800737c:	2303      	movs	r3, #3
 800737e:	e009      	b.n	8007394 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	33b0      	adds	r3, #176	; 0xb0
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	32b0      	adds	r2, #176	; 0xb0
 80073b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e008      	b.n	80073d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	371c      	adds	r7, #28
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	32b0      	adds	r2, #176	; 0xb0
 80073f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007404:	2303      	movs	r3, #3
 8007406:	e004      	b.n	8007412 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
	...

08007420 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	32b0      	adds	r2, #176	; 0xb0
 8007432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007436:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	32b0      	adds	r2, #176	; 0xb0
 8007442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800744a:	2303      	movs	r3, #3
 800744c:	e018      	b.n	8007480 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	7c1b      	ldrb	r3, [r3, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10a      	bne.n	800746c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007456:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <USBD_CDC_ReceivePacket+0x68>)
 8007458:	7819      	ldrb	r1, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007460:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f001 ff89 	bl	800937c <USBD_LL_PrepareReceive>
 800746a:	e008      	b.n	800747e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800746c:	4b06      	ldr	r3, [pc, #24]	; (8007488 <USBD_CDC_ReceivePacket+0x68>)
 800746e:	7819      	ldrb	r1, [r3, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007476:	2340      	movs	r3, #64	; 0x40
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f001 ff7f 	bl	800937c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	20000094 	.word	0x20000094

0800748c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	4613      	mov	r3, r2
 8007498:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e01f      	b.n	80074e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	79fa      	ldrb	r2, [r7, #7]
 80074d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f001 fdf9 	bl	80090d0 <USBD_LL_Init>
 80074de:	4603      	mov	r3, r0
 80074e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80074e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007500:	2303      	movs	r3, #3
 8007502:	e025      	b.n	8007550 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	683a      	ldr	r2, [r7, #0]
 8007508:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	32ae      	adds	r2, #174	; 0xae
 8007516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00f      	beq.n	8007540 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	32ae      	adds	r2, #174	; 0xae
 800752a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007530:	f107 020e 	add.w	r2, r7, #14
 8007534:	4610      	mov	r0, r2
 8007536:	4798      	blx	r3
 8007538:	4602      	mov	r2, r0
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 fe01 	bl	8009168 <USBD_LL_Start>
 8007566:	4603      	mov	r3, r0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007578:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800757a:	4618      	mov	r0, r3
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	460b      	mov	r3, r1
 8007590:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759c:	2b00      	cmp	r3, #0
 800759e:	d009      	beq.n	80075b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	78fa      	ldrb	r2, [r7, #3]
 80075aa:	4611      	mov	r1, r2
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	4798      	blx	r3
 80075b0:	4603      	mov	r3, r0
 80075b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	460b      	mov	r3, r1
 80075c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	78fa      	ldrb	r2, [r7, #3]
 80075d8:	4611      	mov	r1, r2
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	4798      	blx	r3
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80075e4:	2303      	movs	r3, #3
 80075e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b084      	sub	sp, #16
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	4618      	mov	r0, r3
 8007606:	f001 f908 	bl	800881a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007618:	461a      	mov	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007626:	f003 031f 	and.w	r3, r3, #31
 800762a:	2b02      	cmp	r3, #2
 800762c:	d01a      	beq.n	8007664 <USBD_LL_SetupStage+0x72>
 800762e:	2b02      	cmp	r3, #2
 8007630:	d822      	bhi.n	8007678 <USBD_LL_SetupStage+0x86>
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <USBD_LL_SetupStage+0x4a>
 8007636:	2b01      	cmp	r3, #1
 8007638:	d00a      	beq.n	8007650 <USBD_LL_SetupStage+0x5e>
 800763a:	e01d      	b.n	8007678 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fb5f 	bl	8007d08 <USBD_StdDevReq>
 800764a:	4603      	mov	r3, r0
 800764c:	73fb      	strb	r3, [r7, #15]
      break;
 800764e:	e020      	b.n	8007692 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fbc7 	bl	8007dec <USBD_StdItfReq>
 800765e:	4603      	mov	r3, r0
 8007660:	73fb      	strb	r3, [r7, #15]
      break;
 8007662:	e016      	b.n	8007692 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fc29 	bl	8007ec4 <USBD_StdEPReq>
 8007672:	4603      	mov	r3, r0
 8007674:	73fb      	strb	r3, [r7, #15]
      break;
 8007676:	e00c      	b.n	8007692 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800767e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007682:	b2db      	uxtb	r3, r3
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f001 fdce 	bl	8009228 <USBD_LL_StallEP>
 800768c:	4603      	mov	r3, r0
 800768e:	73fb      	strb	r3, [r7, #15]
      break;
 8007690:	bf00      	nop
  }

  return ret;
 8007692:	7bfb      	ldrb	r3, [r7, #15]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	460b      	mov	r3, r1
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80076ae:	7afb      	ldrb	r3, [r7, #11]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d16e      	bne.n	8007792 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80076ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	f040 8098 	bne.w	80077f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d913      	bls.n	80076fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	689a      	ldr	r2, [r3, #8]
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	1ad2      	subs	r2, r2, r3
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	68da      	ldr	r2, [r3, #12]
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	4293      	cmp	r3, r2
 80076ec:	bf28      	it	cs
 80076ee:	4613      	movcs	r3, r2
 80076f0:	461a      	mov	r2, r3
 80076f2:	6879      	ldr	r1, [r7, #4]
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f001 f984 	bl	8008a02 <USBD_CtlContinueRx>
 80076fa:	e07d      	b.n	80077f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007702:	f003 031f 	and.w	r3, r3, #31
 8007706:	2b02      	cmp	r3, #2
 8007708:	d014      	beq.n	8007734 <USBD_LL_DataOutStage+0x98>
 800770a:	2b02      	cmp	r3, #2
 800770c:	d81d      	bhi.n	800774a <USBD_LL_DataOutStage+0xae>
 800770e:	2b00      	cmp	r3, #0
 8007710:	d002      	beq.n	8007718 <USBD_LL_DataOutStage+0x7c>
 8007712:	2b01      	cmp	r3, #1
 8007714:	d003      	beq.n	800771e <USBD_LL_DataOutStage+0x82>
 8007716:	e018      	b.n	800774a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	75bb      	strb	r3, [r7, #22]
            break;
 800771c:	e018      	b.n	8007750 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007724:	b2db      	uxtb	r3, r3
 8007726:	4619      	mov	r1, r3
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fa5e 	bl	8007bea <USBD_CoreFindIF>
 800772e:	4603      	mov	r3, r0
 8007730:	75bb      	strb	r3, [r7, #22]
            break;
 8007732:	e00d      	b.n	8007750 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800773a:	b2db      	uxtb	r3, r3
 800773c:	4619      	mov	r1, r3
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 fa60 	bl	8007c04 <USBD_CoreFindEP>
 8007744:	4603      	mov	r3, r0
 8007746:	75bb      	strb	r3, [r7, #22]
            break;
 8007748:	e002      	b.n	8007750 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	75bb      	strb	r3, [r7, #22]
            break;
 800774e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007750:	7dbb      	ldrb	r3, [r7, #22]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d119      	bne.n	800778a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b03      	cmp	r3, #3
 8007760:	d113      	bne.n	800778a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007762:	7dba      	ldrb	r2, [r7, #22]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	32ae      	adds	r2, #174	; 0xae
 8007768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00b      	beq.n	800778a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007772:	7dba      	ldrb	r2, [r7, #22]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800777a:	7dba      	ldrb	r2, [r7, #22]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	32ae      	adds	r2, #174	; 0xae
 8007780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f001 f94a 	bl	8008a24 <USBD_CtlSendStatus>
 8007790:	e032      	b.n	80077f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007792:	7afb      	ldrb	r3, [r7, #11]
 8007794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007798:	b2db      	uxtb	r3, r3
 800779a:	4619      	mov	r1, r3
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 fa31 	bl	8007c04 <USBD_CoreFindEP>
 80077a2:	4603      	mov	r3, r0
 80077a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077a6:	7dbb      	ldrb	r3, [r7, #22]
 80077a8:	2bff      	cmp	r3, #255	; 0xff
 80077aa:	d025      	beq.n	80077f8 <USBD_LL_DataOutStage+0x15c>
 80077ac:	7dbb      	ldrb	r3, [r7, #22]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d122      	bne.n	80077f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d117      	bne.n	80077ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80077be:	7dba      	ldrb	r2, [r7, #22]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	32ae      	adds	r2, #174	; 0xae
 80077c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00f      	beq.n	80077ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80077ce:	7dba      	ldrb	r2, [r7, #22]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80077d6:	7dba      	ldrb	r2, [r7, #22]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	32ae      	adds	r2, #174	; 0xae
 80077dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	7afa      	ldrb	r2, [r7, #11]
 80077e4:	4611      	mov	r1, r2
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	4798      	blx	r3
 80077ea:	4603      	mov	r3, r0
 80077ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80077ee:	7dfb      	ldrb	r3, [r7, #23]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d001      	beq.n	80077f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80077f4:	7dfb      	ldrb	r3, [r7, #23]
 80077f6:	e000      	b.n	80077fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b086      	sub	sp, #24
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	460b      	mov	r3, r1
 800780c:	607a      	str	r2, [r7, #4]
 800780e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007810:	7afb      	ldrb	r3, [r7, #11]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d16f      	bne.n	80078f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3314      	adds	r3, #20
 800781a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007822:	2b02      	cmp	r3, #2
 8007824:	d15a      	bne.n	80078dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	689a      	ldr	r2, [r3, #8]
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	429a      	cmp	r2, r3
 8007830:	d914      	bls.n	800785c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	1ad2      	subs	r2, r2, r3
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	461a      	mov	r2, r3
 8007846:	6879      	ldr	r1, [r7, #4]
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f001 f8ac 	bl	80089a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800784e:	2300      	movs	r3, #0
 8007850:	2200      	movs	r2, #0
 8007852:	2100      	movs	r1, #0
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f001 fd91 	bl	800937c <USBD_LL_PrepareReceive>
 800785a:	e03f      	b.n	80078dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	68da      	ldr	r2, [r3, #12]
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	429a      	cmp	r2, r3
 8007866:	d11c      	bne.n	80078a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	685a      	ldr	r2, [r3, #4]
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007870:	429a      	cmp	r2, r3
 8007872:	d316      	bcc.n	80078a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800787e:	429a      	cmp	r2, r3
 8007880:	d20f      	bcs.n	80078a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007882:	2200      	movs	r2, #0
 8007884:	2100      	movs	r1, #0
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f001 f88d 	bl	80089a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007894:	2300      	movs	r3, #0
 8007896:	2200      	movs	r2, #0
 8007898:	2100      	movs	r1, #0
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f001 fd6e 	bl	800937c <USBD_LL_PrepareReceive>
 80078a0:	e01c      	b.n	80078dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d10f      	bne.n	80078ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d009      	beq.n	80078ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078ce:	2180      	movs	r1, #128	; 0x80
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f001 fca9 	bl	8009228 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f001 f8b7 	bl	8008a4a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d03a      	beq.n	800795c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f7ff fe42 	bl	8007570 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80078f4:	e032      	b.n	800795c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80078f6:	7afb      	ldrb	r3, [r7, #11]
 80078f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	4619      	mov	r1, r3
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 f97f 	bl	8007c04 <USBD_CoreFindEP>
 8007906:	4603      	mov	r3, r0
 8007908:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800790a:	7dfb      	ldrb	r3, [r7, #23]
 800790c:	2bff      	cmp	r3, #255	; 0xff
 800790e:	d025      	beq.n	800795c <USBD_LL_DataInStage+0x15a>
 8007910:	7dfb      	ldrb	r3, [r7, #23]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d122      	bne.n	800795c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b03      	cmp	r3, #3
 8007920:	d11c      	bne.n	800795c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007922:	7dfa      	ldrb	r2, [r7, #23]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	32ae      	adds	r2, #174	; 0xae
 8007928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d014      	beq.n	800795c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007932:	7dfa      	ldrb	r2, [r7, #23]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800793a:	7dfa      	ldrb	r2, [r7, #23]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	32ae      	adds	r2, #174	; 0xae
 8007940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	7afa      	ldrb	r2, [r7, #11]
 8007948:	4611      	mov	r1, r2
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	4798      	blx	r3
 800794e:	4603      	mov	r3, r0
 8007950:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007952:	7dbb      	ldrb	r3, [r7, #22]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007958:	7dbb      	ldrb	r3, [r7, #22]
 800795a:	e000      	b.n	800795e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3718      	adds	r7, #24
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d014      	beq.n	80079cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00e      	beq.n	80079cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	6852      	ldr	r2, [r2, #4]
 80079ba:	b2d2      	uxtb	r2, r2
 80079bc:	4611      	mov	r1, r2
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	4798      	blx	r3
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80079c8:	2303      	movs	r3, #3
 80079ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079cc:	2340      	movs	r3, #64	; 0x40
 80079ce:	2200      	movs	r2, #0
 80079d0:	2100      	movs	r1, #0
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 fbe3 	bl	800919e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2240      	movs	r2, #64	; 0x40
 80079e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079e8:	2340      	movs	r3, #64	; 0x40
 80079ea:	2200      	movs	r2, #0
 80079ec:	2180      	movs	r1, #128	; 0x80
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f001 fbd5 	bl	800919e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2240      	movs	r2, #64	; 0x40
 80079fe:	621a      	str	r2, [r3, #32]

  return ret;
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	460b      	mov	r3, r1
 8007a14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	78fa      	ldrb	r2, [r7, #3]
 8007a1a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2204      	movs	r2, #4
 8007a44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b04      	cmp	r3, #4
 8007a68:	d106      	bne.n	8007a78 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b082      	sub	sp, #8
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d110      	bne.n	8007abc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00b      	beq.n	8007abc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d005      	beq.n	8007abc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	460b      	mov	r3, r1
 8007ad0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	32ae      	adds	r2, #174	; 0xae
 8007adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e01c      	b.n	8007b22 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d115      	bne.n	8007b20 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	32ae      	adds	r2, #174	; 0xae
 8007afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00b      	beq.n	8007b20 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	32ae      	adds	r2, #174	; 0xae
 8007b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	78fa      	ldrb	r2, [r7, #3]
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	32ae      	adds	r2, #174	; 0xae
 8007b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e01c      	b.n	8007b86 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	d115      	bne.n	8007b84 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	32ae      	adds	r2, #174	; 0xae
 8007b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00b      	beq.n	8007b84 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	32ae      	adds	r2, #174	; 0xae
 8007b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	78fa      	ldrb	r2, [r7, #3]
 8007b7e:	4611      	mov	r1, r2
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b083      	sub	sp, #12
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00e      	beq.n	8007be0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	6852      	ldr	r2, [r2, #4]
 8007bce:	b2d2      	uxtb	r2, r2
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	4798      	blx	r3
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bf6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b086      	sub	sp, #24
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	460b      	mov	r3, r1
 8007c28:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007c32:	2300      	movs	r3, #0
 8007c34:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	885b      	ldrh	r3, [r3, #2]
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d920      	bls.n	8007c88 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c4e:	e013      	b.n	8007c78 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c50:	f107 030a 	add.w	r3, r7, #10
 8007c54:	4619      	mov	r1, r3
 8007c56:	6978      	ldr	r0, [r7, #20]
 8007c58:	f000 f81b 	bl	8007c92 <USBD_GetNextDesc>
 8007c5c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	785b      	ldrb	r3, [r3, #1]
 8007c62:	2b05      	cmp	r3, #5
 8007c64:	d108      	bne.n	8007c78 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	789b      	ldrb	r3, [r3, #2]
 8007c6e:	78fa      	ldrb	r2, [r7, #3]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d008      	beq.n	8007c86 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c74:	2300      	movs	r3, #0
 8007c76:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	885b      	ldrh	r3, [r3, #2]
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	897b      	ldrh	r3, [r7, #10]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d8e5      	bhi.n	8007c50 <USBD_GetEpDesc+0x32>
 8007c84:	e000      	b.n	8007c88 <USBD_GetEpDesc+0x6a>
          break;
 8007c86:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c88:	693b      	ldr	r3, [r7, #16]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b085      	sub	sp, #20
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	881a      	ldrh	r2, [r3, #0]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	4413      	add	r3, r2
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4413      	add	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007cea:	8a3b      	ldrh	r3, [r7, #16]
 8007cec:	021b      	lsls	r3, r3, #8
 8007cee:	b21a      	sxth	r2, r3
 8007cf0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	b21b      	sxth	r3, r3
 8007cf8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007cfa:	89fb      	ldrh	r3, [r7, #14]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	371c      	adds	r7, #28
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d1e:	2b40      	cmp	r3, #64	; 0x40
 8007d20:	d005      	beq.n	8007d2e <USBD_StdDevReq+0x26>
 8007d22:	2b40      	cmp	r3, #64	; 0x40
 8007d24:	d857      	bhi.n	8007dd6 <USBD_StdDevReq+0xce>
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00f      	beq.n	8007d4a <USBD_StdDevReq+0x42>
 8007d2a:	2b20      	cmp	r3, #32
 8007d2c:	d153      	bne.n	8007dd6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	32ae      	adds	r2, #174	; 0xae
 8007d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	4798      	blx	r3
 8007d44:	4603      	mov	r3, r0
 8007d46:	73fb      	strb	r3, [r7, #15]
      break;
 8007d48:	e04a      	b.n	8007de0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	785b      	ldrb	r3, [r3, #1]
 8007d4e:	2b09      	cmp	r3, #9
 8007d50:	d83b      	bhi.n	8007dca <USBD_StdDevReq+0xc2>
 8007d52:	a201      	add	r2, pc, #4	; (adr r2, 8007d58 <USBD_StdDevReq+0x50>)
 8007d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d58:	08007dad 	.word	0x08007dad
 8007d5c:	08007dc1 	.word	0x08007dc1
 8007d60:	08007dcb 	.word	0x08007dcb
 8007d64:	08007db7 	.word	0x08007db7
 8007d68:	08007dcb 	.word	0x08007dcb
 8007d6c:	08007d8b 	.word	0x08007d8b
 8007d70:	08007d81 	.word	0x08007d81
 8007d74:	08007dcb 	.word	0x08007dcb
 8007d78:	08007da3 	.word	0x08007da3
 8007d7c:	08007d95 	.word	0x08007d95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fa3c 	bl	8008200 <USBD_GetDescriptor>
          break;
 8007d88:	e024      	b.n	8007dd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fba1 	bl	80084d4 <USBD_SetAddress>
          break;
 8007d92:	e01f      	b.n	8007dd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fbe0 	bl	800855c <USBD_SetConfig>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	73fb      	strb	r3, [r7, #15]
          break;
 8007da0:	e018      	b.n	8007dd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fc83 	bl	80086b0 <USBD_GetConfig>
          break;
 8007daa:	e013      	b.n	8007dd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fcb4 	bl	800871c <USBD_GetStatus>
          break;
 8007db4:	e00e      	b.n	8007dd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fce3 	bl	8008784 <USBD_SetFeature>
          break;
 8007dbe:	e009      	b.n	8007dd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fd07 	bl	80087d6 <USBD_ClrFeature>
          break;
 8007dc8:	e004      	b.n	8007dd4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fd5e 	bl	800888e <USBD_CtlError>
          break;
 8007dd2:	bf00      	nop
      }
      break;
 8007dd4:	e004      	b.n	8007de0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fd58 	bl	800888e <USBD_CtlError>
      break;
 8007dde:	bf00      	nop
  }

  return ret;
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop

08007dec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e02:	2b40      	cmp	r3, #64	; 0x40
 8007e04:	d005      	beq.n	8007e12 <USBD_StdItfReq+0x26>
 8007e06:	2b40      	cmp	r3, #64	; 0x40
 8007e08:	d852      	bhi.n	8007eb0 <USBD_StdItfReq+0xc4>
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <USBD_StdItfReq+0x26>
 8007e0e:	2b20      	cmp	r3, #32
 8007e10:	d14e      	bne.n	8007eb0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d840      	bhi.n	8007ea2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	889b      	ldrh	r3, [r3, #4]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d836      	bhi.n	8007e98 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	889b      	ldrh	r3, [r3, #4]
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7ff fed9 	bl	8007bea <USBD_CoreFindIF>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	2bff      	cmp	r3, #255	; 0xff
 8007e40:	d01d      	beq.n	8007e7e <USBD_StdItfReq+0x92>
 8007e42:	7bbb      	ldrb	r3, [r7, #14]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d11a      	bne.n	8007e7e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e48:	7bba      	ldrb	r2, [r7, #14]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	32ae      	adds	r2, #174	; 0xae
 8007e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00f      	beq.n	8007e78 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e58:	7bba      	ldrb	r2, [r7, #14]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e60:	7bba      	ldrb	r2, [r7, #14]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	32ae      	adds	r2, #174	; 0xae
 8007e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	4798      	blx	r3
 8007e72:	4603      	mov	r3, r0
 8007e74:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e76:	e004      	b.n	8007e82 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e7c:	e001      	b.n	8007e82 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	88db      	ldrh	r3, [r3, #6]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d110      	bne.n	8007eac <USBD_StdItfReq+0xc0>
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10d      	bne.n	8007eac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fdc7 	bl	8008a24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e96:	e009      	b.n	8007eac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fcf7 	bl	800888e <USBD_CtlError>
          break;
 8007ea0:	e004      	b.n	8007eac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fcf2 	bl	800888e <USBD_CtlError>
          break;
 8007eaa:	e000      	b.n	8007eae <USBD_StdItfReq+0xc2>
          break;
 8007eac:	bf00      	nop
      }
      break;
 8007eae:	e004      	b.n	8007eba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fceb 	bl	800888e <USBD_CtlError>
      break;
 8007eb8:	bf00      	nop
  }

  return ret;
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	889b      	ldrh	r3, [r3, #4]
 8007ed6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ee0:	2b40      	cmp	r3, #64	; 0x40
 8007ee2:	d007      	beq.n	8007ef4 <USBD_StdEPReq+0x30>
 8007ee4:	2b40      	cmp	r3, #64	; 0x40
 8007ee6:	f200 817f 	bhi.w	80081e8 <USBD_StdEPReq+0x324>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d02a      	beq.n	8007f44 <USBD_StdEPReq+0x80>
 8007eee:	2b20      	cmp	r3, #32
 8007ef0:	f040 817a 	bne.w	80081e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff fe83 	bl	8007c04 <USBD_CoreFindEP>
 8007efe:	4603      	mov	r3, r0
 8007f00:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f02:	7b7b      	ldrb	r3, [r7, #13]
 8007f04:	2bff      	cmp	r3, #255	; 0xff
 8007f06:	f000 8174 	beq.w	80081f2 <USBD_StdEPReq+0x32e>
 8007f0a:	7b7b      	ldrb	r3, [r7, #13]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f040 8170 	bne.w	80081f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007f12:	7b7a      	ldrb	r2, [r7, #13]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007f1a:	7b7a      	ldrb	r2, [r7, #13]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	32ae      	adds	r2, #174	; 0xae
 8007f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 8163 	beq.w	80081f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007f2c:	7b7a      	ldrb	r2, [r7, #13]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	32ae      	adds	r2, #174	; 0xae
 8007f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	4798      	blx	r3
 8007f3e:	4603      	mov	r3, r0
 8007f40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f42:	e156      	b.n	80081f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	785b      	ldrb	r3, [r3, #1]
 8007f48:	2b03      	cmp	r3, #3
 8007f4a:	d008      	beq.n	8007f5e <USBD_StdEPReq+0x9a>
 8007f4c:	2b03      	cmp	r3, #3
 8007f4e:	f300 8145 	bgt.w	80081dc <USBD_StdEPReq+0x318>
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 809b 	beq.w	800808e <USBD_StdEPReq+0x1ca>
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d03c      	beq.n	8007fd6 <USBD_StdEPReq+0x112>
 8007f5c:	e13e      	b.n	80081dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d002      	beq.n	8007f70 <USBD_StdEPReq+0xac>
 8007f6a:	2b03      	cmp	r3, #3
 8007f6c:	d016      	beq.n	8007f9c <USBD_StdEPReq+0xd8>
 8007f6e:	e02c      	b.n	8007fca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00d      	beq.n	8007f92 <USBD_StdEPReq+0xce>
 8007f76:	7bbb      	ldrb	r3, [r7, #14]
 8007f78:	2b80      	cmp	r3, #128	; 0x80
 8007f7a:	d00a      	beq.n	8007f92 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f001 f951 	bl	8009228 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f86:	2180      	movs	r1, #128	; 0x80
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f001 f94d 	bl	8009228 <USBD_LL_StallEP>
 8007f8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f90:	e020      	b.n	8007fd4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007f92:	6839      	ldr	r1, [r7, #0]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fc7a 	bl	800888e <USBD_CtlError>
              break;
 8007f9a:	e01b      	b.n	8007fd4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	885b      	ldrh	r3, [r3, #2]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10e      	bne.n	8007fc2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00b      	beq.n	8007fc2 <USBD_StdEPReq+0xfe>
 8007faa:	7bbb      	ldrb	r3, [r7, #14]
 8007fac:	2b80      	cmp	r3, #128	; 0x80
 8007fae:	d008      	beq.n	8007fc2 <USBD_StdEPReq+0xfe>
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	88db      	ldrh	r3, [r3, #6]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d104      	bne.n	8007fc2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f001 f933 	bl	8009228 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fd2e 	bl	8008a24 <USBD_CtlSendStatus>

              break;
 8007fc8:	e004      	b.n	8007fd4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fc5e 	bl	800888e <USBD_CtlError>
              break;
 8007fd2:	bf00      	nop
          }
          break;
 8007fd4:	e107      	b.n	80081e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d002      	beq.n	8007fe8 <USBD_StdEPReq+0x124>
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d016      	beq.n	8008014 <USBD_StdEPReq+0x150>
 8007fe6:	e04b      	b.n	8008080 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fe8:	7bbb      	ldrb	r3, [r7, #14]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00d      	beq.n	800800a <USBD_StdEPReq+0x146>
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
 8007ff0:	2b80      	cmp	r3, #128	; 0x80
 8007ff2:	d00a      	beq.n	800800a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 f915 	bl	8009228 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ffe:	2180      	movs	r1, #128	; 0x80
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f001 f911 	bl	8009228 <USBD_LL_StallEP>
 8008006:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008008:	e040      	b.n	800808c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fc3e 	bl	800888e <USBD_CtlError>
              break;
 8008012:	e03b      	b.n	800808c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	885b      	ldrh	r3, [r3, #2]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d136      	bne.n	800808a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008022:	2b00      	cmp	r3, #0
 8008024:	d004      	beq.n	8008030 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008026:	7bbb      	ldrb	r3, [r7, #14]
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f001 f91b 	bl	8009266 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fcf7 	bl	8008a24 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff fde2 	bl	8007c04 <USBD_CoreFindEP>
 8008040:	4603      	mov	r3, r0
 8008042:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008044:	7b7b      	ldrb	r3, [r7, #13]
 8008046:	2bff      	cmp	r3, #255	; 0xff
 8008048:	d01f      	beq.n	800808a <USBD_StdEPReq+0x1c6>
 800804a:	7b7b      	ldrb	r3, [r7, #13]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d11c      	bne.n	800808a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008050:	7b7a      	ldrb	r2, [r7, #13]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008058:	7b7a      	ldrb	r2, [r7, #13]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	32ae      	adds	r2, #174	; 0xae
 800805e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d010      	beq.n	800808a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008068:	7b7a      	ldrb	r2, [r7, #13]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	32ae      	adds	r2, #174	; 0xae
 800806e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	4798      	blx	r3
 800807a:	4603      	mov	r3, r0
 800807c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800807e:	e004      	b.n	800808a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fc03 	bl	800888e <USBD_CtlError>
              break;
 8008088:	e000      	b.n	800808c <USBD_StdEPReq+0x1c8>
              break;
 800808a:	bf00      	nop
          }
          break;
 800808c:	e0ab      	b.n	80081e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b02      	cmp	r3, #2
 8008098:	d002      	beq.n	80080a0 <USBD_StdEPReq+0x1dc>
 800809a:	2b03      	cmp	r3, #3
 800809c:	d032      	beq.n	8008104 <USBD_StdEPReq+0x240>
 800809e:	e097      	b.n	80081d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d007      	beq.n	80080b6 <USBD_StdEPReq+0x1f2>
 80080a6:	7bbb      	ldrb	r3, [r7, #14]
 80080a8:	2b80      	cmp	r3, #128	; 0x80
 80080aa:	d004      	beq.n	80080b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fbed 	bl	800888e <USBD_CtlError>
                break;
 80080b4:	e091      	b.n	80081da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	da0b      	bge.n	80080d6 <USBD_StdEPReq+0x212>
 80080be:	7bbb      	ldrb	r3, [r7, #14]
 80080c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080c4:	4613      	mov	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	3310      	adds	r3, #16
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	4413      	add	r3, r2
 80080d2:	3304      	adds	r3, #4
 80080d4:	e00b      	b.n	80080ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
 80080d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080dc:	4613      	mov	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	4413      	add	r3, r2
 80080ec:	3304      	adds	r3, #4
 80080ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	2202      	movs	r2, #2
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fc37 	bl	8008970 <USBD_CtlSendData>
              break;
 8008102:	e06a      	b.n	80081da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008104:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008108:	2b00      	cmp	r3, #0
 800810a:	da11      	bge.n	8008130 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800810c:	7bbb      	ldrb	r3, [r7, #14]
 800810e:	f003 020f 	and.w	r2, r3, #15
 8008112:	6879      	ldr	r1, [r7, #4]
 8008114:	4613      	mov	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	440b      	add	r3, r1
 800811e:	3324      	adds	r3, #36	; 0x24
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d117      	bne.n	8008156 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fbb0 	bl	800888e <USBD_CtlError>
                  break;
 800812e:	e054      	b.n	80081da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008130:	7bbb      	ldrb	r3, [r7, #14]
 8008132:	f003 020f 	and.w	r2, r3, #15
 8008136:	6879      	ldr	r1, [r7, #4]
 8008138:	4613      	mov	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	440b      	add	r3, r1
 8008142:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d104      	bne.n	8008156 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fb9d 	bl	800888e <USBD_CtlError>
                  break;
 8008154:	e041      	b.n	80081da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008156:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800815a:	2b00      	cmp	r3, #0
 800815c:	da0b      	bge.n	8008176 <USBD_StdEPReq+0x2b2>
 800815e:	7bbb      	ldrb	r3, [r7, #14]
 8008160:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008164:	4613      	mov	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	3310      	adds	r3, #16
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	4413      	add	r3, r2
 8008172:	3304      	adds	r3, #4
 8008174:	e00b      	b.n	800818e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008176:	7bbb      	ldrb	r3, [r7, #14]
 8008178:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800817c:	4613      	mov	r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	4413      	add	r3, r2
 800818c:	3304      	adds	r3, #4
 800818e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008190:	7bbb      	ldrb	r3, [r7, #14]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d002      	beq.n	800819c <USBD_StdEPReq+0x2d8>
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	2b80      	cmp	r3, #128	; 0x80
 800819a:	d103      	bne.n	80081a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2200      	movs	r2, #0
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	e00e      	b.n	80081c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80081a4:	7bbb      	ldrb	r3, [r7, #14]
 80081a6:	4619      	mov	r1, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f001 f87b 	bl	80092a4 <USBD_LL_IsStallEP>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2201      	movs	r2, #1
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	e002      	b.n	80081c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2200      	movs	r2, #0
 80081c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	2202      	movs	r2, #2
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fbd1 	bl	8008970 <USBD_CtlSendData>
              break;
 80081ce:	e004      	b.n	80081da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fb5b 	bl	800888e <USBD_CtlError>
              break;
 80081d8:	bf00      	nop
          }
          break;
 80081da:	e004      	b.n	80081e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fb55 	bl	800888e <USBD_CtlError>
          break;
 80081e4:	bf00      	nop
      }
      break;
 80081e6:	e005      	b.n	80081f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fb4f 	bl	800888e <USBD_CtlError>
      break;
 80081f0:	e000      	b.n	80081f4 <USBD_StdEPReq+0x330>
      break;
 80081f2:	bf00      	nop
  }

  return ret;
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800820a:	2300      	movs	r3, #0
 800820c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800820e:	2300      	movs	r3, #0
 8008210:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	885b      	ldrh	r3, [r3, #2]
 800821a:	0a1b      	lsrs	r3, r3, #8
 800821c:	b29b      	uxth	r3, r3
 800821e:	3b01      	subs	r3, #1
 8008220:	2b06      	cmp	r3, #6
 8008222:	f200 8128 	bhi.w	8008476 <USBD_GetDescriptor+0x276>
 8008226:	a201      	add	r2, pc, #4	; (adr r2, 800822c <USBD_GetDescriptor+0x2c>)
 8008228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822c:	08008249 	.word	0x08008249
 8008230:	08008261 	.word	0x08008261
 8008234:	080082a1 	.word	0x080082a1
 8008238:	08008477 	.word	0x08008477
 800823c:	08008477 	.word	0x08008477
 8008240:	08008417 	.word	0x08008417
 8008244:	08008443 	.word	0x08008443
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	7c12      	ldrb	r2, [r2, #16]
 8008254:	f107 0108 	add.w	r1, r7, #8
 8008258:	4610      	mov	r0, r2
 800825a:	4798      	blx	r3
 800825c:	60f8      	str	r0, [r7, #12]
      break;
 800825e:	e112      	b.n	8008486 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	7c1b      	ldrb	r3, [r3, #16]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10d      	bne.n	8008284 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800826e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008270:	f107 0208 	add.w	r2, r7, #8
 8008274:	4610      	mov	r0, r2
 8008276:	4798      	blx	r3
 8008278:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	3301      	adds	r3, #1
 800827e:	2202      	movs	r2, #2
 8008280:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008282:	e100      	b.n	8008486 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800828a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828c:	f107 0208 	add.w	r2, r7, #8
 8008290:	4610      	mov	r0, r2
 8008292:	4798      	blx	r3
 8008294:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	3301      	adds	r3, #1
 800829a:	2202      	movs	r2, #2
 800829c:	701a      	strb	r2, [r3, #0]
      break;
 800829e:	e0f2      	b.n	8008486 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	885b      	ldrh	r3, [r3, #2]
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b05      	cmp	r3, #5
 80082a8:	f200 80ac 	bhi.w	8008404 <USBD_GetDescriptor+0x204>
 80082ac:	a201      	add	r2, pc, #4	; (adr r2, 80082b4 <USBD_GetDescriptor+0xb4>)
 80082ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b2:	bf00      	nop
 80082b4:	080082cd 	.word	0x080082cd
 80082b8:	08008301 	.word	0x08008301
 80082bc:	08008335 	.word	0x08008335
 80082c0:	08008369 	.word	0x08008369
 80082c4:	0800839d 	.word	0x0800839d
 80082c8:	080083d1 	.word	0x080083d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00b      	beq.n	80082f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	7c12      	ldrb	r2, [r2, #16]
 80082e4:	f107 0108 	add.w	r1, r7, #8
 80082e8:	4610      	mov	r0, r2
 80082ea:	4798      	blx	r3
 80082ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ee:	e091      	b.n	8008414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 facb 	bl	800888e <USBD_CtlError>
            err++;
 80082f8:	7afb      	ldrb	r3, [r7, #11]
 80082fa:	3301      	adds	r3, #1
 80082fc:	72fb      	strb	r3, [r7, #11]
          break;
 80082fe:	e089      	b.n	8008414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00b      	beq.n	8008324 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	7c12      	ldrb	r2, [r2, #16]
 8008318:	f107 0108 	add.w	r1, r7, #8
 800831c:	4610      	mov	r0, r2
 800831e:	4798      	blx	r3
 8008320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008322:	e077      	b.n	8008414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fab1 	bl	800888e <USBD_CtlError>
            err++;
 800832c:	7afb      	ldrb	r3, [r7, #11]
 800832e:	3301      	adds	r3, #1
 8008330:	72fb      	strb	r3, [r7, #11]
          break;
 8008332:	e06f      	b.n	8008414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00b      	beq.n	8008358 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	7c12      	ldrb	r2, [r2, #16]
 800834c:	f107 0108 	add.w	r1, r7, #8
 8008350:	4610      	mov	r0, r2
 8008352:	4798      	blx	r3
 8008354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008356:	e05d      	b.n	8008414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fa97 	bl	800888e <USBD_CtlError>
            err++;
 8008360:	7afb      	ldrb	r3, [r7, #11]
 8008362:	3301      	adds	r3, #1
 8008364:	72fb      	strb	r3, [r7, #11]
          break;
 8008366:	e055      	b.n	8008414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00b      	beq.n	800838c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	7c12      	ldrb	r2, [r2, #16]
 8008380:	f107 0108 	add.w	r1, r7, #8
 8008384:	4610      	mov	r0, r2
 8008386:	4798      	blx	r3
 8008388:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800838a:	e043      	b.n	8008414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800838c:	6839      	ldr	r1, [r7, #0]
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fa7d 	bl	800888e <USBD_CtlError>
            err++;
 8008394:	7afb      	ldrb	r3, [r7, #11]
 8008396:	3301      	adds	r3, #1
 8008398:	72fb      	strb	r3, [r7, #11]
          break;
 800839a:	e03b      	b.n	8008414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00b      	beq.n	80083c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	7c12      	ldrb	r2, [r2, #16]
 80083b4:	f107 0108 	add.w	r1, r7, #8
 80083b8:	4610      	mov	r0, r2
 80083ba:	4798      	blx	r3
 80083bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083be:	e029      	b.n	8008414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fa63 	bl	800888e <USBD_CtlError>
            err++;
 80083c8:	7afb      	ldrb	r3, [r7, #11]
 80083ca:	3301      	adds	r3, #1
 80083cc:	72fb      	strb	r3, [r7, #11]
          break;
 80083ce:	e021      	b.n	8008414 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00b      	beq.n	80083f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	7c12      	ldrb	r2, [r2, #16]
 80083e8:	f107 0108 	add.w	r1, r7, #8
 80083ec:	4610      	mov	r0, r2
 80083ee:	4798      	blx	r3
 80083f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083f2:	e00f      	b.n	8008414 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fa49 	bl	800888e <USBD_CtlError>
            err++;
 80083fc:	7afb      	ldrb	r3, [r7, #11]
 80083fe:	3301      	adds	r3, #1
 8008400:	72fb      	strb	r3, [r7, #11]
          break;
 8008402:	e007      	b.n	8008414 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fa41 	bl	800888e <USBD_CtlError>
          err++;
 800840c:	7afb      	ldrb	r3, [r7, #11]
 800840e:	3301      	adds	r3, #1
 8008410:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008412:	bf00      	nop
      }
      break;
 8008414:	e037      	b.n	8008486 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	7c1b      	ldrb	r3, [r3, #16]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d109      	bne.n	8008432 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008426:	f107 0208 	add.w	r2, r7, #8
 800842a:	4610      	mov	r0, r2
 800842c:	4798      	blx	r3
 800842e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008430:	e029      	b.n	8008486 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fa2a 	bl	800888e <USBD_CtlError>
        err++;
 800843a:	7afb      	ldrb	r3, [r7, #11]
 800843c:	3301      	adds	r3, #1
 800843e:	72fb      	strb	r3, [r7, #11]
      break;
 8008440:	e021      	b.n	8008486 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	7c1b      	ldrb	r3, [r3, #16]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10d      	bne.n	8008466 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008452:	f107 0208 	add.w	r2, r7, #8
 8008456:	4610      	mov	r0, r2
 8008458:	4798      	blx	r3
 800845a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	3301      	adds	r3, #1
 8008460:	2207      	movs	r2, #7
 8008462:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008464:	e00f      	b.n	8008486 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fa10 	bl	800888e <USBD_CtlError>
        err++;
 800846e:	7afb      	ldrb	r3, [r7, #11]
 8008470:	3301      	adds	r3, #1
 8008472:	72fb      	strb	r3, [r7, #11]
      break;
 8008474:	e007      	b.n	8008486 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fa08 	bl	800888e <USBD_CtlError>
      err++;
 800847e:	7afb      	ldrb	r3, [r7, #11]
 8008480:	3301      	adds	r3, #1
 8008482:	72fb      	strb	r3, [r7, #11]
      break;
 8008484:	bf00      	nop
  }

  if (err != 0U)
 8008486:	7afb      	ldrb	r3, [r7, #11]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d11e      	bne.n	80084ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	88db      	ldrh	r3, [r3, #6]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d016      	beq.n	80084c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008494:	893b      	ldrh	r3, [r7, #8]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00e      	beq.n	80084b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	88da      	ldrh	r2, [r3, #6]
 800849e:	893b      	ldrh	r3, [r7, #8]
 80084a0:	4293      	cmp	r3, r2
 80084a2:	bf28      	it	cs
 80084a4:	4613      	movcs	r3, r2
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084aa:	893b      	ldrh	r3, [r7, #8]
 80084ac:	461a      	mov	r2, r3
 80084ae:	68f9      	ldr	r1, [r7, #12]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fa5d 	bl	8008970 <USBD_CtlSendData>
 80084b6:	e009      	b.n	80084cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f9e7 	bl	800888e <USBD_CtlError>
 80084c0:	e004      	b.n	80084cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 faae 	bl	8008a24 <USBD_CtlSendStatus>
 80084c8:	e000      	b.n	80084cc <USBD_GetDescriptor+0x2cc>
    return;
 80084ca:	bf00      	nop
  }
}
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop

080084d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	889b      	ldrh	r3, [r3, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d131      	bne.n	800854a <USBD_SetAddress+0x76>
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	88db      	ldrh	r3, [r3, #6]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d12d      	bne.n	800854a <USBD_SetAddress+0x76>
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	885b      	ldrh	r3, [r3, #2]
 80084f2:	2b7f      	cmp	r3, #127	; 0x7f
 80084f4:	d829      	bhi.n	800854a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	885b      	ldrh	r3, [r3, #2]
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008500:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b03      	cmp	r3, #3
 800850c:	d104      	bne.n	8008518 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f9bc 	bl	800888e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008516:	e01d      	b.n	8008554 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	7bfa      	ldrb	r2, [r7, #15]
 800851c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fee9 	bl	80092fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fa7a 	bl	8008a24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d004      	beq.n	8008540 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2202      	movs	r2, #2
 800853a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800853e:	e009      	b.n	8008554 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008548:	e004      	b.n	8008554 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f99e 	bl	800888e <USBD_CtlError>
  }
}
 8008552:	bf00      	nop
 8008554:	bf00      	nop
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008566:	2300      	movs	r3, #0
 8008568:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	885b      	ldrh	r3, [r3, #2]
 800856e:	b2da      	uxtb	r2, r3
 8008570:	4b4e      	ldr	r3, [pc, #312]	; (80086ac <USBD_SetConfig+0x150>)
 8008572:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008574:	4b4d      	ldr	r3, [pc, #308]	; (80086ac <USBD_SetConfig+0x150>)
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d905      	bls.n	8008588 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f985 	bl	800888e <USBD_CtlError>
    return USBD_FAIL;
 8008584:	2303      	movs	r3, #3
 8008586:	e08c      	b.n	80086a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800858e:	b2db      	uxtb	r3, r3
 8008590:	2b02      	cmp	r3, #2
 8008592:	d002      	beq.n	800859a <USBD_SetConfig+0x3e>
 8008594:	2b03      	cmp	r3, #3
 8008596:	d029      	beq.n	80085ec <USBD_SetConfig+0x90>
 8008598:	e075      	b.n	8008686 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800859a:	4b44      	ldr	r3, [pc, #272]	; (80086ac <USBD_SetConfig+0x150>)
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d020      	beq.n	80085e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80085a2:	4b42      	ldr	r3, [pc, #264]	; (80086ac <USBD_SetConfig+0x150>)
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	461a      	mov	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085ac:	4b3f      	ldr	r3, [pc, #252]	; (80086ac <USBD_SetConfig+0x150>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7fe ffe7 	bl	8007586 <USBD_SetClassConfig>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d008      	beq.n	80085d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f962 	bl	800888e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2202      	movs	r2, #2
 80085ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085d2:	e065      	b.n	80086a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 fa25 	bl	8008a24 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2203      	movs	r2, #3
 80085de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085e2:	e05d      	b.n	80086a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fa1d 	bl	8008a24 <USBD_CtlSendStatus>
      break;
 80085ea:	e059      	b.n	80086a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80085ec:	4b2f      	ldr	r3, [pc, #188]	; (80086ac <USBD_SetConfig+0x150>)
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d112      	bne.n	800861a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2202      	movs	r2, #2
 80085f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80085fc:	4b2b      	ldr	r3, [pc, #172]	; (80086ac <USBD_SetConfig+0x150>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	461a      	mov	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008606:	4b29      	ldr	r3, [pc, #164]	; (80086ac <USBD_SetConfig+0x150>)
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7fe ffd6 	bl	80075be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fa06 	bl	8008a24 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008618:	e042      	b.n	80086a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800861a:	4b24      	ldr	r3, [pc, #144]	; (80086ac <USBD_SetConfig+0x150>)
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	429a      	cmp	r2, r3
 8008626:	d02a      	beq.n	800867e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	b2db      	uxtb	r3, r3
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7fe ffc4 	bl	80075be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008636:	4b1d      	ldr	r3, [pc, #116]	; (80086ac <USBD_SetConfig+0x150>)
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	461a      	mov	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008640:	4b1a      	ldr	r3, [pc, #104]	; (80086ac <USBD_SetConfig+0x150>)
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7fe ff9d 	bl	8007586 <USBD_SetClassConfig>
 800864c:	4603      	mov	r3, r0
 800864e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00f      	beq.n	8008676 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f918 	bl	800888e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	b2db      	uxtb	r3, r3
 8008664:	4619      	mov	r1, r3
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7fe ffa9 	bl	80075be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2202      	movs	r2, #2
 8008670:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008674:	e014      	b.n	80086a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f9d4 	bl	8008a24 <USBD_CtlSendStatus>
      break;
 800867c:	e010      	b.n	80086a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f9d0 	bl	8008a24 <USBD_CtlSendStatus>
      break;
 8008684:	e00c      	b.n	80086a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f900 	bl	800888e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800868e:	4b07      	ldr	r3, [pc, #28]	; (80086ac <USBD_SetConfig+0x150>)
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7fe ff92 	bl	80075be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800869a:	2303      	movs	r3, #3
 800869c:	73fb      	strb	r3, [r7, #15]
      break;
 800869e:	bf00      	nop
  }

  return ret;
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	2000048c 	.word	0x2000048c

080086b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	88db      	ldrh	r3, [r3, #6]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d004      	beq.n	80086cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f8e2 	bl	800888e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086ca:	e023      	b.n	8008714 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	dc02      	bgt.n	80086de <USBD_GetConfig+0x2e>
 80086d8:	2b00      	cmp	r3, #0
 80086da:	dc03      	bgt.n	80086e4 <USBD_GetConfig+0x34>
 80086dc:	e015      	b.n	800870a <USBD_GetConfig+0x5a>
 80086de:	2b03      	cmp	r3, #3
 80086e0:	d00b      	beq.n	80086fa <USBD_GetConfig+0x4a>
 80086e2:	e012      	b.n	800870a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	3308      	adds	r3, #8
 80086ee:	2201      	movs	r2, #1
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f93c 	bl	8008970 <USBD_CtlSendData>
        break;
 80086f8:	e00c      	b.n	8008714 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	3304      	adds	r3, #4
 80086fe:	2201      	movs	r2, #1
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f934 	bl	8008970 <USBD_CtlSendData>
        break;
 8008708:	e004      	b.n	8008714 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f8be 	bl	800888e <USBD_CtlError>
        break;
 8008712:	bf00      	nop
}
 8008714:	bf00      	nop
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800872c:	b2db      	uxtb	r3, r3
 800872e:	3b01      	subs	r3, #1
 8008730:	2b02      	cmp	r3, #2
 8008732:	d81e      	bhi.n	8008772 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	88db      	ldrh	r3, [r3, #6]
 8008738:	2b02      	cmp	r3, #2
 800873a:	d004      	beq.n	8008746 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f8a5 	bl	800888e <USBD_CtlError>
        break;
 8008744:	e01a      	b.n	800877c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008752:	2b00      	cmp	r3, #0
 8008754:	d005      	beq.n	8008762 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	f043 0202 	orr.w	r2, r3, #2
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	330c      	adds	r3, #12
 8008766:	2202      	movs	r2, #2
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f900 	bl	8008970 <USBD_CtlSendData>
      break;
 8008770:	e004      	b.n	800877c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008772:	6839      	ldr	r1, [r7, #0]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f88a 	bl	800888e <USBD_CtlError>
      break;
 800877a:	bf00      	nop
  }
}
 800877c:	bf00      	nop
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	885b      	ldrh	r3, [r3, #2]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d107      	bne.n	80087a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2201      	movs	r2, #1
 800879a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f940 	bl	8008a24 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80087a4:	e013      	b.n	80087ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	885b      	ldrh	r3, [r3, #2]
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d10b      	bne.n	80087c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	889b      	ldrh	r3, [r3, #4]
 80087b2:	0a1b      	lsrs	r3, r3, #8
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	b2da      	uxtb	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f930 	bl	8008a24 <USBD_CtlSendStatus>
}
 80087c4:	e003      	b.n	80087ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f860 	bl	800888e <USBD_CtlError>
}
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b082      	sub	sp, #8
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	3b01      	subs	r3, #1
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d80b      	bhi.n	8008806 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	885b      	ldrh	r3, [r3, #2]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d10c      	bne.n	8008810 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f910 	bl	8008a24 <USBD_CtlSendStatus>
      }
      break;
 8008804:	e004      	b.n	8008810 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f840 	bl	800888e <USBD_CtlError>
      break;
 800880e:	e000      	b.n	8008812 <USBD_ClrFeature+0x3c>
      break;
 8008810:	bf00      	nop
  }
}
 8008812:	bf00      	nop
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	781a      	ldrb	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	3301      	adds	r3, #1
 8008834:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	781a      	ldrb	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	3301      	adds	r3, #1
 8008842:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f7ff fa41 	bl	8007ccc <SWAPBYTE>
 800884a:	4603      	mov	r3, r0
 800884c:	461a      	mov	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	3301      	adds	r3, #1
 8008856:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	3301      	adds	r3, #1
 800885c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f7ff fa34 	bl	8007ccc <SWAPBYTE>
 8008864:	4603      	mov	r3, r0
 8008866:	461a      	mov	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	3301      	adds	r3, #1
 8008870:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	3301      	adds	r3, #1
 8008876:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f7ff fa27 	bl	8007ccc <SWAPBYTE>
 800887e:	4603      	mov	r3, r0
 8008880:	461a      	mov	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	80da      	strh	r2, [r3, #6]
}
 8008886:	bf00      	nop
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b082      	sub	sp, #8
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008898:	2180      	movs	r1, #128	; 0x80
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fcc4 	bl	8009228 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80088a0:	2100      	movs	r1, #0
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fcc0 	bl	8009228 <USBD_LL_StallEP>
}
 80088a8:	bf00      	nop
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088bc:	2300      	movs	r3, #0
 80088be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d036      	beq.n	8008934 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80088ca:	6938      	ldr	r0, [r7, #16]
 80088cc:	f000 f836 	bl	800893c <USBD_GetLen>
 80088d0:	4603      	mov	r3, r0
 80088d2:	3301      	adds	r3, #1
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	005b      	lsls	r3, r3, #1
 80088d8:	b29a      	uxth	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088de:	7dfb      	ldrb	r3, [r7, #23]
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	4413      	add	r3, r2
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	7812      	ldrb	r2, [r2, #0]
 80088e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
 80088ec:	3301      	adds	r3, #1
 80088ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088f0:	7dfb      	ldrb	r3, [r7, #23]
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	4413      	add	r3, r2
 80088f6:	2203      	movs	r2, #3
 80088f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	3301      	adds	r3, #1
 80088fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008900:	e013      	b.n	800892a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008902:	7dfb      	ldrb	r3, [r7, #23]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	4413      	add	r3, r2
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	7812      	ldrb	r2, [r2, #0]
 800890c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	3301      	adds	r3, #1
 8008912:	613b      	str	r3, [r7, #16]
    idx++;
 8008914:	7dfb      	ldrb	r3, [r7, #23]
 8008916:	3301      	adds	r3, #1
 8008918:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800891a:	7dfb      	ldrb	r3, [r7, #23]
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	4413      	add	r3, r2
 8008920:	2200      	movs	r2, #0
 8008922:	701a      	strb	r2, [r3, #0]
    idx++;
 8008924:	7dfb      	ldrb	r3, [r7, #23]
 8008926:	3301      	adds	r3, #1
 8008928:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1e7      	bne.n	8008902 <USBD_GetString+0x52>
 8008932:	e000      	b.n	8008936 <USBD_GetString+0x86>
    return;
 8008934:	bf00      	nop
  }
}
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008944:	2300      	movs	r3, #0
 8008946:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800894c:	e005      	b.n	800895a <USBD_GetLen+0x1e>
  {
    len++;
 800894e:	7bfb      	ldrb	r3, [r7, #15]
 8008950:	3301      	adds	r3, #1
 8008952:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	3301      	adds	r3, #1
 8008958:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1f5      	bne.n	800894e <USBD_GetLen+0x12>
  }

  return len;
 8008962:	7bfb      	ldrb	r3, [r7, #15]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2202      	movs	r2, #2
 8008980:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	2100      	movs	r1, #0
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 fccf 	bl	800933a <USBD_LL_Transmit>

  return USBD_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	2100      	movs	r1, #0
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 fcbe 	bl	800933a <USBD_LL_Transmit>

  return USBD_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2203      	movs	r2, #3
 80089d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	2100      	movs	r1, #0
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 fcc2 	bl	800937c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b084      	sub	sp, #16
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	60f8      	str	r0, [r7, #12]
 8008a0a:	60b9      	str	r1, [r7, #8]
 8008a0c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	2100      	movs	r1, #0
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f000 fcb1 	bl	800937c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2204      	movs	r2, #4
 8008a30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a34:	2300      	movs	r3, #0
 8008a36:	2200      	movs	r2, #0
 8008a38:	2100      	movs	r1, #0
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fc7d 	bl	800933a <USBD_LL_Transmit>

  return USBD_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2205      	movs	r2, #5
 8008a56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	2100      	movs	r1, #0
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fc8b 	bl	800937c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a74:	2200      	movs	r2, #0
 8008a76:	4912      	ldr	r1, [pc, #72]	; (8008ac0 <MX_USB_DEVICE_Init+0x50>)
 8008a78:	4812      	ldr	r0, [pc, #72]	; (8008ac4 <MX_USB_DEVICE_Init+0x54>)
 8008a7a:	f7fe fd07 	bl	800748c <USBD_Init>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a84:	f7f8 fed2 	bl	800182c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008a88:	490f      	ldr	r1, [pc, #60]	; (8008ac8 <MX_USB_DEVICE_Init+0x58>)
 8008a8a:	480e      	ldr	r0, [pc, #56]	; (8008ac4 <MX_USB_DEVICE_Init+0x54>)
 8008a8c:	f7fe fd2e 	bl	80074ec <USBD_RegisterClass>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a96:	f7f8 fec9 	bl	800182c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008a9a:	490c      	ldr	r1, [pc, #48]	; (8008acc <MX_USB_DEVICE_Init+0x5c>)
 8008a9c:	4809      	ldr	r0, [pc, #36]	; (8008ac4 <MX_USB_DEVICE_Init+0x54>)
 8008a9e:	f7fe fc65 	bl	800736c <USBD_CDC_RegisterInterface>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008aa8:	f7f8 fec0 	bl	800182c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008aac:	4805      	ldr	r0, [pc, #20]	; (8008ac4 <MX_USB_DEVICE_Init+0x54>)
 8008aae:	f7fe fd53 	bl	8007558 <USBD_Start>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d001      	beq.n	8008abc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ab8:	f7f8 feb8 	bl	800182c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008abc:	bf00      	nop
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	200000ac 	.word	0x200000ac
 8008ac4:	20000490 	.word	0x20000490
 8008ac8:	20000018 	.word	0x20000018
 8008acc:	20000098 	.word	0x20000098

08008ad0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	4905      	ldr	r1, [pc, #20]	; (8008aec <CDC_Init_FS+0x1c>)
 8008ad8:	4805      	ldr	r0, [pc, #20]	; (8008af0 <CDC_Init_FS+0x20>)
 8008ada:	f7fe fc61 	bl	80073a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ade:	4905      	ldr	r1, [pc, #20]	; (8008af4 <CDC_Init_FS+0x24>)
 8008ae0:	4803      	ldr	r0, [pc, #12]	; (8008af0 <CDC_Init_FS+0x20>)
 8008ae2:	f7fe fc7f 	bl	80073e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008ae6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	20000f6c 	.word	0x20000f6c
 8008af0:	20000490 	.word	0x20000490
 8008af4:	2000076c 	.word	0x2000076c

08008af8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008af8:	b480      	push	{r7}
 8008afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008afc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	4603      	mov	r3, r0
 8008b10:	6039      	str	r1, [r7, #0]
 8008b12:	71fb      	strb	r3, [r7, #7]
 8008b14:	4613      	mov	r3, r2
 8008b16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b18:	79fb      	ldrb	r3, [r7, #7]
 8008b1a:	2b23      	cmp	r3, #35	; 0x23
 8008b1c:	d84a      	bhi.n	8008bb4 <CDC_Control_FS+0xac>
 8008b1e:	a201      	add	r2, pc, #4	; (adr r2, 8008b24 <CDC_Control_FS+0x1c>)
 8008b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b24:	08008bb5 	.word	0x08008bb5
 8008b28:	08008bb5 	.word	0x08008bb5
 8008b2c:	08008bb5 	.word	0x08008bb5
 8008b30:	08008bb5 	.word	0x08008bb5
 8008b34:	08008bb5 	.word	0x08008bb5
 8008b38:	08008bb5 	.word	0x08008bb5
 8008b3c:	08008bb5 	.word	0x08008bb5
 8008b40:	08008bb5 	.word	0x08008bb5
 8008b44:	08008bb5 	.word	0x08008bb5
 8008b48:	08008bb5 	.word	0x08008bb5
 8008b4c:	08008bb5 	.word	0x08008bb5
 8008b50:	08008bb5 	.word	0x08008bb5
 8008b54:	08008bb5 	.word	0x08008bb5
 8008b58:	08008bb5 	.word	0x08008bb5
 8008b5c:	08008bb5 	.word	0x08008bb5
 8008b60:	08008bb5 	.word	0x08008bb5
 8008b64:	08008bb5 	.word	0x08008bb5
 8008b68:	08008bb5 	.word	0x08008bb5
 8008b6c:	08008bb5 	.word	0x08008bb5
 8008b70:	08008bb5 	.word	0x08008bb5
 8008b74:	08008bb5 	.word	0x08008bb5
 8008b78:	08008bb5 	.word	0x08008bb5
 8008b7c:	08008bb5 	.word	0x08008bb5
 8008b80:	08008bb5 	.word	0x08008bb5
 8008b84:	08008bb5 	.word	0x08008bb5
 8008b88:	08008bb5 	.word	0x08008bb5
 8008b8c:	08008bb5 	.word	0x08008bb5
 8008b90:	08008bb5 	.word	0x08008bb5
 8008b94:	08008bb5 	.word	0x08008bb5
 8008b98:	08008bb5 	.word	0x08008bb5
 8008b9c:	08008bb5 	.word	0x08008bb5
 8008ba0:	08008bb5 	.word	0x08008bb5
 8008ba4:	08008bb5 	.word	0x08008bb5
 8008ba8:	08008bb5 	.word	0x08008bb5
 8008bac:	08008bb5 	.word	0x08008bb5
 8008bb0:	08008bb5 	.word	0x08008bb5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008bb4:	bf00      	nop
  }

  return (USBD_OK);
 8008bb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bce:	6879      	ldr	r1, [r7, #4]
 8008bd0:	4809      	ldr	r0, [pc, #36]	; (8008bf8 <CDC_Receive_FS+0x34>)
 8008bd2:	f7fe fc07 	bl	80073e4 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008bd6:	4808      	ldr	r0, [pc, #32]	; (8008bf8 <CDC_Receive_FS+0x34>)
 8008bd8:	f7fe fc22 	bl	8007420 <USBD_CDC_ReceivePacket>
	  uint8_t len = (uint8_t) *Len;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	73fb      	strb	r3, [r7, #15]

	  memcpy(buffer, Buf,len);
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
 8008be4:	461a      	mov	r2, r3
 8008be6:	6879      	ldr	r1, [r7, #4]
 8008be8:	4804      	ldr	r0, [pc, #16]	; (8008bfc <CDC_Receive_FS+0x38>)
 8008bea:	f000 fc6d 	bl	80094c8 <memcpy>
	  return (USBD_OK);
 8008bee:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	20000490 	.word	0x20000490
 8008bfc:	20000438 	.word	0x20000438

08008c00 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b087      	sub	sp, #28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008c12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	371c      	adds	r7, #28
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
	...

08008c24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	6039      	str	r1, [r7, #0]
 8008c2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	2212      	movs	r2, #18
 8008c34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c36:	4b03      	ldr	r3, [pc, #12]	; (8008c44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr
 8008c44:	200000c8 	.word	0x200000c8

08008c48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	4603      	mov	r3, r0
 8008c50:	6039      	str	r1, [r7, #0]
 8008c52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2204      	movs	r2, #4
 8008c58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c5a:	4b03      	ldr	r3, [pc, #12]	; (8008c68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr
 8008c68:	200000dc 	.word	0x200000dc

08008c6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	4603      	mov	r3, r0
 8008c74:	6039      	str	r1, [r7, #0]
 8008c76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c78:	79fb      	ldrb	r3, [r7, #7]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d105      	bne.n	8008c8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	4907      	ldr	r1, [pc, #28]	; (8008ca0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c82:	4808      	ldr	r0, [pc, #32]	; (8008ca4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c84:	f7ff fe14 	bl	80088b0 <USBD_GetString>
 8008c88:	e004      	b.n	8008c94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	4904      	ldr	r1, [pc, #16]	; (8008ca0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c8e:	4805      	ldr	r0, [pc, #20]	; (8008ca4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c90:	f7ff fe0e 	bl	80088b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c94:	4b02      	ldr	r3, [pc, #8]	; (8008ca0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	2000176c 	.word	0x2000176c
 8008ca4:	0800c2c0 	.word	0x0800c2c0

08008ca8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	4603      	mov	r3, r0
 8008cb0:	6039      	str	r1, [r7, #0]
 8008cb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008cb4:	683a      	ldr	r2, [r7, #0]
 8008cb6:	4904      	ldr	r1, [pc, #16]	; (8008cc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008cb8:	4804      	ldr	r0, [pc, #16]	; (8008ccc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008cba:	f7ff fdf9 	bl	80088b0 <USBD_GetString>
  return USBD_StrDesc;
 8008cbe:	4b02      	ldr	r3, [pc, #8]	; (8008cc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	2000176c 	.word	0x2000176c
 8008ccc:	0800c2d8 	.word	0x0800c2d8

08008cd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	6039      	str	r1, [r7, #0]
 8008cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	221a      	movs	r2, #26
 8008ce0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ce2:	f000 f843 	bl	8008d6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ce6:	4b02      	ldr	r3, [pc, #8]	; (8008cf0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	200000e0 	.word	0x200000e0

08008cf4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	6039      	str	r1, [r7, #0]
 8008cfe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d00:	79fb      	ldrb	r3, [r7, #7]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d105      	bne.n	8008d12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	4907      	ldr	r1, [pc, #28]	; (8008d28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d0a:	4808      	ldr	r0, [pc, #32]	; (8008d2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d0c:	f7ff fdd0 	bl	80088b0 <USBD_GetString>
 8008d10:	e004      	b.n	8008d1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	4904      	ldr	r1, [pc, #16]	; (8008d28 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d16:	4805      	ldr	r0, [pc, #20]	; (8008d2c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d18:	f7ff fdca 	bl	80088b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d1c:	4b02      	ldr	r3, [pc, #8]	; (8008d28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	2000176c 	.word	0x2000176c
 8008d2c:	0800c2ec 	.word	0x0800c2ec

08008d30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	6039      	str	r1, [r7, #0]
 8008d3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d3c:	79fb      	ldrb	r3, [r7, #7]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d105      	bne.n	8008d4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	4907      	ldr	r1, [pc, #28]	; (8008d64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d46:	4808      	ldr	r0, [pc, #32]	; (8008d68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d48:	f7ff fdb2 	bl	80088b0 <USBD_GetString>
 8008d4c:	e004      	b.n	8008d58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	4904      	ldr	r1, [pc, #16]	; (8008d64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d52:	4805      	ldr	r0, [pc, #20]	; (8008d68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d54:	f7ff fdac 	bl	80088b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d58:	4b02      	ldr	r3, [pc, #8]	; (8008d64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	2000176c 	.word	0x2000176c
 8008d68:	0800c2f8 	.word	0x0800c2f8

08008d6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d72:	4b0f      	ldr	r3, [pc, #60]	; (8008db0 <Get_SerialNum+0x44>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d78:	4b0e      	ldr	r3, [pc, #56]	; (8008db4 <Get_SerialNum+0x48>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d7e:	4b0e      	ldr	r3, [pc, #56]	; (8008db8 <Get_SerialNum+0x4c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4413      	add	r3, r2
 8008d8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d009      	beq.n	8008da6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d92:	2208      	movs	r2, #8
 8008d94:	4909      	ldr	r1, [pc, #36]	; (8008dbc <Get_SerialNum+0x50>)
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f000 f814 	bl	8008dc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d9c:	2204      	movs	r2, #4
 8008d9e:	4908      	ldr	r1, [pc, #32]	; (8008dc0 <Get_SerialNum+0x54>)
 8008da0:	68b8      	ldr	r0, [r7, #8]
 8008da2:	f000 f80f 	bl	8008dc4 <IntToUnicode>
  }
}
 8008da6:	bf00      	nop
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	1fff7a10 	.word	0x1fff7a10
 8008db4:	1fff7a14 	.word	0x1fff7a14
 8008db8:	1fff7a18 	.word	0x1fff7a18
 8008dbc:	200000e2 	.word	0x200000e2
 8008dc0:	200000f2 	.word	0x200000f2

08008dc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b087      	sub	sp, #28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	75fb      	strb	r3, [r7, #23]
 8008dda:	e027      	b.n	8008e2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	0f1b      	lsrs	r3, r3, #28
 8008de0:	2b09      	cmp	r3, #9
 8008de2:	d80b      	bhi.n	8008dfc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	0f1b      	lsrs	r3, r3, #28
 8008de8:	b2da      	uxtb	r2, r3
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
 8008dec:	005b      	lsls	r3, r3, #1
 8008dee:	4619      	mov	r1, r3
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	440b      	add	r3, r1
 8008df4:	3230      	adds	r2, #48	; 0x30
 8008df6:	b2d2      	uxtb	r2, r2
 8008df8:	701a      	strb	r2, [r3, #0]
 8008dfa:	e00a      	b.n	8008e12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	0f1b      	lsrs	r3, r3, #28
 8008e00:	b2da      	uxtb	r2, r3
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
 8008e04:	005b      	lsls	r3, r3, #1
 8008e06:	4619      	mov	r1, r3
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	440b      	add	r3, r1
 8008e0c:	3237      	adds	r2, #55	; 0x37
 8008e0e:	b2d2      	uxtb	r2, r2
 8008e10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	011b      	lsls	r3, r3, #4
 8008e16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e18:	7dfb      	ldrb	r3, [r7, #23]
 8008e1a:	005b      	lsls	r3, r3, #1
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	4413      	add	r3, r2
 8008e22:	2200      	movs	r2, #0
 8008e24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	75fb      	strb	r3, [r7, #23]
 8008e2c:	7dfa      	ldrb	r2, [r7, #23]
 8008e2e:	79fb      	ldrb	r3, [r7, #7]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d3d3      	bcc.n	8008ddc <IntToUnicode+0x18>
  }
}
 8008e34:	bf00      	nop
 8008e36:	bf00      	nop
 8008e38:	371c      	adds	r7, #28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
	...

08008e44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b08a      	sub	sp, #40	; 0x28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e4c:	f107 0314 	add.w	r3, r7, #20
 8008e50:	2200      	movs	r2, #0
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	605a      	str	r2, [r3, #4]
 8008e56:	609a      	str	r2, [r3, #8]
 8008e58:	60da      	str	r2, [r3, #12]
 8008e5a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e64:	d13a      	bne.n	8008edc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e66:	2300      	movs	r3, #0
 8008e68:	613b      	str	r3, [r7, #16]
 8008e6a:	4b1e      	ldr	r3, [pc, #120]	; (8008ee4 <HAL_PCD_MspInit+0xa0>)
 8008e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6e:	4a1d      	ldr	r2, [pc, #116]	; (8008ee4 <HAL_PCD_MspInit+0xa0>)
 8008e70:	f043 0301 	orr.w	r3, r3, #1
 8008e74:	6313      	str	r3, [r2, #48]	; 0x30
 8008e76:	4b1b      	ldr	r3, [pc, #108]	; (8008ee4 <HAL_PCD_MspInit+0xa0>)
 8008e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7a:	f003 0301 	and.w	r3, r3, #1
 8008e7e:	613b      	str	r3, [r7, #16]
 8008e80:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008e82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e88:	2302      	movs	r3, #2
 8008e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e90:	2303      	movs	r3, #3
 8008e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e94:	230a      	movs	r3, #10
 8008e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e98:	f107 0314 	add.w	r3, r7, #20
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4812      	ldr	r0, [pc, #72]	; (8008ee8 <HAL_PCD_MspInit+0xa4>)
 8008ea0:	f7f9 fca8 	bl	80027f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ea4:	4b0f      	ldr	r3, [pc, #60]	; (8008ee4 <HAL_PCD_MspInit+0xa0>)
 8008ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea8:	4a0e      	ldr	r2, [pc, #56]	; (8008ee4 <HAL_PCD_MspInit+0xa0>)
 8008eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eae:	6353      	str	r3, [r2, #52]	; 0x34
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	60fb      	str	r3, [r7, #12]
 8008eb4:	4b0b      	ldr	r3, [pc, #44]	; (8008ee4 <HAL_PCD_MspInit+0xa0>)
 8008eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eb8:	4a0a      	ldr	r2, [pc, #40]	; (8008ee4 <HAL_PCD_MspInit+0xa0>)
 8008eba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ebe:	6453      	str	r3, [r2, #68]	; 0x44
 8008ec0:	4b08      	ldr	r3, [pc, #32]	; (8008ee4 <HAL_PCD_MspInit+0xa0>)
 8008ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ec8:	60fb      	str	r3, [r7, #12]
 8008eca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2100      	movs	r1, #0
 8008ed0:	2043      	movs	r0, #67	; 0x43
 8008ed2:	f7f9 fc58 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ed6:	2043      	movs	r0, #67	; 0x43
 8008ed8:	f7f9 fc71 	bl	80027be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008edc:	bf00      	nop
 8008ede:	3728      	adds	r7, #40	; 0x28
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	40023800 	.word	0x40023800
 8008ee8:	40020000 	.word	0x40020000

08008eec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008f00:	4619      	mov	r1, r3
 8008f02:	4610      	mov	r0, r2
 8008f04:	f7fe fb75 	bl	80075f2 <USBD_LL_SetupStage>
}
 8008f08:	bf00      	nop
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	6879      	ldr	r1, [r7, #4]
 8008f26:	4613      	mov	r3, r2
 8008f28:	00db      	lsls	r3, r3, #3
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	440b      	add	r3, r1
 8008f30:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	78fb      	ldrb	r3, [r7, #3]
 8008f38:	4619      	mov	r1, r3
 8008f3a:	f7fe fbaf 	bl	800769c <USBD_LL_DataOutStage>
}
 8008f3e:	bf00      	nop
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b082      	sub	sp, #8
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	460b      	mov	r3, r1
 8008f50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008f58:	78fa      	ldrb	r2, [r7, #3]
 8008f5a:	6879      	ldr	r1, [r7, #4]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	00db      	lsls	r3, r3, #3
 8008f60:	4413      	add	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	440b      	add	r3, r1
 8008f66:	334c      	adds	r3, #76	; 0x4c
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	78fb      	ldrb	r3, [r7, #3]
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	f7fe fc48 	bl	8007802 <USBD_LL_DataInStage>
}
 8008f72:	bf00      	nop
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b082      	sub	sp, #8
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fe fd7c 	bl	8007a86 <USBD_LL_SOF>
}
 8008f8e:	bf00      	nop
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b084      	sub	sp, #16
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d102      	bne.n	8008fb0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73fb      	strb	r3, [r7, #15]
 8008fae:	e008      	b.n	8008fc2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d102      	bne.n	8008fbe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	73fb      	strb	r3, [r7, #15]
 8008fbc:	e001      	b.n	8008fc2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008fbe:	f7f8 fc35 	bl	800182c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fc8:	7bfa      	ldrb	r2, [r7, #15]
 8008fca:	4611      	mov	r1, r2
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fe fd1c 	bl	8007a0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fe fcc4 	bl	8007966 <USBD_LL_Reset>
}
 8008fde:	bf00      	nop
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
	...

08008fe8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fe fd17 	bl	8007a2a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	6812      	ldr	r2, [r2, #0]
 800900a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800900e:	f043 0301 	orr.w	r3, r3, #1
 8009012:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a1b      	ldr	r3, [r3, #32]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d005      	beq.n	8009028 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800901c:	4b04      	ldr	r3, [pc, #16]	; (8009030 <HAL_PCD_SuspendCallback+0x48>)
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	4a03      	ldr	r2, [pc, #12]	; (8009030 <HAL_PCD_SuspendCallback+0x48>)
 8009022:	f043 0306 	orr.w	r3, r3, #6
 8009026:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009028:	bf00      	nop
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	e000ed00 	.word	0xe000ed00

08009034 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009042:	4618      	mov	r0, r3
 8009044:	f7fe fd07 	bl	8007a56 <USBD_LL_Resume>
}
 8009048:	bf00      	nop
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	460b      	mov	r3, r1
 800905a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009062:	78fa      	ldrb	r2, [r7, #3]
 8009064:	4611      	mov	r1, r2
 8009066:	4618      	mov	r0, r3
 8009068:	f7fe fd5f 	bl	8007b2a <USBD_LL_IsoOUTIncomplete>
}
 800906c:	bf00      	nop
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009086:	78fa      	ldrb	r2, [r7, #3]
 8009088:	4611      	mov	r1, r2
 800908a:	4618      	mov	r0, r3
 800908c:	f7fe fd1b 	bl	8007ac6 <USBD_LL_IsoINIncomplete>
}
 8009090:	bf00      	nop
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe fd71 	bl	8007b8e <USBD_LL_DevConnected>
}
 80090ac:	bf00      	nop
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fe fd6e 	bl	8007ba4 <USBD_LL_DevDisconnected>
}
 80090c8:	bf00      	nop
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d13c      	bne.n	800915a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80090e0:	4a20      	ldr	r2, [pc, #128]	; (8009164 <USBD_LL_Init+0x94>)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a1e      	ldr	r2, [pc, #120]	; (8009164 <USBD_LL_Init+0x94>)
 80090ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80090f0:	4b1c      	ldr	r3, [pc, #112]	; (8009164 <USBD_LL_Init+0x94>)
 80090f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80090f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80090f8:	4b1a      	ldr	r3, [pc, #104]	; (8009164 <USBD_LL_Init+0x94>)
 80090fa:	2204      	movs	r2, #4
 80090fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80090fe:	4b19      	ldr	r3, [pc, #100]	; (8009164 <USBD_LL_Init+0x94>)
 8009100:	2202      	movs	r2, #2
 8009102:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009104:	4b17      	ldr	r3, [pc, #92]	; (8009164 <USBD_LL_Init+0x94>)
 8009106:	2200      	movs	r2, #0
 8009108:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800910a:	4b16      	ldr	r3, [pc, #88]	; (8009164 <USBD_LL_Init+0x94>)
 800910c:	2202      	movs	r2, #2
 800910e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009110:	4b14      	ldr	r3, [pc, #80]	; (8009164 <USBD_LL_Init+0x94>)
 8009112:	2200      	movs	r2, #0
 8009114:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009116:	4b13      	ldr	r3, [pc, #76]	; (8009164 <USBD_LL_Init+0x94>)
 8009118:	2200      	movs	r2, #0
 800911a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800911c:	4b11      	ldr	r3, [pc, #68]	; (8009164 <USBD_LL_Init+0x94>)
 800911e:	2200      	movs	r2, #0
 8009120:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009122:	4b10      	ldr	r3, [pc, #64]	; (8009164 <USBD_LL_Init+0x94>)
 8009124:	2200      	movs	r2, #0
 8009126:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009128:	4b0e      	ldr	r3, [pc, #56]	; (8009164 <USBD_LL_Init+0x94>)
 800912a:	2200      	movs	r2, #0
 800912c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800912e:	480d      	ldr	r0, [pc, #52]	; (8009164 <USBD_LL_Init+0x94>)
 8009130:	f7f9 fd15 	bl	8002b5e <HAL_PCD_Init>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800913a:	f7f8 fb77 	bl	800182c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800913e:	2180      	movs	r1, #128	; 0x80
 8009140:	4808      	ldr	r0, [pc, #32]	; (8009164 <USBD_LL_Init+0x94>)
 8009142:	f7fa ff6c 	bl	800401e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009146:	2240      	movs	r2, #64	; 0x40
 8009148:	2100      	movs	r1, #0
 800914a:	4806      	ldr	r0, [pc, #24]	; (8009164 <USBD_LL_Init+0x94>)
 800914c:	f7fa ff20 	bl	8003f90 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009150:	2280      	movs	r2, #128	; 0x80
 8009152:	2101      	movs	r1, #1
 8009154:	4803      	ldr	r0, [pc, #12]	; (8009164 <USBD_LL_Init+0x94>)
 8009156:	f7fa ff1b 	bl	8003f90 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	2000196c 	.word	0x2000196c

08009168 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009174:	2300      	movs	r3, #0
 8009176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800917e:	4618      	mov	r0, r3
 8009180:	f7f9 fe0a 	bl	8002d98 <HAL_PCD_Start>
 8009184:	4603      	mov	r3, r0
 8009186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009188:	7bfb      	ldrb	r3, [r7, #15]
 800918a:	4618      	mov	r0, r3
 800918c:	f000 f942 	bl	8009414 <USBD_Get_USB_Status>
 8009190:	4603      	mov	r3, r0
 8009192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009194:	7bbb      	ldrb	r3, [r7, #14]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b084      	sub	sp, #16
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	4608      	mov	r0, r1
 80091a8:	4611      	mov	r1, r2
 80091aa:	461a      	mov	r2, r3
 80091ac:	4603      	mov	r3, r0
 80091ae:	70fb      	strb	r3, [r7, #3]
 80091b0:	460b      	mov	r3, r1
 80091b2:	70bb      	strb	r3, [r7, #2]
 80091b4:	4613      	mov	r3, r2
 80091b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80091c6:	78bb      	ldrb	r3, [r7, #2]
 80091c8:	883a      	ldrh	r2, [r7, #0]
 80091ca:	78f9      	ldrb	r1, [r7, #3]
 80091cc:	f7fa fadb 	bl	8003786 <HAL_PCD_EP_Open>
 80091d0:	4603      	mov	r3, r0
 80091d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 f91c 	bl	8009414 <USBD_Get_USB_Status>
 80091dc:	4603      	mov	r3, r0
 80091de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	460b      	mov	r3, r1
 80091f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009204:	78fa      	ldrb	r2, [r7, #3]
 8009206:	4611      	mov	r1, r2
 8009208:	4618      	mov	r0, r3
 800920a:	f7fa fb24 	bl	8003856 <HAL_PCD_EP_Close>
 800920e:	4603      	mov	r3, r0
 8009210:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009212:	7bfb      	ldrb	r3, [r7, #15]
 8009214:	4618      	mov	r0, r3
 8009216:	f000 f8fd 	bl	8009414 <USBD_Get_USB_Status>
 800921a:	4603      	mov	r3, r0
 800921c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800921e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009242:	78fa      	ldrb	r2, [r7, #3]
 8009244:	4611      	mov	r1, r2
 8009246:	4618      	mov	r0, r3
 8009248:	f7fa fbfc 	bl	8003a44 <HAL_PCD_EP_SetStall>
 800924c:	4603      	mov	r3, r0
 800924e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	4618      	mov	r0, r3
 8009254:	f000 f8de 	bl	8009414 <USBD_Get_USB_Status>
 8009258:	4603      	mov	r3, r0
 800925a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800925c:	7bbb      	ldrb	r3, [r7, #14]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b084      	sub	sp, #16
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	460b      	mov	r3, r1
 8009270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009280:	78fa      	ldrb	r2, [r7, #3]
 8009282:	4611      	mov	r1, r2
 8009284:	4618      	mov	r0, r3
 8009286:	f7fa fc41 	bl	8003b0c <HAL_PCD_EP_ClrStall>
 800928a:	4603      	mov	r3, r0
 800928c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800928e:	7bfb      	ldrb	r3, [r7, #15]
 8009290:	4618      	mov	r0, r3
 8009292:	f000 f8bf 	bl	8009414 <USBD_Get_USB_Status>
 8009296:	4603      	mov	r3, r0
 8009298:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800929a:	7bbb      	ldrb	r3, [r7, #14]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80092b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	da0b      	bge.n	80092d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092c6:	68f9      	ldr	r1, [r7, #12]
 80092c8:	4613      	mov	r3, r2
 80092ca:	00db      	lsls	r3, r3, #3
 80092cc:	4413      	add	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	440b      	add	r3, r1
 80092d2:	333e      	adds	r3, #62	; 0x3e
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	e00b      	b.n	80092f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80092d8:	78fb      	ldrb	r3, [r7, #3]
 80092da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092de:	68f9      	ldr	r1, [r7, #12]
 80092e0:	4613      	mov	r3, r2
 80092e2:	00db      	lsls	r3, r3, #3
 80092e4:	4413      	add	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	440b      	add	r3, r1
 80092ea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80092ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	460b      	mov	r3, r1
 8009306:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009308:	2300      	movs	r3, #0
 800930a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800930c:	2300      	movs	r3, #0
 800930e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009316:	78fa      	ldrb	r2, [r7, #3]
 8009318:	4611      	mov	r1, r2
 800931a:	4618      	mov	r0, r3
 800931c:	f7fa fa0e 	bl	800373c <HAL_PCD_SetAddress>
 8009320:	4603      	mov	r3, r0
 8009322:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009324:	7bfb      	ldrb	r3, [r7, #15]
 8009326:	4618      	mov	r0, r3
 8009328:	f000 f874 	bl	8009414 <USBD_Get_USB_Status>
 800932c:	4603      	mov	r3, r0
 800932e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009330:	7bbb      	ldrb	r3, [r7, #14]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b086      	sub	sp, #24
 800933e:	af00      	add	r7, sp, #0
 8009340:	60f8      	str	r0, [r7, #12]
 8009342:	607a      	str	r2, [r7, #4]
 8009344:	603b      	str	r3, [r7, #0]
 8009346:	460b      	mov	r3, r1
 8009348:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800934a:	2300      	movs	r3, #0
 800934c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800934e:	2300      	movs	r3, #0
 8009350:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009358:	7af9      	ldrb	r1, [r7, #11]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	f7fa fb27 	bl	80039b0 <HAL_PCD_EP_Transmit>
 8009362:	4603      	mov	r3, r0
 8009364:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009366:	7dfb      	ldrb	r3, [r7, #23]
 8009368:	4618      	mov	r0, r3
 800936a:	f000 f853 	bl	8009414 <USBD_Get_USB_Status>
 800936e:	4603      	mov	r3, r0
 8009370:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009372:	7dbb      	ldrb	r3, [r7, #22]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3718      	adds	r7, #24
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	607a      	str	r2, [r7, #4]
 8009386:	603b      	str	r3, [r7, #0]
 8009388:	460b      	mov	r3, r1
 800938a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800939a:	7af9      	ldrb	r1, [r7, #11]
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	f7fa faa3 	bl	80038ea <HAL_PCD_EP_Receive>
 80093a4:	4603      	mov	r3, r0
 80093a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093a8:	7dfb      	ldrb	r3, [r7, #23]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 f832 	bl	8009414 <USBD_Get_USB_Status>
 80093b0:	4603      	mov	r3, r0
 80093b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b082      	sub	sp, #8
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	460b      	mov	r3, r1
 80093c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093d0:	78fa      	ldrb	r2, [r7, #3]
 80093d2:	4611      	mov	r1, r2
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fa fad3 	bl	8003980 <HAL_PCD_EP_GetRxCount>
 80093da:	4603      	mov	r3, r0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80093ec:	4b03      	ldr	r3, [pc, #12]	; (80093fc <USBD_static_malloc+0x18>)
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	20001e78 	.word	0x20001e78

08009400 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]

}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	4603      	mov	r3, r0
 800941c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800941e:	2300      	movs	r3, #0
 8009420:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009422:	79fb      	ldrb	r3, [r7, #7]
 8009424:	2b03      	cmp	r3, #3
 8009426:	d817      	bhi.n	8009458 <USBD_Get_USB_Status+0x44>
 8009428:	a201      	add	r2, pc, #4	; (adr r2, 8009430 <USBD_Get_USB_Status+0x1c>)
 800942a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942e:	bf00      	nop
 8009430:	08009441 	.word	0x08009441
 8009434:	08009447 	.word	0x08009447
 8009438:	0800944d 	.word	0x0800944d
 800943c:	08009453 	.word	0x08009453
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009440:	2300      	movs	r3, #0
 8009442:	73fb      	strb	r3, [r7, #15]
    break;
 8009444:	e00b      	b.n	800945e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009446:	2303      	movs	r3, #3
 8009448:	73fb      	strb	r3, [r7, #15]
    break;
 800944a:	e008      	b.n	800945e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800944c:	2301      	movs	r3, #1
 800944e:	73fb      	strb	r3, [r7, #15]
    break;
 8009450:	e005      	b.n	800945e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009452:	2303      	movs	r3, #3
 8009454:	73fb      	strb	r3, [r7, #15]
    break;
 8009456:	e002      	b.n	800945e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009458:	2303      	movs	r3, #3
 800945a:	73fb      	strb	r3, [r7, #15]
    break;
 800945c:	bf00      	nop
  }
  return usb_status;
 800945e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <atof>:
 800946c:	2100      	movs	r1, #0
 800946e:	f000 be79 	b.w	800a164 <strtod>
	...

08009474 <__errno>:
 8009474:	4b01      	ldr	r3, [pc, #4]	; (800947c <__errno+0x8>)
 8009476:	6818      	ldr	r0, [r3, #0]
 8009478:	4770      	bx	lr
 800947a:	bf00      	nop
 800947c:	200000fc 	.word	0x200000fc

08009480 <__libc_init_array>:
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	4d0d      	ldr	r5, [pc, #52]	; (80094b8 <__libc_init_array+0x38>)
 8009484:	4c0d      	ldr	r4, [pc, #52]	; (80094bc <__libc_init_array+0x3c>)
 8009486:	1b64      	subs	r4, r4, r5
 8009488:	10a4      	asrs	r4, r4, #2
 800948a:	2600      	movs	r6, #0
 800948c:	42a6      	cmp	r6, r4
 800948e:	d109      	bne.n	80094a4 <__libc_init_array+0x24>
 8009490:	4d0b      	ldr	r5, [pc, #44]	; (80094c0 <__libc_init_array+0x40>)
 8009492:	4c0c      	ldr	r4, [pc, #48]	; (80094c4 <__libc_init_array+0x44>)
 8009494:	f002 fedc 	bl	800c250 <_init>
 8009498:	1b64      	subs	r4, r4, r5
 800949a:	10a4      	asrs	r4, r4, #2
 800949c:	2600      	movs	r6, #0
 800949e:	42a6      	cmp	r6, r4
 80094a0:	d105      	bne.n	80094ae <__libc_init_array+0x2e>
 80094a2:	bd70      	pop	{r4, r5, r6, pc}
 80094a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094a8:	4798      	blx	r3
 80094aa:	3601      	adds	r6, #1
 80094ac:	e7ee      	b.n	800948c <__libc_init_array+0xc>
 80094ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80094b2:	4798      	blx	r3
 80094b4:	3601      	adds	r6, #1
 80094b6:	e7f2      	b.n	800949e <__libc_init_array+0x1e>
 80094b8:	0800c74c 	.word	0x0800c74c
 80094bc:	0800c74c 	.word	0x0800c74c
 80094c0:	0800c74c 	.word	0x0800c74c
 80094c4:	0800c750 	.word	0x0800c750

080094c8 <memcpy>:
 80094c8:	440a      	add	r2, r1
 80094ca:	4291      	cmp	r1, r2
 80094cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80094d0:	d100      	bne.n	80094d4 <memcpy+0xc>
 80094d2:	4770      	bx	lr
 80094d4:	b510      	push	{r4, lr}
 80094d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094de:	4291      	cmp	r1, r2
 80094e0:	d1f9      	bne.n	80094d6 <memcpy+0xe>
 80094e2:	bd10      	pop	{r4, pc}

080094e4 <memset>:
 80094e4:	4402      	add	r2, r0
 80094e6:	4603      	mov	r3, r0
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d100      	bne.n	80094ee <memset+0xa>
 80094ec:	4770      	bx	lr
 80094ee:	f803 1b01 	strb.w	r1, [r3], #1
 80094f2:	e7f9      	b.n	80094e8 <memset+0x4>

080094f4 <strncmp>:
 80094f4:	b510      	push	{r4, lr}
 80094f6:	b17a      	cbz	r2, 8009518 <strncmp+0x24>
 80094f8:	4603      	mov	r3, r0
 80094fa:	3901      	subs	r1, #1
 80094fc:	1884      	adds	r4, r0, r2
 80094fe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009502:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009506:	4290      	cmp	r0, r2
 8009508:	d101      	bne.n	800950e <strncmp+0x1a>
 800950a:	42a3      	cmp	r3, r4
 800950c:	d101      	bne.n	8009512 <strncmp+0x1e>
 800950e:	1a80      	subs	r0, r0, r2
 8009510:	bd10      	pop	{r4, pc}
 8009512:	2800      	cmp	r0, #0
 8009514:	d1f3      	bne.n	80094fe <strncmp+0xa>
 8009516:	e7fa      	b.n	800950e <strncmp+0x1a>
 8009518:	4610      	mov	r0, r2
 800951a:	e7f9      	b.n	8009510 <strncmp+0x1c>

0800951c <sulp>:
 800951c:	b570      	push	{r4, r5, r6, lr}
 800951e:	4604      	mov	r4, r0
 8009520:	460d      	mov	r5, r1
 8009522:	ec45 4b10 	vmov	d0, r4, r5
 8009526:	4616      	mov	r6, r2
 8009528:	f001 fd1c 	bl	800af64 <__ulp>
 800952c:	ec51 0b10 	vmov	r0, r1, d0
 8009530:	b17e      	cbz	r6, 8009552 <sulp+0x36>
 8009532:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009536:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800953a:	2b00      	cmp	r3, #0
 800953c:	dd09      	ble.n	8009552 <sulp+0x36>
 800953e:	051b      	lsls	r3, r3, #20
 8009540:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009544:	2400      	movs	r4, #0
 8009546:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800954a:	4622      	mov	r2, r4
 800954c:	462b      	mov	r3, r5
 800954e:	f7f7 f853 	bl	80005f8 <__aeabi_dmul>
 8009552:	bd70      	pop	{r4, r5, r6, pc}
 8009554:	0000      	movs	r0, r0
	...

08009558 <_strtod_l>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	ed2d 8b02 	vpush	{d8}
 8009560:	b09d      	sub	sp, #116	; 0x74
 8009562:	461f      	mov	r7, r3
 8009564:	2300      	movs	r3, #0
 8009566:	9318      	str	r3, [sp, #96]	; 0x60
 8009568:	4ba2      	ldr	r3, [pc, #648]	; (80097f4 <_strtod_l+0x29c>)
 800956a:	9213      	str	r2, [sp, #76]	; 0x4c
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	9305      	str	r3, [sp, #20]
 8009570:	4604      	mov	r4, r0
 8009572:	4618      	mov	r0, r3
 8009574:	4688      	mov	r8, r1
 8009576:	f7f6 fe2b 	bl	80001d0 <strlen>
 800957a:	f04f 0a00 	mov.w	sl, #0
 800957e:	4605      	mov	r5, r0
 8009580:	f04f 0b00 	mov.w	fp, #0
 8009584:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009588:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800958a:	781a      	ldrb	r2, [r3, #0]
 800958c:	2a2b      	cmp	r2, #43	; 0x2b
 800958e:	d04e      	beq.n	800962e <_strtod_l+0xd6>
 8009590:	d83b      	bhi.n	800960a <_strtod_l+0xb2>
 8009592:	2a0d      	cmp	r2, #13
 8009594:	d834      	bhi.n	8009600 <_strtod_l+0xa8>
 8009596:	2a08      	cmp	r2, #8
 8009598:	d834      	bhi.n	8009604 <_strtod_l+0xac>
 800959a:	2a00      	cmp	r2, #0
 800959c:	d03e      	beq.n	800961c <_strtod_l+0xc4>
 800959e:	2300      	movs	r3, #0
 80095a0:	930a      	str	r3, [sp, #40]	; 0x28
 80095a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80095a4:	7833      	ldrb	r3, [r6, #0]
 80095a6:	2b30      	cmp	r3, #48	; 0x30
 80095a8:	f040 80b0 	bne.w	800970c <_strtod_l+0x1b4>
 80095ac:	7873      	ldrb	r3, [r6, #1]
 80095ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095b2:	2b58      	cmp	r3, #88	; 0x58
 80095b4:	d168      	bne.n	8009688 <_strtod_l+0x130>
 80095b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095b8:	9301      	str	r3, [sp, #4]
 80095ba:	ab18      	add	r3, sp, #96	; 0x60
 80095bc:	9702      	str	r7, [sp, #8]
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	4a8d      	ldr	r2, [pc, #564]	; (80097f8 <_strtod_l+0x2a0>)
 80095c2:	ab19      	add	r3, sp, #100	; 0x64
 80095c4:	a917      	add	r1, sp, #92	; 0x5c
 80095c6:	4620      	mov	r0, r4
 80095c8:	f000 fe40 	bl	800a24c <__gethex>
 80095cc:	f010 0707 	ands.w	r7, r0, #7
 80095d0:	4605      	mov	r5, r0
 80095d2:	d005      	beq.n	80095e0 <_strtod_l+0x88>
 80095d4:	2f06      	cmp	r7, #6
 80095d6:	d12c      	bne.n	8009632 <_strtod_l+0xda>
 80095d8:	3601      	adds	r6, #1
 80095da:	2300      	movs	r3, #0
 80095dc:	9617      	str	r6, [sp, #92]	; 0x5c
 80095de:	930a      	str	r3, [sp, #40]	; 0x28
 80095e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f040 8590 	bne.w	800a108 <_strtod_l+0xbb0>
 80095e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ea:	b1eb      	cbz	r3, 8009628 <_strtod_l+0xd0>
 80095ec:	4652      	mov	r2, sl
 80095ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80095f2:	ec43 2b10 	vmov	d0, r2, r3
 80095f6:	b01d      	add	sp, #116	; 0x74
 80095f8:	ecbd 8b02 	vpop	{d8}
 80095fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009600:	2a20      	cmp	r2, #32
 8009602:	d1cc      	bne.n	800959e <_strtod_l+0x46>
 8009604:	3301      	adds	r3, #1
 8009606:	9317      	str	r3, [sp, #92]	; 0x5c
 8009608:	e7be      	b.n	8009588 <_strtod_l+0x30>
 800960a:	2a2d      	cmp	r2, #45	; 0x2d
 800960c:	d1c7      	bne.n	800959e <_strtod_l+0x46>
 800960e:	2201      	movs	r2, #1
 8009610:	920a      	str	r2, [sp, #40]	; 0x28
 8009612:	1c5a      	adds	r2, r3, #1
 8009614:	9217      	str	r2, [sp, #92]	; 0x5c
 8009616:	785b      	ldrb	r3, [r3, #1]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1c2      	bne.n	80095a2 <_strtod_l+0x4a>
 800961c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800961e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009622:	2b00      	cmp	r3, #0
 8009624:	f040 856e 	bne.w	800a104 <_strtod_l+0xbac>
 8009628:	4652      	mov	r2, sl
 800962a:	465b      	mov	r3, fp
 800962c:	e7e1      	b.n	80095f2 <_strtod_l+0x9a>
 800962e:	2200      	movs	r2, #0
 8009630:	e7ee      	b.n	8009610 <_strtod_l+0xb8>
 8009632:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009634:	b13a      	cbz	r2, 8009646 <_strtod_l+0xee>
 8009636:	2135      	movs	r1, #53	; 0x35
 8009638:	a81a      	add	r0, sp, #104	; 0x68
 800963a:	f001 fd9e 	bl	800b17a <__copybits>
 800963e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009640:	4620      	mov	r0, r4
 8009642:	f001 f95d 	bl	800a900 <_Bfree>
 8009646:	3f01      	subs	r7, #1
 8009648:	2f04      	cmp	r7, #4
 800964a:	d806      	bhi.n	800965a <_strtod_l+0x102>
 800964c:	e8df f007 	tbb	[pc, r7]
 8009650:	1714030a 	.word	0x1714030a
 8009654:	0a          	.byte	0x0a
 8009655:	00          	.byte	0x00
 8009656:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800965a:	0728      	lsls	r0, r5, #28
 800965c:	d5c0      	bpl.n	80095e0 <_strtod_l+0x88>
 800965e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009662:	e7bd      	b.n	80095e0 <_strtod_l+0x88>
 8009664:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009668:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800966a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800966e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009672:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009676:	e7f0      	b.n	800965a <_strtod_l+0x102>
 8009678:	f8df b180 	ldr.w	fp, [pc, #384]	; 80097fc <_strtod_l+0x2a4>
 800967c:	e7ed      	b.n	800965a <_strtod_l+0x102>
 800967e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009682:	f04f 3aff 	mov.w	sl, #4294967295
 8009686:	e7e8      	b.n	800965a <_strtod_l+0x102>
 8009688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800968a:	1c5a      	adds	r2, r3, #1
 800968c:	9217      	str	r2, [sp, #92]	; 0x5c
 800968e:	785b      	ldrb	r3, [r3, #1]
 8009690:	2b30      	cmp	r3, #48	; 0x30
 8009692:	d0f9      	beq.n	8009688 <_strtod_l+0x130>
 8009694:	2b00      	cmp	r3, #0
 8009696:	d0a3      	beq.n	80095e0 <_strtod_l+0x88>
 8009698:	2301      	movs	r3, #1
 800969a:	f04f 0900 	mov.w	r9, #0
 800969e:	9304      	str	r3, [sp, #16]
 80096a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096a2:	9308      	str	r3, [sp, #32]
 80096a4:	f8cd 901c 	str.w	r9, [sp, #28]
 80096a8:	464f      	mov	r7, r9
 80096aa:	220a      	movs	r2, #10
 80096ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80096ae:	7806      	ldrb	r6, [r0, #0]
 80096b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80096b4:	b2d9      	uxtb	r1, r3
 80096b6:	2909      	cmp	r1, #9
 80096b8:	d92a      	bls.n	8009710 <_strtod_l+0x1b8>
 80096ba:	9905      	ldr	r1, [sp, #20]
 80096bc:	462a      	mov	r2, r5
 80096be:	f7ff ff19 	bl	80094f4 <strncmp>
 80096c2:	b398      	cbz	r0, 800972c <_strtod_l+0x1d4>
 80096c4:	2000      	movs	r0, #0
 80096c6:	4632      	mov	r2, r6
 80096c8:	463d      	mov	r5, r7
 80096ca:	9005      	str	r0, [sp, #20]
 80096cc:	4603      	mov	r3, r0
 80096ce:	2a65      	cmp	r2, #101	; 0x65
 80096d0:	d001      	beq.n	80096d6 <_strtod_l+0x17e>
 80096d2:	2a45      	cmp	r2, #69	; 0x45
 80096d4:	d118      	bne.n	8009708 <_strtod_l+0x1b0>
 80096d6:	b91d      	cbnz	r5, 80096e0 <_strtod_l+0x188>
 80096d8:	9a04      	ldr	r2, [sp, #16]
 80096da:	4302      	orrs	r2, r0
 80096dc:	d09e      	beq.n	800961c <_strtod_l+0xc4>
 80096de:	2500      	movs	r5, #0
 80096e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80096e4:	f108 0201 	add.w	r2, r8, #1
 80096e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80096ea:	f898 2001 	ldrb.w	r2, [r8, #1]
 80096ee:	2a2b      	cmp	r2, #43	; 0x2b
 80096f0:	d075      	beq.n	80097de <_strtod_l+0x286>
 80096f2:	2a2d      	cmp	r2, #45	; 0x2d
 80096f4:	d07b      	beq.n	80097ee <_strtod_l+0x296>
 80096f6:	f04f 0c00 	mov.w	ip, #0
 80096fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80096fe:	2909      	cmp	r1, #9
 8009700:	f240 8082 	bls.w	8009808 <_strtod_l+0x2b0>
 8009704:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009708:	2600      	movs	r6, #0
 800970a:	e09d      	b.n	8009848 <_strtod_l+0x2f0>
 800970c:	2300      	movs	r3, #0
 800970e:	e7c4      	b.n	800969a <_strtod_l+0x142>
 8009710:	2f08      	cmp	r7, #8
 8009712:	bfd8      	it	le
 8009714:	9907      	ldrle	r1, [sp, #28]
 8009716:	f100 0001 	add.w	r0, r0, #1
 800971a:	bfda      	itte	le
 800971c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009720:	9307      	strle	r3, [sp, #28]
 8009722:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009726:	3701      	adds	r7, #1
 8009728:	9017      	str	r0, [sp, #92]	; 0x5c
 800972a:	e7bf      	b.n	80096ac <_strtod_l+0x154>
 800972c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800972e:	195a      	adds	r2, r3, r5
 8009730:	9217      	str	r2, [sp, #92]	; 0x5c
 8009732:	5d5a      	ldrb	r2, [r3, r5]
 8009734:	2f00      	cmp	r7, #0
 8009736:	d037      	beq.n	80097a8 <_strtod_l+0x250>
 8009738:	9005      	str	r0, [sp, #20]
 800973a:	463d      	mov	r5, r7
 800973c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009740:	2b09      	cmp	r3, #9
 8009742:	d912      	bls.n	800976a <_strtod_l+0x212>
 8009744:	2301      	movs	r3, #1
 8009746:	e7c2      	b.n	80096ce <_strtod_l+0x176>
 8009748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800974a:	1c5a      	adds	r2, r3, #1
 800974c:	9217      	str	r2, [sp, #92]	; 0x5c
 800974e:	785a      	ldrb	r2, [r3, #1]
 8009750:	3001      	adds	r0, #1
 8009752:	2a30      	cmp	r2, #48	; 0x30
 8009754:	d0f8      	beq.n	8009748 <_strtod_l+0x1f0>
 8009756:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800975a:	2b08      	cmp	r3, #8
 800975c:	f200 84d9 	bhi.w	800a112 <_strtod_l+0xbba>
 8009760:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009762:	9005      	str	r0, [sp, #20]
 8009764:	2000      	movs	r0, #0
 8009766:	9308      	str	r3, [sp, #32]
 8009768:	4605      	mov	r5, r0
 800976a:	3a30      	subs	r2, #48	; 0x30
 800976c:	f100 0301 	add.w	r3, r0, #1
 8009770:	d014      	beq.n	800979c <_strtod_l+0x244>
 8009772:	9905      	ldr	r1, [sp, #20]
 8009774:	4419      	add	r1, r3
 8009776:	9105      	str	r1, [sp, #20]
 8009778:	462b      	mov	r3, r5
 800977a:	eb00 0e05 	add.w	lr, r0, r5
 800977e:	210a      	movs	r1, #10
 8009780:	4573      	cmp	r3, lr
 8009782:	d113      	bne.n	80097ac <_strtod_l+0x254>
 8009784:	182b      	adds	r3, r5, r0
 8009786:	2b08      	cmp	r3, #8
 8009788:	f105 0501 	add.w	r5, r5, #1
 800978c:	4405      	add	r5, r0
 800978e:	dc1c      	bgt.n	80097ca <_strtod_l+0x272>
 8009790:	9907      	ldr	r1, [sp, #28]
 8009792:	230a      	movs	r3, #10
 8009794:	fb03 2301 	mla	r3, r3, r1, r2
 8009798:	9307      	str	r3, [sp, #28]
 800979a:	2300      	movs	r3, #0
 800979c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800979e:	1c51      	adds	r1, r2, #1
 80097a0:	9117      	str	r1, [sp, #92]	; 0x5c
 80097a2:	7852      	ldrb	r2, [r2, #1]
 80097a4:	4618      	mov	r0, r3
 80097a6:	e7c9      	b.n	800973c <_strtod_l+0x1e4>
 80097a8:	4638      	mov	r0, r7
 80097aa:	e7d2      	b.n	8009752 <_strtod_l+0x1fa>
 80097ac:	2b08      	cmp	r3, #8
 80097ae:	dc04      	bgt.n	80097ba <_strtod_l+0x262>
 80097b0:	9e07      	ldr	r6, [sp, #28]
 80097b2:	434e      	muls	r6, r1
 80097b4:	9607      	str	r6, [sp, #28]
 80097b6:	3301      	adds	r3, #1
 80097b8:	e7e2      	b.n	8009780 <_strtod_l+0x228>
 80097ba:	f103 0c01 	add.w	ip, r3, #1
 80097be:	f1bc 0f10 	cmp.w	ip, #16
 80097c2:	bfd8      	it	le
 80097c4:	fb01 f909 	mulle.w	r9, r1, r9
 80097c8:	e7f5      	b.n	80097b6 <_strtod_l+0x25e>
 80097ca:	2d10      	cmp	r5, #16
 80097cc:	bfdc      	itt	le
 80097ce:	230a      	movle	r3, #10
 80097d0:	fb03 2909 	mlale	r9, r3, r9, r2
 80097d4:	e7e1      	b.n	800979a <_strtod_l+0x242>
 80097d6:	2300      	movs	r3, #0
 80097d8:	9305      	str	r3, [sp, #20]
 80097da:	2301      	movs	r3, #1
 80097dc:	e77c      	b.n	80096d8 <_strtod_l+0x180>
 80097de:	f04f 0c00 	mov.w	ip, #0
 80097e2:	f108 0202 	add.w	r2, r8, #2
 80097e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80097e8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80097ec:	e785      	b.n	80096fa <_strtod_l+0x1a2>
 80097ee:	f04f 0c01 	mov.w	ip, #1
 80097f2:	e7f6      	b.n	80097e2 <_strtod_l+0x28a>
 80097f4:	0800c3f0 	.word	0x0800c3f0
 80097f8:	0800c328 	.word	0x0800c328
 80097fc:	7ff00000 	.word	0x7ff00000
 8009800:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009802:	1c51      	adds	r1, r2, #1
 8009804:	9117      	str	r1, [sp, #92]	; 0x5c
 8009806:	7852      	ldrb	r2, [r2, #1]
 8009808:	2a30      	cmp	r2, #48	; 0x30
 800980a:	d0f9      	beq.n	8009800 <_strtod_l+0x2a8>
 800980c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009810:	2908      	cmp	r1, #8
 8009812:	f63f af79 	bhi.w	8009708 <_strtod_l+0x1b0>
 8009816:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800981a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800981c:	9206      	str	r2, [sp, #24]
 800981e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009820:	1c51      	adds	r1, r2, #1
 8009822:	9117      	str	r1, [sp, #92]	; 0x5c
 8009824:	7852      	ldrb	r2, [r2, #1]
 8009826:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800982a:	2e09      	cmp	r6, #9
 800982c:	d937      	bls.n	800989e <_strtod_l+0x346>
 800982e:	9e06      	ldr	r6, [sp, #24]
 8009830:	1b89      	subs	r1, r1, r6
 8009832:	2908      	cmp	r1, #8
 8009834:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009838:	dc02      	bgt.n	8009840 <_strtod_l+0x2e8>
 800983a:	4576      	cmp	r6, lr
 800983c:	bfa8      	it	ge
 800983e:	4676      	movge	r6, lr
 8009840:	f1bc 0f00 	cmp.w	ip, #0
 8009844:	d000      	beq.n	8009848 <_strtod_l+0x2f0>
 8009846:	4276      	negs	r6, r6
 8009848:	2d00      	cmp	r5, #0
 800984a:	d14d      	bne.n	80098e8 <_strtod_l+0x390>
 800984c:	9904      	ldr	r1, [sp, #16]
 800984e:	4301      	orrs	r1, r0
 8009850:	f47f aec6 	bne.w	80095e0 <_strtod_l+0x88>
 8009854:	2b00      	cmp	r3, #0
 8009856:	f47f aee1 	bne.w	800961c <_strtod_l+0xc4>
 800985a:	2a69      	cmp	r2, #105	; 0x69
 800985c:	d027      	beq.n	80098ae <_strtod_l+0x356>
 800985e:	dc24      	bgt.n	80098aa <_strtod_l+0x352>
 8009860:	2a49      	cmp	r2, #73	; 0x49
 8009862:	d024      	beq.n	80098ae <_strtod_l+0x356>
 8009864:	2a4e      	cmp	r2, #78	; 0x4e
 8009866:	f47f aed9 	bne.w	800961c <_strtod_l+0xc4>
 800986a:	499f      	ldr	r1, [pc, #636]	; (8009ae8 <_strtod_l+0x590>)
 800986c:	a817      	add	r0, sp, #92	; 0x5c
 800986e:	f000 ff45 	bl	800a6fc <__match>
 8009872:	2800      	cmp	r0, #0
 8009874:	f43f aed2 	beq.w	800961c <_strtod_l+0xc4>
 8009878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	2b28      	cmp	r3, #40	; 0x28
 800987e:	d12d      	bne.n	80098dc <_strtod_l+0x384>
 8009880:	499a      	ldr	r1, [pc, #616]	; (8009aec <_strtod_l+0x594>)
 8009882:	aa1a      	add	r2, sp, #104	; 0x68
 8009884:	a817      	add	r0, sp, #92	; 0x5c
 8009886:	f000 ff4d 	bl	800a724 <__hexnan>
 800988a:	2805      	cmp	r0, #5
 800988c:	d126      	bne.n	80098dc <_strtod_l+0x384>
 800988e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009890:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009894:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009898:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800989c:	e6a0      	b.n	80095e0 <_strtod_l+0x88>
 800989e:	210a      	movs	r1, #10
 80098a0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80098a4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80098a8:	e7b9      	b.n	800981e <_strtod_l+0x2c6>
 80098aa:	2a6e      	cmp	r2, #110	; 0x6e
 80098ac:	e7db      	b.n	8009866 <_strtod_l+0x30e>
 80098ae:	4990      	ldr	r1, [pc, #576]	; (8009af0 <_strtod_l+0x598>)
 80098b0:	a817      	add	r0, sp, #92	; 0x5c
 80098b2:	f000 ff23 	bl	800a6fc <__match>
 80098b6:	2800      	cmp	r0, #0
 80098b8:	f43f aeb0 	beq.w	800961c <_strtod_l+0xc4>
 80098bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098be:	498d      	ldr	r1, [pc, #564]	; (8009af4 <_strtod_l+0x59c>)
 80098c0:	3b01      	subs	r3, #1
 80098c2:	a817      	add	r0, sp, #92	; 0x5c
 80098c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80098c6:	f000 ff19 	bl	800a6fc <__match>
 80098ca:	b910      	cbnz	r0, 80098d2 <_strtod_l+0x37a>
 80098cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098ce:	3301      	adds	r3, #1
 80098d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80098d2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009b04 <_strtod_l+0x5ac>
 80098d6:	f04f 0a00 	mov.w	sl, #0
 80098da:	e681      	b.n	80095e0 <_strtod_l+0x88>
 80098dc:	4886      	ldr	r0, [pc, #536]	; (8009af8 <_strtod_l+0x5a0>)
 80098de:	f001 fd3b 	bl	800b358 <nan>
 80098e2:	ec5b ab10 	vmov	sl, fp, d0
 80098e6:	e67b      	b.n	80095e0 <_strtod_l+0x88>
 80098e8:	9b05      	ldr	r3, [sp, #20]
 80098ea:	9807      	ldr	r0, [sp, #28]
 80098ec:	1af3      	subs	r3, r6, r3
 80098ee:	2f00      	cmp	r7, #0
 80098f0:	bf08      	it	eq
 80098f2:	462f      	moveq	r7, r5
 80098f4:	2d10      	cmp	r5, #16
 80098f6:	9306      	str	r3, [sp, #24]
 80098f8:	46a8      	mov	r8, r5
 80098fa:	bfa8      	it	ge
 80098fc:	f04f 0810 	movge.w	r8, #16
 8009900:	f7f6 fe00 	bl	8000504 <__aeabi_ui2d>
 8009904:	2d09      	cmp	r5, #9
 8009906:	4682      	mov	sl, r0
 8009908:	468b      	mov	fp, r1
 800990a:	dd13      	ble.n	8009934 <_strtod_l+0x3dc>
 800990c:	4b7b      	ldr	r3, [pc, #492]	; (8009afc <_strtod_l+0x5a4>)
 800990e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009912:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009916:	f7f6 fe6f 	bl	80005f8 <__aeabi_dmul>
 800991a:	4682      	mov	sl, r0
 800991c:	4648      	mov	r0, r9
 800991e:	468b      	mov	fp, r1
 8009920:	f7f6 fdf0 	bl	8000504 <__aeabi_ui2d>
 8009924:	4602      	mov	r2, r0
 8009926:	460b      	mov	r3, r1
 8009928:	4650      	mov	r0, sl
 800992a:	4659      	mov	r1, fp
 800992c:	f7f6 fcae 	bl	800028c <__adddf3>
 8009930:	4682      	mov	sl, r0
 8009932:	468b      	mov	fp, r1
 8009934:	2d0f      	cmp	r5, #15
 8009936:	dc38      	bgt.n	80099aa <_strtod_l+0x452>
 8009938:	9b06      	ldr	r3, [sp, #24]
 800993a:	2b00      	cmp	r3, #0
 800993c:	f43f ae50 	beq.w	80095e0 <_strtod_l+0x88>
 8009940:	dd24      	ble.n	800998c <_strtod_l+0x434>
 8009942:	2b16      	cmp	r3, #22
 8009944:	dc0b      	bgt.n	800995e <_strtod_l+0x406>
 8009946:	496d      	ldr	r1, [pc, #436]	; (8009afc <_strtod_l+0x5a4>)
 8009948:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800994c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009950:	4652      	mov	r2, sl
 8009952:	465b      	mov	r3, fp
 8009954:	f7f6 fe50 	bl	80005f8 <__aeabi_dmul>
 8009958:	4682      	mov	sl, r0
 800995a:	468b      	mov	fp, r1
 800995c:	e640      	b.n	80095e0 <_strtod_l+0x88>
 800995e:	9a06      	ldr	r2, [sp, #24]
 8009960:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009964:	4293      	cmp	r3, r2
 8009966:	db20      	blt.n	80099aa <_strtod_l+0x452>
 8009968:	4c64      	ldr	r4, [pc, #400]	; (8009afc <_strtod_l+0x5a4>)
 800996a:	f1c5 050f 	rsb	r5, r5, #15
 800996e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009972:	4652      	mov	r2, sl
 8009974:	465b      	mov	r3, fp
 8009976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800997a:	f7f6 fe3d 	bl	80005f8 <__aeabi_dmul>
 800997e:	9b06      	ldr	r3, [sp, #24]
 8009980:	1b5d      	subs	r5, r3, r5
 8009982:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009986:	e9d4 2300 	ldrd	r2, r3, [r4]
 800998a:	e7e3      	b.n	8009954 <_strtod_l+0x3fc>
 800998c:	9b06      	ldr	r3, [sp, #24]
 800998e:	3316      	adds	r3, #22
 8009990:	db0b      	blt.n	80099aa <_strtod_l+0x452>
 8009992:	9b05      	ldr	r3, [sp, #20]
 8009994:	1b9e      	subs	r6, r3, r6
 8009996:	4b59      	ldr	r3, [pc, #356]	; (8009afc <_strtod_l+0x5a4>)
 8009998:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800999c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80099a0:	4650      	mov	r0, sl
 80099a2:	4659      	mov	r1, fp
 80099a4:	f7f6 ff52 	bl	800084c <__aeabi_ddiv>
 80099a8:	e7d6      	b.n	8009958 <_strtod_l+0x400>
 80099aa:	9b06      	ldr	r3, [sp, #24]
 80099ac:	eba5 0808 	sub.w	r8, r5, r8
 80099b0:	4498      	add	r8, r3
 80099b2:	f1b8 0f00 	cmp.w	r8, #0
 80099b6:	dd74      	ble.n	8009aa2 <_strtod_l+0x54a>
 80099b8:	f018 030f 	ands.w	r3, r8, #15
 80099bc:	d00a      	beq.n	80099d4 <_strtod_l+0x47c>
 80099be:	494f      	ldr	r1, [pc, #316]	; (8009afc <_strtod_l+0x5a4>)
 80099c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099c4:	4652      	mov	r2, sl
 80099c6:	465b      	mov	r3, fp
 80099c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099cc:	f7f6 fe14 	bl	80005f8 <__aeabi_dmul>
 80099d0:	4682      	mov	sl, r0
 80099d2:	468b      	mov	fp, r1
 80099d4:	f038 080f 	bics.w	r8, r8, #15
 80099d8:	d04f      	beq.n	8009a7a <_strtod_l+0x522>
 80099da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80099de:	dd22      	ble.n	8009a26 <_strtod_l+0x4ce>
 80099e0:	2500      	movs	r5, #0
 80099e2:	462e      	mov	r6, r5
 80099e4:	9507      	str	r5, [sp, #28]
 80099e6:	9505      	str	r5, [sp, #20]
 80099e8:	2322      	movs	r3, #34	; 0x22
 80099ea:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009b04 <_strtod_l+0x5ac>
 80099ee:	6023      	str	r3, [r4, #0]
 80099f0:	f04f 0a00 	mov.w	sl, #0
 80099f4:	9b07      	ldr	r3, [sp, #28]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f43f adf2 	beq.w	80095e0 <_strtod_l+0x88>
 80099fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80099fe:	4620      	mov	r0, r4
 8009a00:	f000 ff7e 	bl	800a900 <_Bfree>
 8009a04:	9905      	ldr	r1, [sp, #20]
 8009a06:	4620      	mov	r0, r4
 8009a08:	f000 ff7a 	bl	800a900 <_Bfree>
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f000 ff76 	bl	800a900 <_Bfree>
 8009a14:	9907      	ldr	r1, [sp, #28]
 8009a16:	4620      	mov	r0, r4
 8009a18:	f000 ff72 	bl	800a900 <_Bfree>
 8009a1c:	4629      	mov	r1, r5
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f000 ff6e 	bl	800a900 <_Bfree>
 8009a24:	e5dc      	b.n	80095e0 <_strtod_l+0x88>
 8009a26:	4b36      	ldr	r3, [pc, #216]	; (8009b00 <_strtod_l+0x5a8>)
 8009a28:	9304      	str	r3, [sp, #16]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009a30:	4650      	mov	r0, sl
 8009a32:	4659      	mov	r1, fp
 8009a34:	4699      	mov	r9, r3
 8009a36:	f1b8 0f01 	cmp.w	r8, #1
 8009a3a:	dc21      	bgt.n	8009a80 <_strtod_l+0x528>
 8009a3c:	b10b      	cbz	r3, 8009a42 <_strtod_l+0x4ea>
 8009a3e:	4682      	mov	sl, r0
 8009a40:	468b      	mov	fp, r1
 8009a42:	4b2f      	ldr	r3, [pc, #188]	; (8009b00 <_strtod_l+0x5a8>)
 8009a44:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009a48:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009a4c:	4652      	mov	r2, sl
 8009a4e:	465b      	mov	r3, fp
 8009a50:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009a54:	f7f6 fdd0 	bl	80005f8 <__aeabi_dmul>
 8009a58:	4b2a      	ldr	r3, [pc, #168]	; (8009b04 <_strtod_l+0x5ac>)
 8009a5a:	460a      	mov	r2, r1
 8009a5c:	400b      	ands	r3, r1
 8009a5e:	492a      	ldr	r1, [pc, #168]	; (8009b08 <_strtod_l+0x5b0>)
 8009a60:	428b      	cmp	r3, r1
 8009a62:	4682      	mov	sl, r0
 8009a64:	d8bc      	bhi.n	80099e0 <_strtod_l+0x488>
 8009a66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009a6a:	428b      	cmp	r3, r1
 8009a6c:	bf86      	itte	hi
 8009a6e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009b0c <_strtod_l+0x5b4>
 8009a72:	f04f 3aff 	movhi.w	sl, #4294967295
 8009a76:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	9304      	str	r3, [sp, #16]
 8009a7e:	e084      	b.n	8009b8a <_strtod_l+0x632>
 8009a80:	f018 0f01 	tst.w	r8, #1
 8009a84:	d005      	beq.n	8009a92 <_strtod_l+0x53a>
 8009a86:	9b04      	ldr	r3, [sp, #16]
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	f7f6 fdb4 	bl	80005f8 <__aeabi_dmul>
 8009a90:	2301      	movs	r3, #1
 8009a92:	9a04      	ldr	r2, [sp, #16]
 8009a94:	3208      	adds	r2, #8
 8009a96:	f109 0901 	add.w	r9, r9, #1
 8009a9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009a9e:	9204      	str	r2, [sp, #16]
 8009aa0:	e7c9      	b.n	8009a36 <_strtod_l+0x4de>
 8009aa2:	d0ea      	beq.n	8009a7a <_strtod_l+0x522>
 8009aa4:	f1c8 0800 	rsb	r8, r8, #0
 8009aa8:	f018 020f 	ands.w	r2, r8, #15
 8009aac:	d00a      	beq.n	8009ac4 <_strtod_l+0x56c>
 8009aae:	4b13      	ldr	r3, [pc, #76]	; (8009afc <_strtod_l+0x5a4>)
 8009ab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ab4:	4650      	mov	r0, sl
 8009ab6:	4659      	mov	r1, fp
 8009ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abc:	f7f6 fec6 	bl	800084c <__aeabi_ddiv>
 8009ac0:	4682      	mov	sl, r0
 8009ac2:	468b      	mov	fp, r1
 8009ac4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009ac8:	d0d7      	beq.n	8009a7a <_strtod_l+0x522>
 8009aca:	f1b8 0f1f 	cmp.w	r8, #31
 8009ace:	dd1f      	ble.n	8009b10 <_strtod_l+0x5b8>
 8009ad0:	2500      	movs	r5, #0
 8009ad2:	462e      	mov	r6, r5
 8009ad4:	9507      	str	r5, [sp, #28]
 8009ad6:	9505      	str	r5, [sp, #20]
 8009ad8:	2322      	movs	r3, #34	; 0x22
 8009ada:	f04f 0a00 	mov.w	sl, #0
 8009ade:	f04f 0b00 	mov.w	fp, #0
 8009ae2:	6023      	str	r3, [r4, #0]
 8009ae4:	e786      	b.n	80099f4 <_strtod_l+0x49c>
 8009ae6:	bf00      	nop
 8009ae8:	0800c325 	.word	0x0800c325
 8009aec:	0800c33c 	.word	0x0800c33c
 8009af0:	0800c31c 	.word	0x0800c31c
 8009af4:	0800c31f 	.word	0x0800c31f
 8009af8:	0800c5af 	.word	0x0800c5af
 8009afc:	0800c4a0 	.word	0x0800c4a0
 8009b00:	0800c478 	.word	0x0800c478
 8009b04:	7ff00000 	.word	0x7ff00000
 8009b08:	7ca00000 	.word	0x7ca00000
 8009b0c:	7fefffff 	.word	0x7fefffff
 8009b10:	f018 0310 	ands.w	r3, r8, #16
 8009b14:	bf18      	it	ne
 8009b16:	236a      	movne	r3, #106	; 0x6a
 8009b18:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009ec8 <_strtod_l+0x970>
 8009b1c:	9304      	str	r3, [sp, #16]
 8009b1e:	4650      	mov	r0, sl
 8009b20:	4659      	mov	r1, fp
 8009b22:	2300      	movs	r3, #0
 8009b24:	f018 0f01 	tst.w	r8, #1
 8009b28:	d004      	beq.n	8009b34 <_strtod_l+0x5dc>
 8009b2a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009b2e:	f7f6 fd63 	bl	80005f8 <__aeabi_dmul>
 8009b32:	2301      	movs	r3, #1
 8009b34:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009b38:	f109 0908 	add.w	r9, r9, #8
 8009b3c:	d1f2      	bne.n	8009b24 <_strtod_l+0x5cc>
 8009b3e:	b10b      	cbz	r3, 8009b44 <_strtod_l+0x5ec>
 8009b40:	4682      	mov	sl, r0
 8009b42:	468b      	mov	fp, r1
 8009b44:	9b04      	ldr	r3, [sp, #16]
 8009b46:	b1c3      	cbz	r3, 8009b7a <_strtod_l+0x622>
 8009b48:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009b4c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	4659      	mov	r1, fp
 8009b54:	dd11      	ble.n	8009b7a <_strtod_l+0x622>
 8009b56:	2b1f      	cmp	r3, #31
 8009b58:	f340 8124 	ble.w	8009da4 <_strtod_l+0x84c>
 8009b5c:	2b34      	cmp	r3, #52	; 0x34
 8009b5e:	bfde      	ittt	le
 8009b60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009b64:	f04f 33ff 	movle.w	r3, #4294967295
 8009b68:	fa03 f202 	lslle.w	r2, r3, r2
 8009b6c:	f04f 0a00 	mov.w	sl, #0
 8009b70:	bfcc      	ite	gt
 8009b72:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009b76:	ea02 0b01 	andle.w	fp, r2, r1
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	4650      	mov	r0, sl
 8009b80:	4659      	mov	r1, fp
 8009b82:	f7f6 ffa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d1a2      	bne.n	8009ad0 <_strtod_l+0x578>
 8009b8a:	9b07      	ldr	r3, [sp, #28]
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	9908      	ldr	r1, [sp, #32]
 8009b90:	462b      	mov	r3, r5
 8009b92:	463a      	mov	r2, r7
 8009b94:	4620      	mov	r0, r4
 8009b96:	f000 ff1b 	bl	800a9d0 <__s2b>
 8009b9a:	9007      	str	r0, [sp, #28]
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	f43f af1f 	beq.w	80099e0 <_strtod_l+0x488>
 8009ba2:	9b05      	ldr	r3, [sp, #20]
 8009ba4:	1b9e      	subs	r6, r3, r6
 8009ba6:	9b06      	ldr	r3, [sp, #24]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	bfb4      	ite	lt
 8009bac:	4633      	movlt	r3, r6
 8009bae:	2300      	movge	r3, #0
 8009bb0:	930c      	str	r3, [sp, #48]	; 0x30
 8009bb2:	9b06      	ldr	r3, [sp, #24]
 8009bb4:	2500      	movs	r5, #0
 8009bb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009bba:	9312      	str	r3, [sp, #72]	; 0x48
 8009bbc:	462e      	mov	r6, r5
 8009bbe:	9b07      	ldr	r3, [sp, #28]
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	6859      	ldr	r1, [r3, #4]
 8009bc4:	f000 fe5c 	bl	800a880 <_Balloc>
 8009bc8:	9005      	str	r0, [sp, #20]
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	f43f af0c 	beq.w	80099e8 <_strtod_l+0x490>
 8009bd0:	9b07      	ldr	r3, [sp, #28]
 8009bd2:	691a      	ldr	r2, [r3, #16]
 8009bd4:	3202      	adds	r2, #2
 8009bd6:	f103 010c 	add.w	r1, r3, #12
 8009bda:	0092      	lsls	r2, r2, #2
 8009bdc:	300c      	adds	r0, #12
 8009bde:	f7ff fc73 	bl	80094c8 <memcpy>
 8009be2:	ec4b ab10 	vmov	d0, sl, fp
 8009be6:	aa1a      	add	r2, sp, #104	; 0x68
 8009be8:	a919      	add	r1, sp, #100	; 0x64
 8009bea:	4620      	mov	r0, r4
 8009bec:	f001 fa36 	bl	800b05c <__d2b>
 8009bf0:	ec4b ab18 	vmov	d8, sl, fp
 8009bf4:	9018      	str	r0, [sp, #96]	; 0x60
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	f43f aef6 	beq.w	80099e8 <_strtod_l+0x490>
 8009bfc:	2101      	movs	r1, #1
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f000 ff80 	bl	800ab04 <__i2b>
 8009c04:	4606      	mov	r6, r0
 8009c06:	2800      	cmp	r0, #0
 8009c08:	f43f aeee 	beq.w	80099e8 <_strtod_l+0x490>
 8009c0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c0e:	9904      	ldr	r1, [sp, #16]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	bfab      	itete	ge
 8009c14:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009c16:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009c18:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009c1a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009c1e:	bfac      	ite	ge
 8009c20:	eb03 0902 	addge.w	r9, r3, r2
 8009c24:	1ad7      	sublt	r7, r2, r3
 8009c26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009c28:	eba3 0801 	sub.w	r8, r3, r1
 8009c2c:	4490      	add	r8, r2
 8009c2e:	4ba1      	ldr	r3, [pc, #644]	; (8009eb4 <_strtod_l+0x95c>)
 8009c30:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c34:	4598      	cmp	r8, r3
 8009c36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009c3a:	f280 80c7 	bge.w	8009dcc <_strtod_l+0x874>
 8009c3e:	eba3 0308 	sub.w	r3, r3, r8
 8009c42:	2b1f      	cmp	r3, #31
 8009c44:	eba2 0203 	sub.w	r2, r2, r3
 8009c48:	f04f 0101 	mov.w	r1, #1
 8009c4c:	f300 80b1 	bgt.w	8009db2 <_strtod_l+0x85a>
 8009c50:	fa01 f303 	lsl.w	r3, r1, r3
 8009c54:	930d      	str	r3, [sp, #52]	; 0x34
 8009c56:	2300      	movs	r3, #0
 8009c58:	9308      	str	r3, [sp, #32]
 8009c5a:	eb09 0802 	add.w	r8, r9, r2
 8009c5e:	9b04      	ldr	r3, [sp, #16]
 8009c60:	45c1      	cmp	r9, r8
 8009c62:	4417      	add	r7, r2
 8009c64:	441f      	add	r7, r3
 8009c66:	464b      	mov	r3, r9
 8009c68:	bfa8      	it	ge
 8009c6a:	4643      	movge	r3, r8
 8009c6c:	42bb      	cmp	r3, r7
 8009c6e:	bfa8      	it	ge
 8009c70:	463b      	movge	r3, r7
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	bfc2      	ittt	gt
 8009c76:	eba8 0803 	subgt.w	r8, r8, r3
 8009c7a:	1aff      	subgt	r7, r7, r3
 8009c7c:	eba9 0903 	subgt.w	r9, r9, r3
 8009c80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	dd17      	ble.n	8009cb6 <_strtod_l+0x75e>
 8009c86:	4631      	mov	r1, r6
 8009c88:	461a      	mov	r2, r3
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	f000 fffa 	bl	800ac84 <__pow5mult>
 8009c90:	4606      	mov	r6, r0
 8009c92:	2800      	cmp	r0, #0
 8009c94:	f43f aea8 	beq.w	80099e8 <_strtod_l+0x490>
 8009c98:	4601      	mov	r1, r0
 8009c9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f000 ff47 	bl	800ab30 <__multiply>
 8009ca2:	900b      	str	r0, [sp, #44]	; 0x2c
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	f43f ae9f 	beq.w	80099e8 <_strtod_l+0x490>
 8009caa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009cac:	4620      	mov	r0, r4
 8009cae:	f000 fe27 	bl	800a900 <_Bfree>
 8009cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cb4:	9318      	str	r3, [sp, #96]	; 0x60
 8009cb6:	f1b8 0f00 	cmp.w	r8, #0
 8009cba:	f300 808c 	bgt.w	8009dd6 <_strtod_l+0x87e>
 8009cbe:	9b06      	ldr	r3, [sp, #24]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	dd08      	ble.n	8009cd6 <_strtod_l+0x77e>
 8009cc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cc6:	9905      	ldr	r1, [sp, #20]
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f000 ffdb 	bl	800ac84 <__pow5mult>
 8009cce:	9005      	str	r0, [sp, #20]
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	f43f ae89 	beq.w	80099e8 <_strtod_l+0x490>
 8009cd6:	2f00      	cmp	r7, #0
 8009cd8:	dd08      	ble.n	8009cec <_strtod_l+0x794>
 8009cda:	9905      	ldr	r1, [sp, #20]
 8009cdc:	463a      	mov	r2, r7
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f001 f82a 	bl	800ad38 <__lshift>
 8009ce4:	9005      	str	r0, [sp, #20]
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	f43f ae7e 	beq.w	80099e8 <_strtod_l+0x490>
 8009cec:	f1b9 0f00 	cmp.w	r9, #0
 8009cf0:	dd08      	ble.n	8009d04 <_strtod_l+0x7ac>
 8009cf2:	4631      	mov	r1, r6
 8009cf4:	464a      	mov	r2, r9
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f001 f81e 	bl	800ad38 <__lshift>
 8009cfc:	4606      	mov	r6, r0
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	f43f ae72 	beq.w	80099e8 <_strtod_l+0x490>
 8009d04:	9a05      	ldr	r2, [sp, #20]
 8009d06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d08:	4620      	mov	r0, r4
 8009d0a:	f001 f8a1 	bl	800ae50 <__mdiff>
 8009d0e:	4605      	mov	r5, r0
 8009d10:	2800      	cmp	r0, #0
 8009d12:	f43f ae69 	beq.w	80099e8 <_strtod_l+0x490>
 8009d16:	68c3      	ldr	r3, [r0, #12]
 8009d18:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	60c3      	str	r3, [r0, #12]
 8009d1e:	4631      	mov	r1, r6
 8009d20:	f001 f87a 	bl	800ae18 <__mcmp>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	da60      	bge.n	8009dea <_strtod_l+0x892>
 8009d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d2a:	ea53 030a 	orrs.w	r3, r3, sl
 8009d2e:	f040 8082 	bne.w	8009e36 <_strtod_l+0x8de>
 8009d32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d17d      	bne.n	8009e36 <_strtod_l+0x8de>
 8009d3a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d3e:	0d1b      	lsrs	r3, r3, #20
 8009d40:	051b      	lsls	r3, r3, #20
 8009d42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009d46:	d976      	bls.n	8009e36 <_strtod_l+0x8de>
 8009d48:	696b      	ldr	r3, [r5, #20]
 8009d4a:	b913      	cbnz	r3, 8009d52 <_strtod_l+0x7fa>
 8009d4c:	692b      	ldr	r3, [r5, #16]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	dd71      	ble.n	8009e36 <_strtod_l+0x8de>
 8009d52:	4629      	mov	r1, r5
 8009d54:	2201      	movs	r2, #1
 8009d56:	4620      	mov	r0, r4
 8009d58:	f000 ffee 	bl	800ad38 <__lshift>
 8009d5c:	4631      	mov	r1, r6
 8009d5e:	4605      	mov	r5, r0
 8009d60:	f001 f85a 	bl	800ae18 <__mcmp>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	dd66      	ble.n	8009e36 <_strtod_l+0x8de>
 8009d68:	9904      	ldr	r1, [sp, #16]
 8009d6a:	4a53      	ldr	r2, [pc, #332]	; (8009eb8 <_strtod_l+0x960>)
 8009d6c:	465b      	mov	r3, fp
 8009d6e:	2900      	cmp	r1, #0
 8009d70:	f000 8081 	beq.w	8009e76 <_strtod_l+0x91e>
 8009d74:	ea02 010b 	and.w	r1, r2, fp
 8009d78:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009d7c:	dc7b      	bgt.n	8009e76 <_strtod_l+0x91e>
 8009d7e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009d82:	f77f aea9 	ble.w	8009ad8 <_strtod_l+0x580>
 8009d86:	4b4d      	ldr	r3, [pc, #308]	; (8009ebc <_strtod_l+0x964>)
 8009d88:	4650      	mov	r0, sl
 8009d8a:	4659      	mov	r1, fp
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f7f6 fc33 	bl	80005f8 <__aeabi_dmul>
 8009d92:	460b      	mov	r3, r1
 8009d94:	4303      	orrs	r3, r0
 8009d96:	bf08      	it	eq
 8009d98:	2322      	moveq	r3, #34	; 0x22
 8009d9a:	4682      	mov	sl, r0
 8009d9c:	468b      	mov	fp, r1
 8009d9e:	bf08      	it	eq
 8009da0:	6023      	streq	r3, [r4, #0]
 8009da2:	e62b      	b.n	80099fc <_strtod_l+0x4a4>
 8009da4:	f04f 32ff 	mov.w	r2, #4294967295
 8009da8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dac:	ea03 0a0a 	and.w	sl, r3, sl
 8009db0:	e6e3      	b.n	8009b7a <_strtod_l+0x622>
 8009db2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009db6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009dba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009dbe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009dc2:	fa01 f308 	lsl.w	r3, r1, r8
 8009dc6:	9308      	str	r3, [sp, #32]
 8009dc8:	910d      	str	r1, [sp, #52]	; 0x34
 8009dca:	e746      	b.n	8009c5a <_strtod_l+0x702>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	9308      	str	r3, [sp, #32]
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	930d      	str	r3, [sp, #52]	; 0x34
 8009dd4:	e741      	b.n	8009c5a <_strtod_l+0x702>
 8009dd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009dd8:	4642      	mov	r2, r8
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f000 ffac 	bl	800ad38 <__lshift>
 8009de0:	9018      	str	r0, [sp, #96]	; 0x60
 8009de2:	2800      	cmp	r0, #0
 8009de4:	f47f af6b 	bne.w	8009cbe <_strtod_l+0x766>
 8009de8:	e5fe      	b.n	80099e8 <_strtod_l+0x490>
 8009dea:	465f      	mov	r7, fp
 8009dec:	d16e      	bne.n	8009ecc <_strtod_l+0x974>
 8009dee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009df0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009df4:	b342      	cbz	r2, 8009e48 <_strtod_l+0x8f0>
 8009df6:	4a32      	ldr	r2, [pc, #200]	; (8009ec0 <_strtod_l+0x968>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d128      	bne.n	8009e4e <_strtod_l+0x8f6>
 8009dfc:	9b04      	ldr	r3, [sp, #16]
 8009dfe:	4651      	mov	r1, sl
 8009e00:	b1eb      	cbz	r3, 8009e3e <_strtod_l+0x8e6>
 8009e02:	4b2d      	ldr	r3, [pc, #180]	; (8009eb8 <_strtod_l+0x960>)
 8009e04:	403b      	ands	r3, r7
 8009e06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e0e:	d819      	bhi.n	8009e44 <_strtod_l+0x8ec>
 8009e10:	0d1b      	lsrs	r3, r3, #20
 8009e12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e16:	fa02 f303 	lsl.w	r3, r2, r3
 8009e1a:	4299      	cmp	r1, r3
 8009e1c:	d117      	bne.n	8009e4e <_strtod_l+0x8f6>
 8009e1e:	4b29      	ldr	r3, [pc, #164]	; (8009ec4 <_strtod_l+0x96c>)
 8009e20:	429f      	cmp	r7, r3
 8009e22:	d102      	bne.n	8009e2a <_strtod_l+0x8d2>
 8009e24:	3101      	adds	r1, #1
 8009e26:	f43f addf 	beq.w	80099e8 <_strtod_l+0x490>
 8009e2a:	4b23      	ldr	r3, [pc, #140]	; (8009eb8 <_strtod_l+0x960>)
 8009e2c:	403b      	ands	r3, r7
 8009e2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009e32:	f04f 0a00 	mov.w	sl, #0
 8009e36:	9b04      	ldr	r3, [sp, #16]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1a4      	bne.n	8009d86 <_strtod_l+0x82e>
 8009e3c:	e5de      	b.n	80099fc <_strtod_l+0x4a4>
 8009e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e42:	e7ea      	b.n	8009e1a <_strtod_l+0x8c2>
 8009e44:	4613      	mov	r3, r2
 8009e46:	e7e8      	b.n	8009e1a <_strtod_l+0x8c2>
 8009e48:	ea53 030a 	orrs.w	r3, r3, sl
 8009e4c:	d08c      	beq.n	8009d68 <_strtod_l+0x810>
 8009e4e:	9b08      	ldr	r3, [sp, #32]
 8009e50:	b1db      	cbz	r3, 8009e8a <_strtod_l+0x932>
 8009e52:	423b      	tst	r3, r7
 8009e54:	d0ef      	beq.n	8009e36 <_strtod_l+0x8de>
 8009e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e58:	9a04      	ldr	r2, [sp, #16]
 8009e5a:	4650      	mov	r0, sl
 8009e5c:	4659      	mov	r1, fp
 8009e5e:	b1c3      	cbz	r3, 8009e92 <_strtod_l+0x93a>
 8009e60:	f7ff fb5c 	bl	800951c <sulp>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	ec51 0b18 	vmov	r0, r1, d8
 8009e6c:	f7f6 fa0e 	bl	800028c <__adddf3>
 8009e70:	4682      	mov	sl, r0
 8009e72:	468b      	mov	fp, r1
 8009e74:	e7df      	b.n	8009e36 <_strtod_l+0x8de>
 8009e76:	4013      	ands	r3, r2
 8009e78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009e7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009e84:	f04f 3aff 	mov.w	sl, #4294967295
 8009e88:	e7d5      	b.n	8009e36 <_strtod_l+0x8de>
 8009e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e8c:	ea13 0f0a 	tst.w	r3, sl
 8009e90:	e7e0      	b.n	8009e54 <_strtod_l+0x8fc>
 8009e92:	f7ff fb43 	bl	800951c <sulp>
 8009e96:	4602      	mov	r2, r0
 8009e98:	460b      	mov	r3, r1
 8009e9a:	ec51 0b18 	vmov	r0, r1, d8
 8009e9e:	f7f6 f9f3 	bl	8000288 <__aeabi_dsub>
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	4682      	mov	sl, r0
 8009ea8:	468b      	mov	fp, r1
 8009eaa:	f7f6 fe0d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d0c1      	beq.n	8009e36 <_strtod_l+0x8de>
 8009eb2:	e611      	b.n	8009ad8 <_strtod_l+0x580>
 8009eb4:	fffffc02 	.word	0xfffffc02
 8009eb8:	7ff00000 	.word	0x7ff00000
 8009ebc:	39500000 	.word	0x39500000
 8009ec0:	000fffff 	.word	0x000fffff
 8009ec4:	7fefffff 	.word	0x7fefffff
 8009ec8:	0800c350 	.word	0x0800c350
 8009ecc:	4631      	mov	r1, r6
 8009ece:	4628      	mov	r0, r5
 8009ed0:	f001 f920 	bl	800b114 <__ratio>
 8009ed4:	ec59 8b10 	vmov	r8, r9, d0
 8009ed8:	ee10 0a10 	vmov	r0, s0
 8009edc:	2200      	movs	r2, #0
 8009ede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ee2:	4649      	mov	r1, r9
 8009ee4:	f7f6 fe04 	bl	8000af0 <__aeabi_dcmple>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	d07a      	beq.n	8009fe2 <_strtod_l+0xa8a>
 8009eec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d04a      	beq.n	8009f88 <_strtod_l+0xa30>
 8009ef2:	4b95      	ldr	r3, [pc, #596]	; (800a148 <_strtod_l+0xbf0>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009efa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a148 <_strtod_l+0xbf0>
 8009efe:	f04f 0800 	mov.w	r8, #0
 8009f02:	4b92      	ldr	r3, [pc, #584]	; (800a14c <_strtod_l+0xbf4>)
 8009f04:	403b      	ands	r3, r7
 8009f06:	930d      	str	r3, [sp, #52]	; 0x34
 8009f08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f0a:	4b91      	ldr	r3, [pc, #580]	; (800a150 <_strtod_l+0xbf8>)
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	f040 80b0 	bne.w	800a072 <_strtod_l+0xb1a>
 8009f12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f16:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009f1a:	ec4b ab10 	vmov	d0, sl, fp
 8009f1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f22:	f001 f81f 	bl	800af64 <__ulp>
 8009f26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f2a:	ec53 2b10 	vmov	r2, r3, d0
 8009f2e:	f7f6 fb63 	bl	80005f8 <__aeabi_dmul>
 8009f32:	4652      	mov	r2, sl
 8009f34:	465b      	mov	r3, fp
 8009f36:	f7f6 f9a9 	bl	800028c <__adddf3>
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4983      	ldr	r1, [pc, #524]	; (800a14c <_strtod_l+0xbf4>)
 8009f3e:	4a85      	ldr	r2, [pc, #532]	; (800a154 <_strtod_l+0xbfc>)
 8009f40:	4019      	ands	r1, r3
 8009f42:	4291      	cmp	r1, r2
 8009f44:	4682      	mov	sl, r0
 8009f46:	d960      	bls.n	800a00a <_strtod_l+0xab2>
 8009f48:	ee18 3a90 	vmov	r3, s17
 8009f4c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d104      	bne.n	8009f5e <_strtod_l+0xa06>
 8009f54:	ee18 3a10 	vmov	r3, s16
 8009f58:	3301      	adds	r3, #1
 8009f5a:	f43f ad45 	beq.w	80099e8 <_strtod_l+0x490>
 8009f5e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a160 <_strtod_l+0xc08>
 8009f62:	f04f 3aff 	mov.w	sl, #4294967295
 8009f66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f000 fcc9 	bl	800a900 <_Bfree>
 8009f6e:	9905      	ldr	r1, [sp, #20]
 8009f70:	4620      	mov	r0, r4
 8009f72:	f000 fcc5 	bl	800a900 <_Bfree>
 8009f76:	4631      	mov	r1, r6
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f000 fcc1 	bl	800a900 <_Bfree>
 8009f7e:	4629      	mov	r1, r5
 8009f80:	4620      	mov	r0, r4
 8009f82:	f000 fcbd 	bl	800a900 <_Bfree>
 8009f86:	e61a      	b.n	8009bbe <_strtod_l+0x666>
 8009f88:	f1ba 0f00 	cmp.w	sl, #0
 8009f8c:	d11b      	bne.n	8009fc6 <_strtod_l+0xa6e>
 8009f8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f92:	b9f3      	cbnz	r3, 8009fd2 <_strtod_l+0xa7a>
 8009f94:	4b6c      	ldr	r3, [pc, #432]	; (800a148 <_strtod_l+0xbf0>)
 8009f96:	2200      	movs	r2, #0
 8009f98:	4640      	mov	r0, r8
 8009f9a:	4649      	mov	r1, r9
 8009f9c:	f7f6 fd9e 	bl	8000adc <__aeabi_dcmplt>
 8009fa0:	b9d0      	cbnz	r0, 8009fd8 <_strtod_l+0xa80>
 8009fa2:	4640      	mov	r0, r8
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	4b6c      	ldr	r3, [pc, #432]	; (800a158 <_strtod_l+0xc00>)
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f7f6 fb25 	bl	80005f8 <__aeabi_dmul>
 8009fae:	4680      	mov	r8, r0
 8009fb0:	4689      	mov	r9, r1
 8009fb2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009fb6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009fba:	9315      	str	r3, [sp, #84]	; 0x54
 8009fbc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009fc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009fc4:	e79d      	b.n	8009f02 <_strtod_l+0x9aa>
 8009fc6:	f1ba 0f01 	cmp.w	sl, #1
 8009fca:	d102      	bne.n	8009fd2 <_strtod_l+0xa7a>
 8009fcc:	2f00      	cmp	r7, #0
 8009fce:	f43f ad83 	beq.w	8009ad8 <_strtod_l+0x580>
 8009fd2:	4b62      	ldr	r3, [pc, #392]	; (800a15c <_strtod_l+0xc04>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	e78e      	b.n	8009ef6 <_strtod_l+0x99e>
 8009fd8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a158 <_strtod_l+0xc00>
 8009fdc:	f04f 0800 	mov.w	r8, #0
 8009fe0:	e7e7      	b.n	8009fb2 <_strtod_l+0xa5a>
 8009fe2:	4b5d      	ldr	r3, [pc, #372]	; (800a158 <_strtod_l+0xc00>)
 8009fe4:	4640      	mov	r0, r8
 8009fe6:	4649      	mov	r1, r9
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f7f6 fb05 	bl	80005f8 <__aeabi_dmul>
 8009fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ff0:	4680      	mov	r8, r0
 8009ff2:	4689      	mov	r9, r1
 8009ff4:	b933      	cbnz	r3, 800a004 <_strtod_l+0xaac>
 8009ff6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ffa:	900e      	str	r0, [sp, #56]	; 0x38
 8009ffc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ffe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a002:	e7dd      	b.n	8009fc0 <_strtod_l+0xa68>
 800a004:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a008:	e7f9      	b.n	8009ffe <_strtod_l+0xaa6>
 800a00a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a00e:	9b04      	ldr	r3, [sp, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1a8      	bne.n	8009f66 <_strtod_l+0xa0e>
 800a014:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a018:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a01a:	0d1b      	lsrs	r3, r3, #20
 800a01c:	051b      	lsls	r3, r3, #20
 800a01e:	429a      	cmp	r2, r3
 800a020:	d1a1      	bne.n	8009f66 <_strtod_l+0xa0e>
 800a022:	4640      	mov	r0, r8
 800a024:	4649      	mov	r1, r9
 800a026:	f7f6 fe09 	bl	8000c3c <__aeabi_d2lz>
 800a02a:	f7f6 fab7 	bl	800059c <__aeabi_l2d>
 800a02e:	4602      	mov	r2, r0
 800a030:	460b      	mov	r3, r1
 800a032:	4640      	mov	r0, r8
 800a034:	4649      	mov	r1, r9
 800a036:	f7f6 f927 	bl	8000288 <__aeabi_dsub>
 800a03a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a03c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a040:	ea43 030a 	orr.w	r3, r3, sl
 800a044:	4313      	orrs	r3, r2
 800a046:	4680      	mov	r8, r0
 800a048:	4689      	mov	r9, r1
 800a04a:	d055      	beq.n	800a0f8 <_strtod_l+0xba0>
 800a04c:	a336      	add	r3, pc, #216	; (adr r3, 800a128 <_strtod_l+0xbd0>)
 800a04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a052:	f7f6 fd43 	bl	8000adc <__aeabi_dcmplt>
 800a056:	2800      	cmp	r0, #0
 800a058:	f47f acd0 	bne.w	80099fc <_strtod_l+0x4a4>
 800a05c:	a334      	add	r3, pc, #208	; (adr r3, 800a130 <_strtod_l+0xbd8>)
 800a05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a062:	4640      	mov	r0, r8
 800a064:	4649      	mov	r1, r9
 800a066:	f7f6 fd57 	bl	8000b18 <__aeabi_dcmpgt>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	f43f af7b 	beq.w	8009f66 <_strtod_l+0xa0e>
 800a070:	e4c4      	b.n	80099fc <_strtod_l+0x4a4>
 800a072:	9b04      	ldr	r3, [sp, #16]
 800a074:	b333      	cbz	r3, 800a0c4 <_strtod_l+0xb6c>
 800a076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a078:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a07c:	d822      	bhi.n	800a0c4 <_strtod_l+0xb6c>
 800a07e:	a32e      	add	r3, pc, #184	; (adr r3, 800a138 <_strtod_l+0xbe0>)
 800a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a084:	4640      	mov	r0, r8
 800a086:	4649      	mov	r1, r9
 800a088:	f7f6 fd32 	bl	8000af0 <__aeabi_dcmple>
 800a08c:	b1a0      	cbz	r0, 800a0b8 <_strtod_l+0xb60>
 800a08e:	4649      	mov	r1, r9
 800a090:	4640      	mov	r0, r8
 800a092:	f7f6 fd4b 	bl	8000b2c <__aeabi_d2uiz>
 800a096:	2801      	cmp	r0, #1
 800a098:	bf38      	it	cc
 800a09a:	2001      	movcc	r0, #1
 800a09c:	f7f6 fa32 	bl	8000504 <__aeabi_ui2d>
 800a0a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0a2:	4680      	mov	r8, r0
 800a0a4:	4689      	mov	r9, r1
 800a0a6:	bb23      	cbnz	r3, 800a0f2 <_strtod_l+0xb9a>
 800a0a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0ac:	9010      	str	r0, [sp, #64]	; 0x40
 800a0ae:	9311      	str	r3, [sp, #68]	; 0x44
 800a0b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a0b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a0c0:	1a9b      	subs	r3, r3, r2
 800a0c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a0c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0c8:	eeb0 0a48 	vmov.f32	s0, s16
 800a0cc:	eef0 0a68 	vmov.f32	s1, s17
 800a0d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a0d4:	f000 ff46 	bl	800af64 <__ulp>
 800a0d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0dc:	ec53 2b10 	vmov	r2, r3, d0
 800a0e0:	f7f6 fa8a 	bl	80005f8 <__aeabi_dmul>
 800a0e4:	ec53 2b18 	vmov	r2, r3, d8
 800a0e8:	f7f6 f8d0 	bl	800028c <__adddf3>
 800a0ec:	4682      	mov	sl, r0
 800a0ee:	468b      	mov	fp, r1
 800a0f0:	e78d      	b.n	800a00e <_strtod_l+0xab6>
 800a0f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a0f6:	e7db      	b.n	800a0b0 <_strtod_l+0xb58>
 800a0f8:	a311      	add	r3, pc, #68	; (adr r3, 800a140 <_strtod_l+0xbe8>)
 800a0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fe:	f7f6 fced 	bl	8000adc <__aeabi_dcmplt>
 800a102:	e7b2      	b.n	800a06a <_strtod_l+0xb12>
 800a104:	2300      	movs	r3, #0
 800a106:	930a      	str	r3, [sp, #40]	; 0x28
 800a108:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a10a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a10c:	6013      	str	r3, [r2, #0]
 800a10e:	f7ff ba6b 	b.w	80095e8 <_strtod_l+0x90>
 800a112:	2a65      	cmp	r2, #101	; 0x65
 800a114:	f43f ab5f 	beq.w	80097d6 <_strtod_l+0x27e>
 800a118:	2a45      	cmp	r2, #69	; 0x45
 800a11a:	f43f ab5c 	beq.w	80097d6 <_strtod_l+0x27e>
 800a11e:	2301      	movs	r3, #1
 800a120:	f7ff bb94 	b.w	800984c <_strtod_l+0x2f4>
 800a124:	f3af 8000 	nop.w
 800a128:	94a03595 	.word	0x94a03595
 800a12c:	3fdfffff 	.word	0x3fdfffff
 800a130:	35afe535 	.word	0x35afe535
 800a134:	3fe00000 	.word	0x3fe00000
 800a138:	ffc00000 	.word	0xffc00000
 800a13c:	41dfffff 	.word	0x41dfffff
 800a140:	94a03595 	.word	0x94a03595
 800a144:	3fcfffff 	.word	0x3fcfffff
 800a148:	3ff00000 	.word	0x3ff00000
 800a14c:	7ff00000 	.word	0x7ff00000
 800a150:	7fe00000 	.word	0x7fe00000
 800a154:	7c9fffff 	.word	0x7c9fffff
 800a158:	3fe00000 	.word	0x3fe00000
 800a15c:	bff00000 	.word	0xbff00000
 800a160:	7fefffff 	.word	0x7fefffff

0800a164 <strtod>:
 800a164:	460a      	mov	r2, r1
 800a166:	4601      	mov	r1, r0
 800a168:	4802      	ldr	r0, [pc, #8]	; (800a174 <strtod+0x10>)
 800a16a:	4b03      	ldr	r3, [pc, #12]	; (800a178 <strtod+0x14>)
 800a16c:	6800      	ldr	r0, [r0, #0]
 800a16e:	f7ff b9f3 	b.w	8009558 <_strtod_l>
 800a172:	bf00      	nop
 800a174:	200000fc 	.word	0x200000fc
 800a178:	20000164 	.word	0x20000164

0800a17c <rshift>:
 800a17c:	6903      	ldr	r3, [r0, #16]
 800a17e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a182:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a186:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a18a:	f100 0414 	add.w	r4, r0, #20
 800a18e:	dd45      	ble.n	800a21c <rshift+0xa0>
 800a190:	f011 011f 	ands.w	r1, r1, #31
 800a194:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a198:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a19c:	d10c      	bne.n	800a1b8 <rshift+0x3c>
 800a19e:	f100 0710 	add.w	r7, r0, #16
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	42b1      	cmp	r1, r6
 800a1a6:	d334      	bcc.n	800a212 <rshift+0x96>
 800a1a8:	1a9b      	subs	r3, r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	1eea      	subs	r2, r5, #3
 800a1ae:	4296      	cmp	r6, r2
 800a1b0:	bf38      	it	cc
 800a1b2:	2300      	movcc	r3, #0
 800a1b4:	4423      	add	r3, r4
 800a1b6:	e015      	b.n	800a1e4 <rshift+0x68>
 800a1b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a1bc:	f1c1 0820 	rsb	r8, r1, #32
 800a1c0:	40cf      	lsrs	r7, r1
 800a1c2:	f105 0e04 	add.w	lr, r5, #4
 800a1c6:	46a1      	mov	r9, r4
 800a1c8:	4576      	cmp	r6, lr
 800a1ca:	46f4      	mov	ip, lr
 800a1cc:	d815      	bhi.n	800a1fa <rshift+0x7e>
 800a1ce:	1a9a      	subs	r2, r3, r2
 800a1d0:	0092      	lsls	r2, r2, #2
 800a1d2:	3a04      	subs	r2, #4
 800a1d4:	3501      	adds	r5, #1
 800a1d6:	42ae      	cmp	r6, r5
 800a1d8:	bf38      	it	cc
 800a1da:	2200      	movcc	r2, #0
 800a1dc:	18a3      	adds	r3, r4, r2
 800a1de:	50a7      	str	r7, [r4, r2]
 800a1e0:	b107      	cbz	r7, 800a1e4 <rshift+0x68>
 800a1e2:	3304      	adds	r3, #4
 800a1e4:	1b1a      	subs	r2, r3, r4
 800a1e6:	42a3      	cmp	r3, r4
 800a1e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a1ec:	bf08      	it	eq
 800a1ee:	2300      	moveq	r3, #0
 800a1f0:	6102      	str	r2, [r0, #16]
 800a1f2:	bf08      	it	eq
 800a1f4:	6143      	streq	r3, [r0, #20]
 800a1f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1fa:	f8dc c000 	ldr.w	ip, [ip]
 800a1fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800a202:	ea4c 0707 	orr.w	r7, ip, r7
 800a206:	f849 7b04 	str.w	r7, [r9], #4
 800a20a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a20e:	40cf      	lsrs	r7, r1
 800a210:	e7da      	b.n	800a1c8 <rshift+0x4c>
 800a212:	f851 cb04 	ldr.w	ip, [r1], #4
 800a216:	f847 cf04 	str.w	ip, [r7, #4]!
 800a21a:	e7c3      	b.n	800a1a4 <rshift+0x28>
 800a21c:	4623      	mov	r3, r4
 800a21e:	e7e1      	b.n	800a1e4 <rshift+0x68>

0800a220 <__hexdig_fun>:
 800a220:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a224:	2b09      	cmp	r3, #9
 800a226:	d802      	bhi.n	800a22e <__hexdig_fun+0xe>
 800a228:	3820      	subs	r0, #32
 800a22a:	b2c0      	uxtb	r0, r0
 800a22c:	4770      	bx	lr
 800a22e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a232:	2b05      	cmp	r3, #5
 800a234:	d801      	bhi.n	800a23a <__hexdig_fun+0x1a>
 800a236:	3847      	subs	r0, #71	; 0x47
 800a238:	e7f7      	b.n	800a22a <__hexdig_fun+0xa>
 800a23a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a23e:	2b05      	cmp	r3, #5
 800a240:	d801      	bhi.n	800a246 <__hexdig_fun+0x26>
 800a242:	3827      	subs	r0, #39	; 0x27
 800a244:	e7f1      	b.n	800a22a <__hexdig_fun+0xa>
 800a246:	2000      	movs	r0, #0
 800a248:	4770      	bx	lr
	...

0800a24c <__gethex>:
 800a24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a250:	ed2d 8b02 	vpush	{d8}
 800a254:	b089      	sub	sp, #36	; 0x24
 800a256:	ee08 0a10 	vmov	s16, r0
 800a25a:	9304      	str	r3, [sp, #16]
 800a25c:	4bb4      	ldr	r3, [pc, #720]	; (800a530 <__gethex+0x2e4>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	9301      	str	r3, [sp, #4]
 800a262:	4618      	mov	r0, r3
 800a264:	468b      	mov	fp, r1
 800a266:	4690      	mov	r8, r2
 800a268:	f7f5 ffb2 	bl	80001d0 <strlen>
 800a26c:	9b01      	ldr	r3, [sp, #4]
 800a26e:	f8db 2000 	ldr.w	r2, [fp]
 800a272:	4403      	add	r3, r0
 800a274:	4682      	mov	sl, r0
 800a276:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a27a:	9305      	str	r3, [sp, #20]
 800a27c:	1c93      	adds	r3, r2, #2
 800a27e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a282:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a286:	32fe      	adds	r2, #254	; 0xfe
 800a288:	18d1      	adds	r1, r2, r3
 800a28a:	461f      	mov	r7, r3
 800a28c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a290:	9100      	str	r1, [sp, #0]
 800a292:	2830      	cmp	r0, #48	; 0x30
 800a294:	d0f8      	beq.n	800a288 <__gethex+0x3c>
 800a296:	f7ff ffc3 	bl	800a220 <__hexdig_fun>
 800a29a:	4604      	mov	r4, r0
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d13a      	bne.n	800a316 <__gethex+0xca>
 800a2a0:	9901      	ldr	r1, [sp, #4]
 800a2a2:	4652      	mov	r2, sl
 800a2a4:	4638      	mov	r0, r7
 800a2a6:	f7ff f925 	bl	80094f4 <strncmp>
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d168      	bne.n	800a382 <__gethex+0x136>
 800a2b0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a2b4:	eb07 060a 	add.w	r6, r7, sl
 800a2b8:	f7ff ffb2 	bl	800a220 <__hexdig_fun>
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	d062      	beq.n	800a386 <__gethex+0x13a>
 800a2c0:	4633      	mov	r3, r6
 800a2c2:	7818      	ldrb	r0, [r3, #0]
 800a2c4:	2830      	cmp	r0, #48	; 0x30
 800a2c6:	461f      	mov	r7, r3
 800a2c8:	f103 0301 	add.w	r3, r3, #1
 800a2cc:	d0f9      	beq.n	800a2c2 <__gethex+0x76>
 800a2ce:	f7ff ffa7 	bl	800a220 <__hexdig_fun>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	fab0 f480 	clz	r4, r0
 800a2d8:	0964      	lsrs	r4, r4, #5
 800a2da:	4635      	mov	r5, r6
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	463a      	mov	r2, r7
 800a2e0:	4616      	mov	r6, r2
 800a2e2:	3201      	adds	r2, #1
 800a2e4:	7830      	ldrb	r0, [r6, #0]
 800a2e6:	f7ff ff9b 	bl	800a220 <__hexdig_fun>
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	d1f8      	bne.n	800a2e0 <__gethex+0x94>
 800a2ee:	9901      	ldr	r1, [sp, #4]
 800a2f0:	4652      	mov	r2, sl
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f7ff f8fe 	bl	80094f4 <strncmp>
 800a2f8:	b980      	cbnz	r0, 800a31c <__gethex+0xd0>
 800a2fa:	b94d      	cbnz	r5, 800a310 <__gethex+0xc4>
 800a2fc:	eb06 050a 	add.w	r5, r6, sl
 800a300:	462a      	mov	r2, r5
 800a302:	4616      	mov	r6, r2
 800a304:	3201      	adds	r2, #1
 800a306:	7830      	ldrb	r0, [r6, #0]
 800a308:	f7ff ff8a 	bl	800a220 <__hexdig_fun>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d1f8      	bne.n	800a302 <__gethex+0xb6>
 800a310:	1bad      	subs	r5, r5, r6
 800a312:	00ad      	lsls	r5, r5, #2
 800a314:	e004      	b.n	800a320 <__gethex+0xd4>
 800a316:	2400      	movs	r4, #0
 800a318:	4625      	mov	r5, r4
 800a31a:	e7e0      	b.n	800a2de <__gethex+0x92>
 800a31c:	2d00      	cmp	r5, #0
 800a31e:	d1f7      	bne.n	800a310 <__gethex+0xc4>
 800a320:	7833      	ldrb	r3, [r6, #0]
 800a322:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a326:	2b50      	cmp	r3, #80	; 0x50
 800a328:	d13b      	bne.n	800a3a2 <__gethex+0x156>
 800a32a:	7873      	ldrb	r3, [r6, #1]
 800a32c:	2b2b      	cmp	r3, #43	; 0x2b
 800a32e:	d02c      	beq.n	800a38a <__gethex+0x13e>
 800a330:	2b2d      	cmp	r3, #45	; 0x2d
 800a332:	d02e      	beq.n	800a392 <__gethex+0x146>
 800a334:	1c71      	adds	r1, r6, #1
 800a336:	f04f 0900 	mov.w	r9, #0
 800a33a:	7808      	ldrb	r0, [r1, #0]
 800a33c:	f7ff ff70 	bl	800a220 <__hexdig_fun>
 800a340:	1e43      	subs	r3, r0, #1
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b18      	cmp	r3, #24
 800a346:	d82c      	bhi.n	800a3a2 <__gethex+0x156>
 800a348:	f1a0 0210 	sub.w	r2, r0, #16
 800a34c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a350:	f7ff ff66 	bl	800a220 <__hexdig_fun>
 800a354:	1e43      	subs	r3, r0, #1
 800a356:	b2db      	uxtb	r3, r3
 800a358:	2b18      	cmp	r3, #24
 800a35a:	d91d      	bls.n	800a398 <__gethex+0x14c>
 800a35c:	f1b9 0f00 	cmp.w	r9, #0
 800a360:	d000      	beq.n	800a364 <__gethex+0x118>
 800a362:	4252      	negs	r2, r2
 800a364:	4415      	add	r5, r2
 800a366:	f8cb 1000 	str.w	r1, [fp]
 800a36a:	b1e4      	cbz	r4, 800a3a6 <__gethex+0x15a>
 800a36c:	9b00      	ldr	r3, [sp, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	bf14      	ite	ne
 800a372:	2700      	movne	r7, #0
 800a374:	2706      	moveq	r7, #6
 800a376:	4638      	mov	r0, r7
 800a378:	b009      	add	sp, #36	; 0x24
 800a37a:	ecbd 8b02 	vpop	{d8}
 800a37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a382:	463e      	mov	r6, r7
 800a384:	4625      	mov	r5, r4
 800a386:	2401      	movs	r4, #1
 800a388:	e7ca      	b.n	800a320 <__gethex+0xd4>
 800a38a:	f04f 0900 	mov.w	r9, #0
 800a38e:	1cb1      	adds	r1, r6, #2
 800a390:	e7d3      	b.n	800a33a <__gethex+0xee>
 800a392:	f04f 0901 	mov.w	r9, #1
 800a396:	e7fa      	b.n	800a38e <__gethex+0x142>
 800a398:	230a      	movs	r3, #10
 800a39a:	fb03 0202 	mla	r2, r3, r2, r0
 800a39e:	3a10      	subs	r2, #16
 800a3a0:	e7d4      	b.n	800a34c <__gethex+0x100>
 800a3a2:	4631      	mov	r1, r6
 800a3a4:	e7df      	b.n	800a366 <__gethex+0x11a>
 800a3a6:	1bf3      	subs	r3, r6, r7
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	2b07      	cmp	r3, #7
 800a3ae:	dc0b      	bgt.n	800a3c8 <__gethex+0x17c>
 800a3b0:	ee18 0a10 	vmov	r0, s16
 800a3b4:	f000 fa64 	bl	800a880 <_Balloc>
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	b940      	cbnz	r0, 800a3ce <__gethex+0x182>
 800a3bc:	4b5d      	ldr	r3, [pc, #372]	; (800a534 <__gethex+0x2e8>)
 800a3be:	4602      	mov	r2, r0
 800a3c0:	21de      	movs	r1, #222	; 0xde
 800a3c2:	485d      	ldr	r0, [pc, #372]	; (800a538 <__gethex+0x2ec>)
 800a3c4:	f000 ffee 	bl	800b3a4 <__assert_func>
 800a3c8:	3101      	adds	r1, #1
 800a3ca:	105b      	asrs	r3, r3, #1
 800a3cc:	e7ee      	b.n	800a3ac <__gethex+0x160>
 800a3ce:	f100 0914 	add.w	r9, r0, #20
 800a3d2:	f04f 0b00 	mov.w	fp, #0
 800a3d6:	f1ca 0301 	rsb	r3, sl, #1
 800a3da:	f8cd 9008 	str.w	r9, [sp, #8]
 800a3de:	f8cd b000 	str.w	fp, [sp]
 800a3e2:	9306      	str	r3, [sp, #24]
 800a3e4:	42b7      	cmp	r7, r6
 800a3e6:	d340      	bcc.n	800a46a <__gethex+0x21e>
 800a3e8:	9802      	ldr	r0, [sp, #8]
 800a3ea:	9b00      	ldr	r3, [sp, #0]
 800a3ec:	f840 3b04 	str.w	r3, [r0], #4
 800a3f0:	eba0 0009 	sub.w	r0, r0, r9
 800a3f4:	1080      	asrs	r0, r0, #2
 800a3f6:	0146      	lsls	r6, r0, #5
 800a3f8:	6120      	str	r0, [r4, #16]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f000 fb32 	bl	800aa64 <__hi0bits>
 800a400:	1a30      	subs	r0, r6, r0
 800a402:	f8d8 6000 	ldr.w	r6, [r8]
 800a406:	42b0      	cmp	r0, r6
 800a408:	dd63      	ble.n	800a4d2 <__gethex+0x286>
 800a40a:	1b87      	subs	r7, r0, r6
 800a40c:	4639      	mov	r1, r7
 800a40e:	4620      	mov	r0, r4
 800a410:	f000 fed6 	bl	800b1c0 <__any_on>
 800a414:	4682      	mov	sl, r0
 800a416:	b1a8      	cbz	r0, 800a444 <__gethex+0x1f8>
 800a418:	1e7b      	subs	r3, r7, #1
 800a41a:	1159      	asrs	r1, r3, #5
 800a41c:	f003 021f 	and.w	r2, r3, #31
 800a420:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a424:	f04f 0a01 	mov.w	sl, #1
 800a428:	fa0a f202 	lsl.w	r2, sl, r2
 800a42c:	420a      	tst	r2, r1
 800a42e:	d009      	beq.n	800a444 <__gethex+0x1f8>
 800a430:	4553      	cmp	r3, sl
 800a432:	dd05      	ble.n	800a440 <__gethex+0x1f4>
 800a434:	1eb9      	subs	r1, r7, #2
 800a436:	4620      	mov	r0, r4
 800a438:	f000 fec2 	bl	800b1c0 <__any_on>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	d145      	bne.n	800a4cc <__gethex+0x280>
 800a440:	f04f 0a02 	mov.w	sl, #2
 800a444:	4639      	mov	r1, r7
 800a446:	4620      	mov	r0, r4
 800a448:	f7ff fe98 	bl	800a17c <rshift>
 800a44c:	443d      	add	r5, r7
 800a44e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a452:	42ab      	cmp	r3, r5
 800a454:	da4c      	bge.n	800a4f0 <__gethex+0x2a4>
 800a456:	ee18 0a10 	vmov	r0, s16
 800a45a:	4621      	mov	r1, r4
 800a45c:	f000 fa50 	bl	800a900 <_Bfree>
 800a460:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a462:	2300      	movs	r3, #0
 800a464:	6013      	str	r3, [r2, #0]
 800a466:	27a3      	movs	r7, #163	; 0xa3
 800a468:	e785      	b.n	800a376 <__gethex+0x12a>
 800a46a:	1e73      	subs	r3, r6, #1
 800a46c:	9a05      	ldr	r2, [sp, #20]
 800a46e:	9303      	str	r3, [sp, #12]
 800a470:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a474:	4293      	cmp	r3, r2
 800a476:	d019      	beq.n	800a4ac <__gethex+0x260>
 800a478:	f1bb 0f20 	cmp.w	fp, #32
 800a47c:	d107      	bne.n	800a48e <__gethex+0x242>
 800a47e:	9b02      	ldr	r3, [sp, #8]
 800a480:	9a00      	ldr	r2, [sp, #0]
 800a482:	f843 2b04 	str.w	r2, [r3], #4
 800a486:	9302      	str	r3, [sp, #8]
 800a488:	2300      	movs	r3, #0
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	469b      	mov	fp, r3
 800a48e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a492:	f7ff fec5 	bl	800a220 <__hexdig_fun>
 800a496:	9b00      	ldr	r3, [sp, #0]
 800a498:	f000 000f 	and.w	r0, r0, #15
 800a49c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a4a0:	4303      	orrs	r3, r0
 800a4a2:	9300      	str	r3, [sp, #0]
 800a4a4:	f10b 0b04 	add.w	fp, fp, #4
 800a4a8:	9b03      	ldr	r3, [sp, #12]
 800a4aa:	e00d      	b.n	800a4c8 <__gethex+0x27c>
 800a4ac:	9b03      	ldr	r3, [sp, #12]
 800a4ae:	9a06      	ldr	r2, [sp, #24]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	42bb      	cmp	r3, r7
 800a4b4:	d3e0      	bcc.n	800a478 <__gethex+0x22c>
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	9901      	ldr	r1, [sp, #4]
 800a4ba:	9307      	str	r3, [sp, #28]
 800a4bc:	4652      	mov	r2, sl
 800a4be:	f7ff f819 	bl	80094f4 <strncmp>
 800a4c2:	9b07      	ldr	r3, [sp, #28]
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d1d7      	bne.n	800a478 <__gethex+0x22c>
 800a4c8:	461e      	mov	r6, r3
 800a4ca:	e78b      	b.n	800a3e4 <__gethex+0x198>
 800a4cc:	f04f 0a03 	mov.w	sl, #3
 800a4d0:	e7b8      	b.n	800a444 <__gethex+0x1f8>
 800a4d2:	da0a      	bge.n	800a4ea <__gethex+0x29e>
 800a4d4:	1a37      	subs	r7, r6, r0
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	ee18 0a10 	vmov	r0, s16
 800a4dc:	463a      	mov	r2, r7
 800a4de:	f000 fc2b 	bl	800ad38 <__lshift>
 800a4e2:	1bed      	subs	r5, r5, r7
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	f100 0914 	add.w	r9, r0, #20
 800a4ea:	f04f 0a00 	mov.w	sl, #0
 800a4ee:	e7ae      	b.n	800a44e <__gethex+0x202>
 800a4f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a4f4:	42a8      	cmp	r0, r5
 800a4f6:	dd72      	ble.n	800a5de <__gethex+0x392>
 800a4f8:	1b45      	subs	r5, r0, r5
 800a4fa:	42ae      	cmp	r6, r5
 800a4fc:	dc36      	bgt.n	800a56c <__gethex+0x320>
 800a4fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a502:	2b02      	cmp	r3, #2
 800a504:	d02a      	beq.n	800a55c <__gethex+0x310>
 800a506:	2b03      	cmp	r3, #3
 800a508:	d02c      	beq.n	800a564 <__gethex+0x318>
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d11c      	bne.n	800a548 <__gethex+0x2fc>
 800a50e:	42ae      	cmp	r6, r5
 800a510:	d11a      	bne.n	800a548 <__gethex+0x2fc>
 800a512:	2e01      	cmp	r6, #1
 800a514:	d112      	bne.n	800a53c <__gethex+0x2f0>
 800a516:	9a04      	ldr	r2, [sp, #16]
 800a518:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a51c:	6013      	str	r3, [r2, #0]
 800a51e:	2301      	movs	r3, #1
 800a520:	6123      	str	r3, [r4, #16]
 800a522:	f8c9 3000 	str.w	r3, [r9]
 800a526:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a528:	2762      	movs	r7, #98	; 0x62
 800a52a:	601c      	str	r4, [r3, #0]
 800a52c:	e723      	b.n	800a376 <__gethex+0x12a>
 800a52e:	bf00      	nop
 800a530:	0800c3f0 	.word	0x0800c3f0
 800a534:	0800c378 	.word	0x0800c378
 800a538:	0800c389 	.word	0x0800c389
 800a53c:	1e71      	subs	r1, r6, #1
 800a53e:	4620      	mov	r0, r4
 800a540:	f000 fe3e 	bl	800b1c0 <__any_on>
 800a544:	2800      	cmp	r0, #0
 800a546:	d1e6      	bne.n	800a516 <__gethex+0x2ca>
 800a548:	ee18 0a10 	vmov	r0, s16
 800a54c:	4621      	mov	r1, r4
 800a54e:	f000 f9d7 	bl	800a900 <_Bfree>
 800a552:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a554:	2300      	movs	r3, #0
 800a556:	6013      	str	r3, [r2, #0]
 800a558:	2750      	movs	r7, #80	; 0x50
 800a55a:	e70c      	b.n	800a376 <__gethex+0x12a>
 800a55c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1f2      	bne.n	800a548 <__gethex+0x2fc>
 800a562:	e7d8      	b.n	800a516 <__gethex+0x2ca>
 800a564:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1d5      	bne.n	800a516 <__gethex+0x2ca>
 800a56a:	e7ed      	b.n	800a548 <__gethex+0x2fc>
 800a56c:	1e6f      	subs	r7, r5, #1
 800a56e:	f1ba 0f00 	cmp.w	sl, #0
 800a572:	d131      	bne.n	800a5d8 <__gethex+0x38c>
 800a574:	b127      	cbz	r7, 800a580 <__gethex+0x334>
 800a576:	4639      	mov	r1, r7
 800a578:	4620      	mov	r0, r4
 800a57a:	f000 fe21 	bl	800b1c0 <__any_on>
 800a57e:	4682      	mov	sl, r0
 800a580:	117b      	asrs	r3, r7, #5
 800a582:	2101      	movs	r1, #1
 800a584:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a588:	f007 071f 	and.w	r7, r7, #31
 800a58c:	fa01 f707 	lsl.w	r7, r1, r7
 800a590:	421f      	tst	r7, r3
 800a592:	4629      	mov	r1, r5
 800a594:	4620      	mov	r0, r4
 800a596:	bf18      	it	ne
 800a598:	f04a 0a02 	orrne.w	sl, sl, #2
 800a59c:	1b76      	subs	r6, r6, r5
 800a59e:	f7ff fded 	bl	800a17c <rshift>
 800a5a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a5a6:	2702      	movs	r7, #2
 800a5a8:	f1ba 0f00 	cmp.w	sl, #0
 800a5ac:	d048      	beq.n	800a640 <__gethex+0x3f4>
 800a5ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d015      	beq.n	800a5e2 <__gethex+0x396>
 800a5b6:	2b03      	cmp	r3, #3
 800a5b8:	d017      	beq.n	800a5ea <__gethex+0x39e>
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d109      	bne.n	800a5d2 <__gethex+0x386>
 800a5be:	f01a 0f02 	tst.w	sl, #2
 800a5c2:	d006      	beq.n	800a5d2 <__gethex+0x386>
 800a5c4:	f8d9 0000 	ldr.w	r0, [r9]
 800a5c8:	ea4a 0a00 	orr.w	sl, sl, r0
 800a5cc:	f01a 0f01 	tst.w	sl, #1
 800a5d0:	d10e      	bne.n	800a5f0 <__gethex+0x3a4>
 800a5d2:	f047 0710 	orr.w	r7, r7, #16
 800a5d6:	e033      	b.n	800a640 <__gethex+0x3f4>
 800a5d8:	f04f 0a01 	mov.w	sl, #1
 800a5dc:	e7d0      	b.n	800a580 <__gethex+0x334>
 800a5de:	2701      	movs	r7, #1
 800a5e0:	e7e2      	b.n	800a5a8 <__gethex+0x35c>
 800a5e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5e4:	f1c3 0301 	rsb	r3, r3, #1
 800a5e8:	9315      	str	r3, [sp, #84]	; 0x54
 800a5ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d0f0      	beq.n	800a5d2 <__gethex+0x386>
 800a5f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a5f4:	f104 0314 	add.w	r3, r4, #20
 800a5f8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a5fc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a600:	f04f 0c00 	mov.w	ip, #0
 800a604:	4618      	mov	r0, r3
 800a606:	f853 2b04 	ldr.w	r2, [r3], #4
 800a60a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a60e:	d01c      	beq.n	800a64a <__gethex+0x3fe>
 800a610:	3201      	adds	r2, #1
 800a612:	6002      	str	r2, [r0, #0]
 800a614:	2f02      	cmp	r7, #2
 800a616:	f104 0314 	add.w	r3, r4, #20
 800a61a:	d13f      	bne.n	800a69c <__gethex+0x450>
 800a61c:	f8d8 2000 	ldr.w	r2, [r8]
 800a620:	3a01      	subs	r2, #1
 800a622:	42b2      	cmp	r2, r6
 800a624:	d10a      	bne.n	800a63c <__gethex+0x3f0>
 800a626:	1171      	asrs	r1, r6, #5
 800a628:	2201      	movs	r2, #1
 800a62a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a62e:	f006 061f 	and.w	r6, r6, #31
 800a632:	fa02 f606 	lsl.w	r6, r2, r6
 800a636:	421e      	tst	r6, r3
 800a638:	bf18      	it	ne
 800a63a:	4617      	movne	r7, r2
 800a63c:	f047 0720 	orr.w	r7, r7, #32
 800a640:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a642:	601c      	str	r4, [r3, #0]
 800a644:	9b04      	ldr	r3, [sp, #16]
 800a646:	601d      	str	r5, [r3, #0]
 800a648:	e695      	b.n	800a376 <__gethex+0x12a>
 800a64a:	4299      	cmp	r1, r3
 800a64c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a650:	d8d8      	bhi.n	800a604 <__gethex+0x3b8>
 800a652:	68a3      	ldr	r3, [r4, #8]
 800a654:	459b      	cmp	fp, r3
 800a656:	db19      	blt.n	800a68c <__gethex+0x440>
 800a658:	6861      	ldr	r1, [r4, #4]
 800a65a:	ee18 0a10 	vmov	r0, s16
 800a65e:	3101      	adds	r1, #1
 800a660:	f000 f90e 	bl	800a880 <_Balloc>
 800a664:	4681      	mov	r9, r0
 800a666:	b918      	cbnz	r0, 800a670 <__gethex+0x424>
 800a668:	4b1a      	ldr	r3, [pc, #104]	; (800a6d4 <__gethex+0x488>)
 800a66a:	4602      	mov	r2, r0
 800a66c:	2184      	movs	r1, #132	; 0x84
 800a66e:	e6a8      	b.n	800a3c2 <__gethex+0x176>
 800a670:	6922      	ldr	r2, [r4, #16]
 800a672:	3202      	adds	r2, #2
 800a674:	f104 010c 	add.w	r1, r4, #12
 800a678:	0092      	lsls	r2, r2, #2
 800a67a:	300c      	adds	r0, #12
 800a67c:	f7fe ff24 	bl	80094c8 <memcpy>
 800a680:	4621      	mov	r1, r4
 800a682:	ee18 0a10 	vmov	r0, s16
 800a686:	f000 f93b 	bl	800a900 <_Bfree>
 800a68a:	464c      	mov	r4, r9
 800a68c:	6923      	ldr	r3, [r4, #16]
 800a68e:	1c5a      	adds	r2, r3, #1
 800a690:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a694:	6122      	str	r2, [r4, #16]
 800a696:	2201      	movs	r2, #1
 800a698:	615a      	str	r2, [r3, #20]
 800a69a:	e7bb      	b.n	800a614 <__gethex+0x3c8>
 800a69c:	6922      	ldr	r2, [r4, #16]
 800a69e:	455a      	cmp	r2, fp
 800a6a0:	dd0b      	ble.n	800a6ba <__gethex+0x46e>
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f7ff fd69 	bl	800a17c <rshift>
 800a6aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6ae:	3501      	adds	r5, #1
 800a6b0:	42ab      	cmp	r3, r5
 800a6b2:	f6ff aed0 	blt.w	800a456 <__gethex+0x20a>
 800a6b6:	2701      	movs	r7, #1
 800a6b8:	e7c0      	b.n	800a63c <__gethex+0x3f0>
 800a6ba:	f016 061f 	ands.w	r6, r6, #31
 800a6be:	d0fa      	beq.n	800a6b6 <__gethex+0x46a>
 800a6c0:	4453      	add	r3, sl
 800a6c2:	f1c6 0620 	rsb	r6, r6, #32
 800a6c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a6ca:	f000 f9cb 	bl	800aa64 <__hi0bits>
 800a6ce:	42b0      	cmp	r0, r6
 800a6d0:	dbe7      	blt.n	800a6a2 <__gethex+0x456>
 800a6d2:	e7f0      	b.n	800a6b6 <__gethex+0x46a>
 800a6d4:	0800c378 	.word	0x0800c378

0800a6d8 <L_shift>:
 800a6d8:	f1c2 0208 	rsb	r2, r2, #8
 800a6dc:	0092      	lsls	r2, r2, #2
 800a6de:	b570      	push	{r4, r5, r6, lr}
 800a6e0:	f1c2 0620 	rsb	r6, r2, #32
 800a6e4:	6843      	ldr	r3, [r0, #4]
 800a6e6:	6804      	ldr	r4, [r0, #0]
 800a6e8:	fa03 f506 	lsl.w	r5, r3, r6
 800a6ec:	432c      	orrs	r4, r5
 800a6ee:	40d3      	lsrs	r3, r2
 800a6f0:	6004      	str	r4, [r0, #0]
 800a6f2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a6f6:	4288      	cmp	r0, r1
 800a6f8:	d3f4      	bcc.n	800a6e4 <L_shift+0xc>
 800a6fa:	bd70      	pop	{r4, r5, r6, pc}

0800a6fc <__match>:
 800a6fc:	b530      	push	{r4, r5, lr}
 800a6fe:	6803      	ldr	r3, [r0, #0]
 800a700:	3301      	adds	r3, #1
 800a702:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a706:	b914      	cbnz	r4, 800a70e <__match+0x12>
 800a708:	6003      	str	r3, [r0, #0]
 800a70a:	2001      	movs	r0, #1
 800a70c:	bd30      	pop	{r4, r5, pc}
 800a70e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a712:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a716:	2d19      	cmp	r5, #25
 800a718:	bf98      	it	ls
 800a71a:	3220      	addls	r2, #32
 800a71c:	42a2      	cmp	r2, r4
 800a71e:	d0f0      	beq.n	800a702 <__match+0x6>
 800a720:	2000      	movs	r0, #0
 800a722:	e7f3      	b.n	800a70c <__match+0x10>

0800a724 <__hexnan>:
 800a724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a728:	680b      	ldr	r3, [r1, #0]
 800a72a:	115e      	asrs	r6, r3, #5
 800a72c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a730:	f013 031f 	ands.w	r3, r3, #31
 800a734:	b087      	sub	sp, #28
 800a736:	bf18      	it	ne
 800a738:	3604      	addne	r6, #4
 800a73a:	2500      	movs	r5, #0
 800a73c:	1f37      	subs	r7, r6, #4
 800a73e:	4690      	mov	r8, r2
 800a740:	6802      	ldr	r2, [r0, #0]
 800a742:	9301      	str	r3, [sp, #4]
 800a744:	4682      	mov	sl, r0
 800a746:	f846 5c04 	str.w	r5, [r6, #-4]
 800a74a:	46b9      	mov	r9, r7
 800a74c:	463c      	mov	r4, r7
 800a74e:	9502      	str	r5, [sp, #8]
 800a750:	46ab      	mov	fp, r5
 800a752:	7851      	ldrb	r1, [r2, #1]
 800a754:	1c53      	adds	r3, r2, #1
 800a756:	9303      	str	r3, [sp, #12]
 800a758:	b341      	cbz	r1, 800a7ac <__hexnan+0x88>
 800a75a:	4608      	mov	r0, r1
 800a75c:	9205      	str	r2, [sp, #20]
 800a75e:	9104      	str	r1, [sp, #16]
 800a760:	f7ff fd5e 	bl	800a220 <__hexdig_fun>
 800a764:	2800      	cmp	r0, #0
 800a766:	d14f      	bne.n	800a808 <__hexnan+0xe4>
 800a768:	9904      	ldr	r1, [sp, #16]
 800a76a:	9a05      	ldr	r2, [sp, #20]
 800a76c:	2920      	cmp	r1, #32
 800a76e:	d818      	bhi.n	800a7a2 <__hexnan+0x7e>
 800a770:	9b02      	ldr	r3, [sp, #8]
 800a772:	459b      	cmp	fp, r3
 800a774:	dd13      	ble.n	800a79e <__hexnan+0x7a>
 800a776:	454c      	cmp	r4, r9
 800a778:	d206      	bcs.n	800a788 <__hexnan+0x64>
 800a77a:	2d07      	cmp	r5, #7
 800a77c:	dc04      	bgt.n	800a788 <__hexnan+0x64>
 800a77e:	462a      	mov	r2, r5
 800a780:	4649      	mov	r1, r9
 800a782:	4620      	mov	r0, r4
 800a784:	f7ff ffa8 	bl	800a6d8 <L_shift>
 800a788:	4544      	cmp	r4, r8
 800a78a:	d950      	bls.n	800a82e <__hexnan+0x10a>
 800a78c:	2300      	movs	r3, #0
 800a78e:	f1a4 0904 	sub.w	r9, r4, #4
 800a792:	f844 3c04 	str.w	r3, [r4, #-4]
 800a796:	f8cd b008 	str.w	fp, [sp, #8]
 800a79a:	464c      	mov	r4, r9
 800a79c:	461d      	mov	r5, r3
 800a79e:	9a03      	ldr	r2, [sp, #12]
 800a7a0:	e7d7      	b.n	800a752 <__hexnan+0x2e>
 800a7a2:	2929      	cmp	r1, #41	; 0x29
 800a7a4:	d156      	bne.n	800a854 <__hexnan+0x130>
 800a7a6:	3202      	adds	r2, #2
 800a7a8:	f8ca 2000 	str.w	r2, [sl]
 800a7ac:	f1bb 0f00 	cmp.w	fp, #0
 800a7b0:	d050      	beq.n	800a854 <__hexnan+0x130>
 800a7b2:	454c      	cmp	r4, r9
 800a7b4:	d206      	bcs.n	800a7c4 <__hexnan+0xa0>
 800a7b6:	2d07      	cmp	r5, #7
 800a7b8:	dc04      	bgt.n	800a7c4 <__hexnan+0xa0>
 800a7ba:	462a      	mov	r2, r5
 800a7bc:	4649      	mov	r1, r9
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f7ff ff8a 	bl	800a6d8 <L_shift>
 800a7c4:	4544      	cmp	r4, r8
 800a7c6:	d934      	bls.n	800a832 <__hexnan+0x10e>
 800a7c8:	f1a8 0204 	sub.w	r2, r8, #4
 800a7cc:	4623      	mov	r3, r4
 800a7ce:	f853 1b04 	ldr.w	r1, [r3], #4
 800a7d2:	f842 1f04 	str.w	r1, [r2, #4]!
 800a7d6:	429f      	cmp	r7, r3
 800a7d8:	d2f9      	bcs.n	800a7ce <__hexnan+0xaa>
 800a7da:	1b3b      	subs	r3, r7, r4
 800a7dc:	f023 0303 	bic.w	r3, r3, #3
 800a7e0:	3304      	adds	r3, #4
 800a7e2:	3401      	adds	r4, #1
 800a7e4:	3e03      	subs	r6, #3
 800a7e6:	42b4      	cmp	r4, r6
 800a7e8:	bf88      	it	hi
 800a7ea:	2304      	movhi	r3, #4
 800a7ec:	4443      	add	r3, r8
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f843 2b04 	str.w	r2, [r3], #4
 800a7f4:	429f      	cmp	r7, r3
 800a7f6:	d2fb      	bcs.n	800a7f0 <__hexnan+0xcc>
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	b91b      	cbnz	r3, 800a804 <__hexnan+0xe0>
 800a7fc:	4547      	cmp	r7, r8
 800a7fe:	d127      	bne.n	800a850 <__hexnan+0x12c>
 800a800:	2301      	movs	r3, #1
 800a802:	603b      	str	r3, [r7, #0]
 800a804:	2005      	movs	r0, #5
 800a806:	e026      	b.n	800a856 <__hexnan+0x132>
 800a808:	3501      	adds	r5, #1
 800a80a:	2d08      	cmp	r5, #8
 800a80c:	f10b 0b01 	add.w	fp, fp, #1
 800a810:	dd06      	ble.n	800a820 <__hexnan+0xfc>
 800a812:	4544      	cmp	r4, r8
 800a814:	d9c3      	bls.n	800a79e <__hexnan+0x7a>
 800a816:	2300      	movs	r3, #0
 800a818:	f844 3c04 	str.w	r3, [r4, #-4]
 800a81c:	2501      	movs	r5, #1
 800a81e:	3c04      	subs	r4, #4
 800a820:	6822      	ldr	r2, [r4, #0]
 800a822:	f000 000f 	and.w	r0, r0, #15
 800a826:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a82a:	6022      	str	r2, [r4, #0]
 800a82c:	e7b7      	b.n	800a79e <__hexnan+0x7a>
 800a82e:	2508      	movs	r5, #8
 800a830:	e7b5      	b.n	800a79e <__hexnan+0x7a>
 800a832:	9b01      	ldr	r3, [sp, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d0df      	beq.n	800a7f8 <__hexnan+0xd4>
 800a838:	f04f 32ff 	mov.w	r2, #4294967295
 800a83c:	f1c3 0320 	rsb	r3, r3, #32
 800a840:	fa22 f303 	lsr.w	r3, r2, r3
 800a844:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a848:	401a      	ands	r2, r3
 800a84a:	f846 2c04 	str.w	r2, [r6, #-4]
 800a84e:	e7d3      	b.n	800a7f8 <__hexnan+0xd4>
 800a850:	3f04      	subs	r7, #4
 800a852:	e7d1      	b.n	800a7f8 <__hexnan+0xd4>
 800a854:	2004      	movs	r0, #4
 800a856:	b007      	add	sp, #28
 800a858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a85c <__ascii_mbtowc>:
 800a85c:	b082      	sub	sp, #8
 800a85e:	b901      	cbnz	r1, 800a862 <__ascii_mbtowc+0x6>
 800a860:	a901      	add	r1, sp, #4
 800a862:	b142      	cbz	r2, 800a876 <__ascii_mbtowc+0x1a>
 800a864:	b14b      	cbz	r3, 800a87a <__ascii_mbtowc+0x1e>
 800a866:	7813      	ldrb	r3, [r2, #0]
 800a868:	600b      	str	r3, [r1, #0]
 800a86a:	7812      	ldrb	r2, [r2, #0]
 800a86c:	1e10      	subs	r0, r2, #0
 800a86e:	bf18      	it	ne
 800a870:	2001      	movne	r0, #1
 800a872:	b002      	add	sp, #8
 800a874:	4770      	bx	lr
 800a876:	4610      	mov	r0, r2
 800a878:	e7fb      	b.n	800a872 <__ascii_mbtowc+0x16>
 800a87a:	f06f 0001 	mvn.w	r0, #1
 800a87e:	e7f8      	b.n	800a872 <__ascii_mbtowc+0x16>

0800a880 <_Balloc>:
 800a880:	b570      	push	{r4, r5, r6, lr}
 800a882:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a884:	4604      	mov	r4, r0
 800a886:	460d      	mov	r5, r1
 800a888:	b976      	cbnz	r6, 800a8a8 <_Balloc+0x28>
 800a88a:	2010      	movs	r0, #16
 800a88c:	f000 fdba 	bl	800b404 <malloc>
 800a890:	4602      	mov	r2, r0
 800a892:	6260      	str	r0, [r4, #36]	; 0x24
 800a894:	b920      	cbnz	r0, 800a8a0 <_Balloc+0x20>
 800a896:	4b18      	ldr	r3, [pc, #96]	; (800a8f8 <_Balloc+0x78>)
 800a898:	4818      	ldr	r0, [pc, #96]	; (800a8fc <_Balloc+0x7c>)
 800a89a:	2166      	movs	r1, #102	; 0x66
 800a89c:	f000 fd82 	bl	800b3a4 <__assert_func>
 800a8a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8a4:	6006      	str	r6, [r0, #0]
 800a8a6:	60c6      	str	r6, [r0, #12]
 800a8a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a8aa:	68f3      	ldr	r3, [r6, #12]
 800a8ac:	b183      	cbz	r3, 800a8d0 <_Balloc+0x50>
 800a8ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a8b6:	b9b8      	cbnz	r0, 800a8e8 <_Balloc+0x68>
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	fa01 f605 	lsl.w	r6, r1, r5
 800a8be:	1d72      	adds	r2, r6, #5
 800a8c0:	0092      	lsls	r2, r2, #2
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 fc9d 	bl	800b202 <_calloc_r>
 800a8c8:	b160      	cbz	r0, 800a8e4 <_Balloc+0x64>
 800a8ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a8ce:	e00e      	b.n	800a8ee <_Balloc+0x6e>
 800a8d0:	2221      	movs	r2, #33	; 0x21
 800a8d2:	2104      	movs	r1, #4
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f000 fc94 	bl	800b202 <_calloc_r>
 800a8da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8dc:	60f0      	str	r0, [r6, #12]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d1e4      	bne.n	800a8ae <_Balloc+0x2e>
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}
 800a8e8:	6802      	ldr	r2, [r0, #0]
 800a8ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a8f4:	e7f7      	b.n	800a8e6 <_Balloc+0x66>
 800a8f6:	bf00      	nop
 800a8f8:	0800c404 	.word	0x0800c404
 800a8fc:	0800c41b 	.word	0x0800c41b

0800a900 <_Bfree>:
 800a900:	b570      	push	{r4, r5, r6, lr}
 800a902:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a904:	4605      	mov	r5, r0
 800a906:	460c      	mov	r4, r1
 800a908:	b976      	cbnz	r6, 800a928 <_Bfree+0x28>
 800a90a:	2010      	movs	r0, #16
 800a90c:	f000 fd7a 	bl	800b404 <malloc>
 800a910:	4602      	mov	r2, r0
 800a912:	6268      	str	r0, [r5, #36]	; 0x24
 800a914:	b920      	cbnz	r0, 800a920 <_Bfree+0x20>
 800a916:	4b09      	ldr	r3, [pc, #36]	; (800a93c <_Bfree+0x3c>)
 800a918:	4809      	ldr	r0, [pc, #36]	; (800a940 <_Bfree+0x40>)
 800a91a:	218a      	movs	r1, #138	; 0x8a
 800a91c:	f000 fd42 	bl	800b3a4 <__assert_func>
 800a920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a924:	6006      	str	r6, [r0, #0]
 800a926:	60c6      	str	r6, [r0, #12]
 800a928:	b13c      	cbz	r4, 800a93a <_Bfree+0x3a>
 800a92a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a92c:	6862      	ldr	r2, [r4, #4]
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a934:	6021      	str	r1, [r4, #0]
 800a936:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a93a:	bd70      	pop	{r4, r5, r6, pc}
 800a93c:	0800c404 	.word	0x0800c404
 800a940:	0800c41b 	.word	0x0800c41b

0800a944 <__multadd>:
 800a944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a948:	690d      	ldr	r5, [r1, #16]
 800a94a:	4607      	mov	r7, r0
 800a94c:	460c      	mov	r4, r1
 800a94e:	461e      	mov	r6, r3
 800a950:	f101 0c14 	add.w	ip, r1, #20
 800a954:	2000      	movs	r0, #0
 800a956:	f8dc 3000 	ldr.w	r3, [ip]
 800a95a:	b299      	uxth	r1, r3
 800a95c:	fb02 6101 	mla	r1, r2, r1, r6
 800a960:	0c1e      	lsrs	r6, r3, #16
 800a962:	0c0b      	lsrs	r3, r1, #16
 800a964:	fb02 3306 	mla	r3, r2, r6, r3
 800a968:	b289      	uxth	r1, r1
 800a96a:	3001      	adds	r0, #1
 800a96c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a970:	4285      	cmp	r5, r0
 800a972:	f84c 1b04 	str.w	r1, [ip], #4
 800a976:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a97a:	dcec      	bgt.n	800a956 <__multadd+0x12>
 800a97c:	b30e      	cbz	r6, 800a9c2 <__multadd+0x7e>
 800a97e:	68a3      	ldr	r3, [r4, #8]
 800a980:	42ab      	cmp	r3, r5
 800a982:	dc19      	bgt.n	800a9b8 <__multadd+0x74>
 800a984:	6861      	ldr	r1, [r4, #4]
 800a986:	4638      	mov	r0, r7
 800a988:	3101      	adds	r1, #1
 800a98a:	f7ff ff79 	bl	800a880 <_Balloc>
 800a98e:	4680      	mov	r8, r0
 800a990:	b928      	cbnz	r0, 800a99e <__multadd+0x5a>
 800a992:	4602      	mov	r2, r0
 800a994:	4b0c      	ldr	r3, [pc, #48]	; (800a9c8 <__multadd+0x84>)
 800a996:	480d      	ldr	r0, [pc, #52]	; (800a9cc <__multadd+0x88>)
 800a998:	21b5      	movs	r1, #181	; 0xb5
 800a99a:	f000 fd03 	bl	800b3a4 <__assert_func>
 800a99e:	6922      	ldr	r2, [r4, #16]
 800a9a0:	3202      	adds	r2, #2
 800a9a2:	f104 010c 	add.w	r1, r4, #12
 800a9a6:	0092      	lsls	r2, r2, #2
 800a9a8:	300c      	adds	r0, #12
 800a9aa:	f7fe fd8d 	bl	80094c8 <memcpy>
 800a9ae:	4621      	mov	r1, r4
 800a9b0:	4638      	mov	r0, r7
 800a9b2:	f7ff ffa5 	bl	800a900 <_Bfree>
 800a9b6:	4644      	mov	r4, r8
 800a9b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a9bc:	3501      	adds	r5, #1
 800a9be:	615e      	str	r6, [r3, #20]
 800a9c0:	6125      	str	r5, [r4, #16]
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c8:	0800c378 	.word	0x0800c378
 800a9cc:	0800c41b 	.word	0x0800c41b

0800a9d0 <__s2b>:
 800a9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9d4:	460c      	mov	r4, r1
 800a9d6:	4615      	mov	r5, r2
 800a9d8:	461f      	mov	r7, r3
 800a9da:	2209      	movs	r2, #9
 800a9dc:	3308      	adds	r3, #8
 800a9de:	4606      	mov	r6, r0
 800a9e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	db09      	blt.n	800aa00 <__s2b+0x30>
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	f7ff ff47 	bl	800a880 <_Balloc>
 800a9f2:	b940      	cbnz	r0, 800aa06 <__s2b+0x36>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	4b19      	ldr	r3, [pc, #100]	; (800aa5c <__s2b+0x8c>)
 800a9f8:	4819      	ldr	r0, [pc, #100]	; (800aa60 <__s2b+0x90>)
 800a9fa:	21ce      	movs	r1, #206	; 0xce
 800a9fc:	f000 fcd2 	bl	800b3a4 <__assert_func>
 800aa00:	0052      	lsls	r2, r2, #1
 800aa02:	3101      	adds	r1, #1
 800aa04:	e7f0      	b.n	800a9e8 <__s2b+0x18>
 800aa06:	9b08      	ldr	r3, [sp, #32]
 800aa08:	6143      	str	r3, [r0, #20]
 800aa0a:	2d09      	cmp	r5, #9
 800aa0c:	f04f 0301 	mov.w	r3, #1
 800aa10:	6103      	str	r3, [r0, #16]
 800aa12:	dd16      	ble.n	800aa42 <__s2b+0x72>
 800aa14:	f104 0909 	add.w	r9, r4, #9
 800aa18:	46c8      	mov	r8, r9
 800aa1a:	442c      	add	r4, r5
 800aa1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aa20:	4601      	mov	r1, r0
 800aa22:	3b30      	subs	r3, #48	; 0x30
 800aa24:	220a      	movs	r2, #10
 800aa26:	4630      	mov	r0, r6
 800aa28:	f7ff ff8c 	bl	800a944 <__multadd>
 800aa2c:	45a0      	cmp	r8, r4
 800aa2e:	d1f5      	bne.n	800aa1c <__s2b+0x4c>
 800aa30:	f1a5 0408 	sub.w	r4, r5, #8
 800aa34:	444c      	add	r4, r9
 800aa36:	1b2d      	subs	r5, r5, r4
 800aa38:	1963      	adds	r3, r4, r5
 800aa3a:	42bb      	cmp	r3, r7
 800aa3c:	db04      	blt.n	800aa48 <__s2b+0x78>
 800aa3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa42:	340a      	adds	r4, #10
 800aa44:	2509      	movs	r5, #9
 800aa46:	e7f6      	b.n	800aa36 <__s2b+0x66>
 800aa48:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa4c:	4601      	mov	r1, r0
 800aa4e:	3b30      	subs	r3, #48	; 0x30
 800aa50:	220a      	movs	r2, #10
 800aa52:	4630      	mov	r0, r6
 800aa54:	f7ff ff76 	bl	800a944 <__multadd>
 800aa58:	e7ee      	b.n	800aa38 <__s2b+0x68>
 800aa5a:	bf00      	nop
 800aa5c:	0800c378 	.word	0x0800c378
 800aa60:	0800c41b 	.word	0x0800c41b

0800aa64 <__hi0bits>:
 800aa64:	0c03      	lsrs	r3, r0, #16
 800aa66:	041b      	lsls	r3, r3, #16
 800aa68:	b9d3      	cbnz	r3, 800aaa0 <__hi0bits+0x3c>
 800aa6a:	0400      	lsls	r0, r0, #16
 800aa6c:	2310      	movs	r3, #16
 800aa6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aa72:	bf04      	itt	eq
 800aa74:	0200      	lsleq	r0, r0, #8
 800aa76:	3308      	addeq	r3, #8
 800aa78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aa7c:	bf04      	itt	eq
 800aa7e:	0100      	lsleq	r0, r0, #4
 800aa80:	3304      	addeq	r3, #4
 800aa82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aa86:	bf04      	itt	eq
 800aa88:	0080      	lsleq	r0, r0, #2
 800aa8a:	3302      	addeq	r3, #2
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	db05      	blt.n	800aa9c <__hi0bits+0x38>
 800aa90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aa94:	f103 0301 	add.w	r3, r3, #1
 800aa98:	bf08      	it	eq
 800aa9a:	2320      	moveq	r3, #32
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	4770      	bx	lr
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	e7e4      	b.n	800aa6e <__hi0bits+0xa>

0800aaa4 <__lo0bits>:
 800aaa4:	6803      	ldr	r3, [r0, #0]
 800aaa6:	f013 0207 	ands.w	r2, r3, #7
 800aaaa:	4601      	mov	r1, r0
 800aaac:	d00b      	beq.n	800aac6 <__lo0bits+0x22>
 800aaae:	07da      	lsls	r2, r3, #31
 800aab0:	d423      	bmi.n	800aafa <__lo0bits+0x56>
 800aab2:	0798      	lsls	r0, r3, #30
 800aab4:	bf49      	itett	mi
 800aab6:	085b      	lsrmi	r3, r3, #1
 800aab8:	089b      	lsrpl	r3, r3, #2
 800aaba:	2001      	movmi	r0, #1
 800aabc:	600b      	strmi	r3, [r1, #0]
 800aabe:	bf5c      	itt	pl
 800aac0:	600b      	strpl	r3, [r1, #0]
 800aac2:	2002      	movpl	r0, #2
 800aac4:	4770      	bx	lr
 800aac6:	b298      	uxth	r0, r3
 800aac8:	b9a8      	cbnz	r0, 800aaf6 <__lo0bits+0x52>
 800aaca:	0c1b      	lsrs	r3, r3, #16
 800aacc:	2010      	movs	r0, #16
 800aace:	b2da      	uxtb	r2, r3
 800aad0:	b90a      	cbnz	r2, 800aad6 <__lo0bits+0x32>
 800aad2:	3008      	adds	r0, #8
 800aad4:	0a1b      	lsrs	r3, r3, #8
 800aad6:	071a      	lsls	r2, r3, #28
 800aad8:	bf04      	itt	eq
 800aada:	091b      	lsreq	r3, r3, #4
 800aadc:	3004      	addeq	r0, #4
 800aade:	079a      	lsls	r2, r3, #30
 800aae0:	bf04      	itt	eq
 800aae2:	089b      	lsreq	r3, r3, #2
 800aae4:	3002      	addeq	r0, #2
 800aae6:	07da      	lsls	r2, r3, #31
 800aae8:	d403      	bmi.n	800aaf2 <__lo0bits+0x4e>
 800aaea:	085b      	lsrs	r3, r3, #1
 800aaec:	f100 0001 	add.w	r0, r0, #1
 800aaf0:	d005      	beq.n	800aafe <__lo0bits+0x5a>
 800aaf2:	600b      	str	r3, [r1, #0]
 800aaf4:	4770      	bx	lr
 800aaf6:	4610      	mov	r0, r2
 800aaf8:	e7e9      	b.n	800aace <__lo0bits+0x2a>
 800aafa:	2000      	movs	r0, #0
 800aafc:	4770      	bx	lr
 800aafe:	2020      	movs	r0, #32
 800ab00:	4770      	bx	lr
	...

0800ab04 <__i2b>:
 800ab04:	b510      	push	{r4, lr}
 800ab06:	460c      	mov	r4, r1
 800ab08:	2101      	movs	r1, #1
 800ab0a:	f7ff feb9 	bl	800a880 <_Balloc>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	b928      	cbnz	r0, 800ab1e <__i2b+0x1a>
 800ab12:	4b05      	ldr	r3, [pc, #20]	; (800ab28 <__i2b+0x24>)
 800ab14:	4805      	ldr	r0, [pc, #20]	; (800ab2c <__i2b+0x28>)
 800ab16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ab1a:	f000 fc43 	bl	800b3a4 <__assert_func>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	6144      	str	r4, [r0, #20]
 800ab22:	6103      	str	r3, [r0, #16]
 800ab24:	bd10      	pop	{r4, pc}
 800ab26:	bf00      	nop
 800ab28:	0800c378 	.word	0x0800c378
 800ab2c:	0800c41b 	.word	0x0800c41b

0800ab30 <__multiply>:
 800ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab34:	4691      	mov	r9, r2
 800ab36:	690a      	ldr	r2, [r1, #16]
 800ab38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	bfb8      	it	lt
 800ab40:	460b      	movlt	r3, r1
 800ab42:	460c      	mov	r4, r1
 800ab44:	bfbc      	itt	lt
 800ab46:	464c      	movlt	r4, r9
 800ab48:	4699      	movlt	r9, r3
 800ab4a:	6927      	ldr	r7, [r4, #16]
 800ab4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ab50:	68a3      	ldr	r3, [r4, #8]
 800ab52:	6861      	ldr	r1, [r4, #4]
 800ab54:	eb07 060a 	add.w	r6, r7, sl
 800ab58:	42b3      	cmp	r3, r6
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	bfb8      	it	lt
 800ab5e:	3101      	addlt	r1, #1
 800ab60:	f7ff fe8e 	bl	800a880 <_Balloc>
 800ab64:	b930      	cbnz	r0, 800ab74 <__multiply+0x44>
 800ab66:	4602      	mov	r2, r0
 800ab68:	4b44      	ldr	r3, [pc, #272]	; (800ac7c <__multiply+0x14c>)
 800ab6a:	4845      	ldr	r0, [pc, #276]	; (800ac80 <__multiply+0x150>)
 800ab6c:	f240 115d 	movw	r1, #349	; 0x15d
 800ab70:	f000 fc18 	bl	800b3a4 <__assert_func>
 800ab74:	f100 0514 	add.w	r5, r0, #20
 800ab78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ab7c:	462b      	mov	r3, r5
 800ab7e:	2200      	movs	r2, #0
 800ab80:	4543      	cmp	r3, r8
 800ab82:	d321      	bcc.n	800abc8 <__multiply+0x98>
 800ab84:	f104 0314 	add.w	r3, r4, #20
 800ab88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ab8c:	f109 0314 	add.w	r3, r9, #20
 800ab90:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ab94:	9202      	str	r2, [sp, #8]
 800ab96:	1b3a      	subs	r2, r7, r4
 800ab98:	3a15      	subs	r2, #21
 800ab9a:	f022 0203 	bic.w	r2, r2, #3
 800ab9e:	3204      	adds	r2, #4
 800aba0:	f104 0115 	add.w	r1, r4, #21
 800aba4:	428f      	cmp	r7, r1
 800aba6:	bf38      	it	cc
 800aba8:	2204      	movcc	r2, #4
 800abaa:	9201      	str	r2, [sp, #4]
 800abac:	9a02      	ldr	r2, [sp, #8]
 800abae:	9303      	str	r3, [sp, #12]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d80c      	bhi.n	800abce <__multiply+0x9e>
 800abb4:	2e00      	cmp	r6, #0
 800abb6:	dd03      	ble.n	800abc0 <__multiply+0x90>
 800abb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d05a      	beq.n	800ac76 <__multiply+0x146>
 800abc0:	6106      	str	r6, [r0, #16]
 800abc2:	b005      	add	sp, #20
 800abc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc8:	f843 2b04 	str.w	r2, [r3], #4
 800abcc:	e7d8      	b.n	800ab80 <__multiply+0x50>
 800abce:	f8b3 a000 	ldrh.w	sl, [r3]
 800abd2:	f1ba 0f00 	cmp.w	sl, #0
 800abd6:	d024      	beq.n	800ac22 <__multiply+0xf2>
 800abd8:	f104 0e14 	add.w	lr, r4, #20
 800abdc:	46a9      	mov	r9, r5
 800abde:	f04f 0c00 	mov.w	ip, #0
 800abe2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800abe6:	f8d9 1000 	ldr.w	r1, [r9]
 800abea:	fa1f fb82 	uxth.w	fp, r2
 800abee:	b289      	uxth	r1, r1
 800abf0:	fb0a 110b 	mla	r1, sl, fp, r1
 800abf4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800abf8:	f8d9 2000 	ldr.w	r2, [r9]
 800abfc:	4461      	add	r1, ip
 800abfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac02:	fb0a c20b 	mla	r2, sl, fp, ip
 800ac06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ac0a:	b289      	uxth	r1, r1
 800ac0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ac10:	4577      	cmp	r7, lr
 800ac12:	f849 1b04 	str.w	r1, [r9], #4
 800ac16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac1a:	d8e2      	bhi.n	800abe2 <__multiply+0xb2>
 800ac1c:	9a01      	ldr	r2, [sp, #4]
 800ac1e:	f845 c002 	str.w	ip, [r5, r2]
 800ac22:	9a03      	ldr	r2, [sp, #12]
 800ac24:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ac28:	3304      	adds	r3, #4
 800ac2a:	f1b9 0f00 	cmp.w	r9, #0
 800ac2e:	d020      	beq.n	800ac72 <__multiply+0x142>
 800ac30:	6829      	ldr	r1, [r5, #0]
 800ac32:	f104 0c14 	add.w	ip, r4, #20
 800ac36:	46ae      	mov	lr, r5
 800ac38:	f04f 0a00 	mov.w	sl, #0
 800ac3c:	f8bc b000 	ldrh.w	fp, [ip]
 800ac40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ac44:	fb09 220b 	mla	r2, r9, fp, r2
 800ac48:	4492      	add	sl, r2
 800ac4a:	b289      	uxth	r1, r1
 800ac4c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ac50:	f84e 1b04 	str.w	r1, [lr], #4
 800ac54:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ac58:	f8be 1000 	ldrh.w	r1, [lr]
 800ac5c:	0c12      	lsrs	r2, r2, #16
 800ac5e:	fb09 1102 	mla	r1, r9, r2, r1
 800ac62:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ac66:	4567      	cmp	r7, ip
 800ac68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ac6c:	d8e6      	bhi.n	800ac3c <__multiply+0x10c>
 800ac6e:	9a01      	ldr	r2, [sp, #4]
 800ac70:	50a9      	str	r1, [r5, r2]
 800ac72:	3504      	adds	r5, #4
 800ac74:	e79a      	b.n	800abac <__multiply+0x7c>
 800ac76:	3e01      	subs	r6, #1
 800ac78:	e79c      	b.n	800abb4 <__multiply+0x84>
 800ac7a:	bf00      	nop
 800ac7c:	0800c378 	.word	0x0800c378
 800ac80:	0800c41b 	.word	0x0800c41b

0800ac84 <__pow5mult>:
 800ac84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac88:	4615      	mov	r5, r2
 800ac8a:	f012 0203 	ands.w	r2, r2, #3
 800ac8e:	4606      	mov	r6, r0
 800ac90:	460f      	mov	r7, r1
 800ac92:	d007      	beq.n	800aca4 <__pow5mult+0x20>
 800ac94:	4c25      	ldr	r4, [pc, #148]	; (800ad2c <__pow5mult+0xa8>)
 800ac96:	3a01      	subs	r2, #1
 800ac98:	2300      	movs	r3, #0
 800ac9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac9e:	f7ff fe51 	bl	800a944 <__multadd>
 800aca2:	4607      	mov	r7, r0
 800aca4:	10ad      	asrs	r5, r5, #2
 800aca6:	d03d      	beq.n	800ad24 <__pow5mult+0xa0>
 800aca8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800acaa:	b97c      	cbnz	r4, 800accc <__pow5mult+0x48>
 800acac:	2010      	movs	r0, #16
 800acae:	f000 fba9 	bl	800b404 <malloc>
 800acb2:	4602      	mov	r2, r0
 800acb4:	6270      	str	r0, [r6, #36]	; 0x24
 800acb6:	b928      	cbnz	r0, 800acc4 <__pow5mult+0x40>
 800acb8:	4b1d      	ldr	r3, [pc, #116]	; (800ad30 <__pow5mult+0xac>)
 800acba:	481e      	ldr	r0, [pc, #120]	; (800ad34 <__pow5mult+0xb0>)
 800acbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800acc0:	f000 fb70 	bl	800b3a4 <__assert_func>
 800acc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acc8:	6004      	str	r4, [r0, #0]
 800acca:	60c4      	str	r4, [r0, #12]
 800accc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800acd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800acd4:	b94c      	cbnz	r4, 800acea <__pow5mult+0x66>
 800acd6:	f240 2171 	movw	r1, #625	; 0x271
 800acda:	4630      	mov	r0, r6
 800acdc:	f7ff ff12 	bl	800ab04 <__i2b>
 800ace0:	2300      	movs	r3, #0
 800ace2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ace6:	4604      	mov	r4, r0
 800ace8:	6003      	str	r3, [r0, #0]
 800acea:	f04f 0900 	mov.w	r9, #0
 800acee:	07eb      	lsls	r3, r5, #31
 800acf0:	d50a      	bpl.n	800ad08 <__pow5mult+0x84>
 800acf2:	4639      	mov	r1, r7
 800acf4:	4622      	mov	r2, r4
 800acf6:	4630      	mov	r0, r6
 800acf8:	f7ff ff1a 	bl	800ab30 <__multiply>
 800acfc:	4639      	mov	r1, r7
 800acfe:	4680      	mov	r8, r0
 800ad00:	4630      	mov	r0, r6
 800ad02:	f7ff fdfd 	bl	800a900 <_Bfree>
 800ad06:	4647      	mov	r7, r8
 800ad08:	106d      	asrs	r5, r5, #1
 800ad0a:	d00b      	beq.n	800ad24 <__pow5mult+0xa0>
 800ad0c:	6820      	ldr	r0, [r4, #0]
 800ad0e:	b938      	cbnz	r0, 800ad20 <__pow5mult+0x9c>
 800ad10:	4622      	mov	r2, r4
 800ad12:	4621      	mov	r1, r4
 800ad14:	4630      	mov	r0, r6
 800ad16:	f7ff ff0b 	bl	800ab30 <__multiply>
 800ad1a:	6020      	str	r0, [r4, #0]
 800ad1c:	f8c0 9000 	str.w	r9, [r0]
 800ad20:	4604      	mov	r4, r0
 800ad22:	e7e4      	b.n	800acee <__pow5mult+0x6a>
 800ad24:	4638      	mov	r0, r7
 800ad26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad2a:	bf00      	nop
 800ad2c:	0800c568 	.word	0x0800c568
 800ad30:	0800c404 	.word	0x0800c404
 800ad34:	0800c41b 	.word	0x0800c41b

0800ad38 <__lshift>:
 800ad38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	6849      	ldr	r1, [r1, #4]
 800ad40:	6923      	ldr	r3, [r4, #16]
 800ad42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad46:	68a3      	ldr	r3, [r4, #8]
 800ad48:	4607      	mov	r7, r0
 800ad4a:	4691      	mov	r9, r2
 800ad4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad50:	f108 0601 	add.w	r6, r8, #1
 800ad54:	42b3      	cmp	r3, r6
 800ad56:	db0b      	blt.n	800ad70 <__lshift+0x38>
 800ad58:	4638      	mov	r0, r7
 800ad5a:	f7ff fd91 	bl	800a880 <_Balloc>
 800ad5e:	4605      	mov	r5, r0
 800ad60:	b948      	cbnz	r0, 800ad76 <__lshift+0x3e>
 800ad62:	4602      	mov	r2, r0
 800ad64:	4b2a      	ldr	r3, [pc, #168]	; (800ae10 <__lshift+0xd8>)
 800ad66:	482b      	ldr	r0, [pc, #172]	; (800ae14 <__lshift+0xdc>)
 800ad68:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ad6c:	f000 fb1a 	bl	800b3a4 <__assert_func>
 800ad70:	3101      	adds	r1, #1
 800ad72:	005b      	lsls	r3, r3, #1
 800ad74:	e7ee      	b.n	800ad54 <__lshift+0x1c>
 800ad76:	2300      	movs	r3, #0
 800ad78:	f100 0114 	add.w	r1, r0, #20
 800ad7c:	f100 0210 	add.w	r2, r0, #16
 800ad80:	4618      	mov	r0, r3
 800ad82:	4553      	cmp	r3, sl
 800ad84:	db37      	blt.n	800adf6 <__lshift+0xbe>
 800ad86:	6920      	ldr	r0, [r4, #16]
 800ad88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad8c:	f104 0314 	add.w	r3, r4, #20
 800ad90:	f019 091f 	ands.w	r9, r9, #31
 800ad94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ad9c:	d02f      	beq.n	800adfe <__lshift+0xc6>
 800ad9e:	f1c9 0e20 	rsb	lr, r9, #32
 800ada2:	468a      	mov	sl, r1
 800ada4:	f04f 0c00 	mov.w	ip, #0
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	fa02 f209 	lsl.w	r2, r2, r9
 800adae:	ea42 020c 	orr.w	r2, r2, ip
 800adb2:	f84a 2b04 	str.w	r2, [sl], #4
 800adb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800adba:	4298      	cmp	r0, r3
 800adbc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800adc0:	d8f2      	bhi.n	800ada8 <__lshift+0x70>
 800adc2:	1b03      	subs	r3, r0, r4
 800adc4:	3b15      	subs	r3, #21
 800adc6:	f023 0303 	bic.w	r3, r3, #3
 800adca:	3304      	adds	r3, #4
 800adcc:	f104 0215 	add.w	r2, r4, #21
 800add0:	4290      	cmp	r0, r2
 800add2:	bf38      	it	cc
 800add4:	2304      	movcc	r3, #4
 800add6:	f841 c003 	str.w	ip, [r1, r3]
 800adda:	f1bc 0f00 	cmp.w	ip, #0
 800adde:	d001      	beq.n	800ade4 <__lshift+0xac>
 800ade0:	f108 0602 	add.w	r6, r8, #2
 800ade4:	3e01      	subs	r6, #1
 800ade6:	4638      	mov	r0, r7
 800ade8:	612e      	str	r6, [r5, #16]
 800adea:	4621      	mov	r1, r4
 800adec:	f7ff fd88 	bl	800a900 <_Bfree>
 800adf0:	4628      	mov	r0, r5
 800adf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adf6:	f842 0f04 	str.w	r0, [r2, #4]!
 800adfa:	3301      	adds	r3, #1
 800adfc:	e7c1      	b.n	800ad82 <__lshift+0x4a>
 800adfe:	3904      	subs	r1, #4
 800ae00:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae04:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae08:	4298      	cmp	r0, r3
 800ae0a:	d8f9      	bhi.n	800ae00 <__lshift+0xc8>
 800ae0c:	e7ea      	b.n	800ade4 <__lshift+0xac>
 800ae0e:	bf00      	nop
 800ae10:	0800c378 	.word	0x0800c378
 800ae14:	0800c41b 	.word	0x0800c41b

0800ae18 <__mcmp>:
 800ae18:	b530      	push	{r4, r5, lr}
 800ae1a:	6902      	ldr	r2, [r0, #16]
 800ae1c:	690c      	ldr	r4, [r1, #16]
 800ae1e:	1b12      	subs	r2, r2, r4
 800ae20:	d10e      	bne.n	800ae40 <__mcmp+0x28>
 800ae22:	f100 0314 	add.w	r3, r0, #20
 800ae26:	3114      	adds	r1, #20
 800ae28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ae2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ae30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ae34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ae38:	42a5      	cmp	r5, r4
 800ae3a:	d003      	beq.n	800ae44 <__mcmp+0x2c>
 800ae3c:	d305      	bcc.n	800ae4a <__mcmp+0x32>
 800ae3e:	2201      	movs	r2, #1
 800ae40:	4610      	mov	r0, r2
 800ae42:	bd30      	pop	{r4, r5, pc}
 800ae44:	4283      	cmp	r3, r0
 800ae46:	d3f3      	bcc.n	800ae30 <__mcmp+0x18>
 800ae48:	e7fa      	b.n	800ae40 <__mcmp+0x28>
 800ae4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae4e:	e7f7      	b.n	800ae40 <__mcmp+0x28>

0800ae50 <__mdiff>:
 800ae50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae54:	460c      	mov	r4, r1
 800ae56:	4606      	mov	r6, r0
 800ae58:	4611      	mov	r1, r2
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	4690      	mov	r8, r2
 800ae5e:	f7ff ffdb 	bl	800ae18 <__mcmp>
 800ae62:	1e05      	subs	r5, r0, #0
 800ae64:	d110      	bne.n	800ae88 <__mdiff+0x38>
 800ae66:	4629      	mov	r1, r5
 800ae68:	4630      	mov	r0, r6
 800ae6a:	f7ff fd09 	bl	800a880 <_Balloc>
 800ae6e:	b930      	cbnz	r0, 800ae7e <__mdiff+0x2e>
 800ae70:	4b3a      	ldr	r3, [pc, #232]	; (800af5c <__mdiff+0x10c>)
 800ae72:	4602      	mov	r2, r0
 800ae74:	f240 2132 	movw	r1, #562	; 0x232
 800ae78:	4839      	ldr	r0, [pc, #228]	; (800af60 <__mdiff+0x110>)
 800ae7a:	f000 fa93 	bl	800b3a4 <__assert_func>
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae88:	bfa4      	itt	ge
 800ae8a:	4643      	movge	r3, r8
 800ae8c:	46a0      	movge	r8, r4
 800ae8e:	4630      	mov	r0, r6
 800ae90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ae94:	bfa6      	itte	ge
 800ae96:	461c      	movge	r4, r3
 800ae98:	2500      	movge	r5, #0
 800ae9a:	2501      	movlt	r5, #1
 800ae9c:	f7ff fcf0 	bl	800a880 <_Balloc>
 800aea0:	b920      	cbnz	r0, 800aeac <__mdiff+0x5c>
 800aea2:	4b2e      	ldr	r3, [pc, #184]	; (800af5c <__mdiff+0x10c>)
 800aea4:	4602      	mov	r2, r0
 800aea6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aeaa:	e7e5      	b.n	800ae78 <__mdiff+0x28>
 800aeac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aeb0:	6926      	ldr	r6, [r4, #16]
 800aeb2:	60c5      	str	r5, [r0, #12]
 800aeb4:	f104 0914 	add.w	r9, r4, #20
 800aeb8:	f108 0514 	add.w	r5, r8, #20
 800aebc:	f100 0e14 	add.w	lr, r0, #20
 800aec0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aec4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aec8:	f108 0210 	add.w	r2, r8, #16
 800aecc:	46f2      	mov	sl, lr
 800aece:	2100      	movs	r1, #0
 800aed0:	f859 3b04 	ldr.w	r3, [r9], #4
 800aed4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aed8:	fa1f f883 	uxth.w	r8, r3
 800aedc:	fa11 f18b 	uxtah	r1, r1, fp
 800aee0:	0c1b      	lsrs	r3, r3, #16
 800aee2:	eba1 0808 	sub.w	r8, r1, r8
 800aee6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aeea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aeee:	fa1f f888 	uxth.w	r8, r8
 800aef2:	1419      	asrs	r1, r3, #16
 800aef4:	454e      	cmp	r6, r9
 800aef6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aefa:	f84a 3b04 	str.w	r3, [sl], #4
 800aefe:	d8e7      	bhi.n	800aed0 <__mdiff+0x80>
 800af00:	1b33      	subs	r3, r6, r4
 800af02:	3b15      	subs	r3, #21
 800af04:	f023 0303 	bic.w	r3, r3, #3
 800af08:	3304      	adds	r3, #4
 800af0a:	3415      	adds	r4, #21
 800af0c:	42a6      	cmp	r6, r4
 800af0e:	bf38      	it	cc
 800af10:	2304      	movcc	r3, #4
 800af12:	441d      	add	r5, r3
 800af14:	4473      	add	r3, lr
 800af16:	469e      	mov	lr, r3
 800af18:	462e      	mov	r6, r5
 800af1a:	4566      	cmp	r6, ip
 800af1c:	d30e      	bcc.n	800af3c <__mdiff+0xec>
 800af1e:	f10c 0203 	add.w	r2, ip, #3
 800af22:	1b52      	subs	r2, r2, r5
 800af24:	f022 0203 	bic.w	r2, r2, #3
 800af28:	3d03      	subs	r5, #3
 800af2a:	45ac      	cmp	ip, r5
 800af2c:	bf38      	it	cc
 800af2e:	2200      	movcc	r2, #0
 800af30:	441a      	add	r2, r3
 800af32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800af36:	b17b      	cbz	r3, 800af58 <__mdiff+0x108>
 800af38:	6107      	str	r7, [r0, #16]
 800af3a:	e7a3      	b.n	800ae84 <__mdiff+0x34>
 800af3c:	f856 8b04 	ldr.w	r8, [r6], #4
 800af40:	fa11 f288 	uxtah	r2, r1, r8
 800af44:	1414      	asrs	r4, r2, #16
 800af46:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800af4a:	b292      	uxth	r2, r2
 800af4c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800af50:	f84e 2b04 	str.w	r2, [lr], #4
 800af54:	1421      	asrs	r1, r4, #16
 800af56:	e7e0      	b.n	800af1a <__mdiff+0xca>
 800af58:	3f01      	subs	r7, #1
 800af5a:	e7ea      	b.n	800af32 <__mdiff+0xe2>
 800af5c:	0800c378 	.word	0x0800c378
 800af60:	0800c41b 	.word	0x0800c41b

0800af64 <__ulp>:
 800af64:	b082      	sub	sp, #8
 800af66:	ed8d 0b00 	vstr	d0, [sp]
 800af6a:	9b01      	ldr	r3, [sp, #4]
 800af6c:	4912      	ldr	r1, [pc, #72]	; (800afb8 <__ulp+0x54>)
 800af6e:	4019      	ands	r1, r3
 800af70:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800af74:	2900      	cmp	r1, #0
 800af76:	dd05      	ble.n	800af84 <__ulp+0x20>
 800af78:	2200      	movs	r2, #0
 800af7a:	460b      	mov	r3, r1
 800af7c:	ec43 2b10 	vmov	d0, r2, r3
 800af80:	b002      	add	sp, #8
 800af82:	4770      	bx	lr
 800af84:	4249      	negs	r1, r1
 800af86:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800af8a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800af8e:	f04f 0200 	mov.w	r2, #0
 800af92:	f04f 0300 	mov.w	r3, #0
 800af96:	da04      	bge.n	800afa2 <__ulp+0x3e>
 800af98:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800af9c:	fa41 f300 	asr.w	r3, r1, r0
 800afa0:	e7ec      	b.n	800af7c <__ulp+0x18>
 800afa2:	f1a0 0114 	sub.w	r1, r0, #20
 800afa6:	291e      	cmp	r1, #30
 800afa8:	bfda      	itte	le
 800afaa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800afae:	fa20 f101 	lsrle.w	r1, r0, r1
 800afb2:	2101      	movgt	r1, #1
 800afb4:	460a      	mov	r2, r1
 800afb6:	e7e1      	b.n	800af7c <__ulp+0x18>
 800afb8:	7ff00000 	.word	0x7ff00000

0800afbc <__b2d>:
 800afbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afbe:	6905      	ldr	r5, [r0, #16]
 800afc0:	f100 0714 	add.w	r7, r0, #20
 800afc4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800afc8:	1f2e      	subs	r6, r5, #4
 800afca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800afce:	4620      	mov	r0, r4
 800afd0:	f7ff fd48 	bl	800aa64 <__hi0bits>
 800afd4:	f1c0 0320 	rsb	r3, r0, #32
 800afd8:	280a      	cmp	r0, #10
 800afda:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b058 <__b2d+0x9c>
 800afde:	600b      	str	r3, [r1, #0]
 800afe0:	dc14      	bgt.n	800b00c <__b2d+0x50>
 800afe2:	f1c0 0e0b 	rsb	lr, r0, #11
 800afe6:	fa24 f10e 	lsr.w	r1, r4, lr
 800afea:	42b7      	cmp	r7, r6
 800afec:	ea41 030c 	orr.w	r3, r1, ip
 800aff0:	bf34      	ite	cc
 800aff2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aff6:	2100      	movcs	r1, #0
 800aff8:	3015      	adds	r0, #21
 800affa:	fa04 f000 	lsl.w	r0, r4, r0
 800affe:	fa21 f10e 	lsr.w	r1, r1, lr
 800b002:	ea40 0201 	orr.w	r2, r0, r1
 800b006:	ec43 2b10 	vmov	d0, r2, r3
 800b00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b00c:	42b7      	cmp	r7, r6
 800b00e:	bf3a      	itte	cc
 800b010:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b014:	f1a5 0608 	subcc.w	r6, r5, #8
 800b018:	2100      	movcs	r1, #0
 800b01a:	380b      	subs	r0, #11
 800b01c:	d017      	beq.n	800b04e <__b2d+0x92>
 800b01e:	f1c0 0c20 	rsb	ip, r0, #32
 800b022:	fa04 f500 	lsl.w	r5, r4, r0
 800b026:	42be      	cmp	r6, r7
 800b028:	fa21 f40c 	lsr.w	r4, r1, ip
 800b02c:	ea45 0504 	orr.w	r5, r5, r4
 800b030:	bf8c      	ite	hi
 800b032:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b036:	2400      	movls	r4, #0
 800b038:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b03c:	fa01 f000 	lsl.w	r0, r1, r0
 800b040:	fa24 f40c 	lsr.w	r4, r4, ip
 800b044:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b048:	ea40 0204 	orr.w	r2, r0, r4
 800b04c:	e7db      	b.n	800b006 <__b2d+0x4a>
 800b04e:	ea44 030c 	orr.w	r3, r4, ip
 800b052:	460a      	mov	r2, r1
 800b054:	e7d7      	b.n	800b006 <__b2d+0x4a>
 800b056:	bf00      	nop
 800b058:	3ff00000 	.word	0x3ff00000

0800b05c <__d2b>:
 800b05c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b060:	4689      	mov	r9, r1
 800b062:	2101      	movs	r1, #1
 800b064:	ec57 6b10 	vmov	r6, r7, d0
 800b068:	4690      	mov	r8, r2
 800b06a:	f7ff fc09 	bl	800a880 <_Balloc>
 800b06e:	4604      	mov	r4, r0
 800b070:	b930      	cbnz	r0, 800b080 <__d2b+0x24>
 800b072:	4602      	mov	r2, r0
 800b074:	4b25      	ldr	r3, [pc, #148]	; (800b10c <__d2b+0xb0>)
 800b076:	4826      	ldr	r0, [pc, #152]	; (800b110 <__d2b+0xb4>)
 800b078:	f240 310a 	movw	r1, #778	; 0x30a
 800b07c:	f000 f992 	bl	800b3a4 <__assert_func>
 800b080:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b084:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b088:	bb35      	cbnz	r5, 800b0d8 <__d2b+0x7c>
 800b08a:	2e00      	cmp	r6, #0
 800b08c:	9301      	str	r3, [sp, #4]
 800b08e:	d028      	beq.n	800b0e2 <__d2b+0x86>
 800b090:	4668      	mov	r0, sp
 800b092:	9600      	str	r6, [sp, #0]
 800b094:	f7ff fd06 	bl	800aaa4 <__lo0bits>
 800b098:	9900      	ldr	r1, [sp, #0]
 800b09a:	b300      	cbz	r0, 800b0de <__d2b+0x82>
 800b09c:	9a01      	ldr	r2, [sp, #4]
 800b09e:	f1c0 0320 	rsb	r3, r0, #32
 800b0a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a6:	430b      	orrs	r3, r1
 800b0a8:	40c2      	lsrs	r2, r0
 800b0aa:	6163      	str	r3, [r4, #20]
 800b0ac:	9201      	str	r2, [sp, #4]
 800b0ae:	9b01      	ldr	r3, [sp, #4]
 800b0b0:	61a3      	str	r3, [r4, #24]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	bf14      	ite	ne
 800b0b6:	2202      	movne	r2, #2
 800b0b8:	2201      	moveq	r2, #1
 800b0ba:	6122      	str	r2, [r4, #16]
 800b0bc:	b1d5      	cbz	r5, 800b0f4 <__d2b+0x98>
 800b0be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b0c2:	4405      	add	r5, r0
 800b0c4:	f8c9 5000 	str.w	r5, [r9]
 800b0c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b0cc:	f8c8 0000 	str.w	r0, [r8]
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	b003      	add	sp, #12
 800b0d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0dc:	e7d5      	b.n	800b08a <__d2b+0x2e>
 800b0de:	6161      	str	r1, [r4, #20]
 800b0e0:	e7e5      	b.n	800b0ae <__d2b+0x52>
 800b0e2:	a801      	add	r0, sp, #4
 800b0e4:	f7ff fcde 	bl	800aaa4 <__lo0bits>
 800b0e8:	9b01      	ldr	r3, [sp, #4]
 800b0ea:	6163      	str	r3, [r4, #20]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	6122      	str	r2, [r4, #16]
 800b0f0:	3020      	adds	r0, #32
 800b0f2:	e7e3      	b.n	800b0bc <__d2b+0x60>
 800b0f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b0f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b0fc:	f8c9 0000 	str.w	r0, [r9]
 800b100:	6918      	ldr	r0, [r3, #16]
 800b102:	f7ff fcaf 	bl	800aa64 <__hi0bits>
 800b106:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b10a:	e7df      	b.n	800b0cc <__d2b+0x70>
 800b10c:	0800c378 	.word	0x0800c378
 800b110:	0800c41b 	.word	0x0800c41b

0800b114 <__ratio>:
 800b114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b118:	4688      	mov	r8, r1
 800b11a:	4669      	mov	r1, sp
 800b11c:	4681      	mov	r9, r0
 800b11e:	f7ff ff4d 	bl	800afbc <__b2d>
 800b122:	a901      	add	r1, sp, #4
 800b124:	4640      	mov	r0, r8
 800b126:	ec55 4b10 	vmov	r4, r5, d0
 800b12a:	f7ff ff47 	bl	800afbc <__b2d>
 800b12e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b132:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b136:	eba3 0c02 	sub.w	ip, r3, r2
 800b13a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b13e:	1a9b      	subs	r3, r3, r2
 800b140:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b144:	ec51 0b10 	vmov	r0, r1, d0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	bfd6      	itet	le
 800b14c:	460a      	movle	r2, r1
 800b14e:	462a      	movgt	r2, r5
 800b150:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b154:	468b      	mov	fp, r1
 800b156:	462f      	mov	r7, r5
 800b158:	bfd4      	ite	le
 800b15a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b15e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b162:	4620      	mov	r0, r4
 800b164:	ee10 2a10 	vmov	r2, s0
 800b168:	465b      	mov	r3, fp
 800b16a:	4639      	mov	r1, r7
 800b16c:	f7f5 fb6e 	bl	800084c <__aeabi_ddiv>
 800b170:	ec41 0b10 	vmov	d0, r0, r1
 800b174:	b003      	add	sp, #12
 800b176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b17a <__copybits>:
 800b17a:	3901      	subs	r1, #1
 800b17c:	b570      	push	{r4, r5, r6, lr}
 800b17e:	1149      	asrs	r1, r1, #5
 800b180:	6914      	ldr	r4, [r2, #16]
 800b182:	3101      	adds	r1, #1
 800b184:	f102 0314 	add.w	r3, r2, #20
 800b188:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b18c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b190:	1f05      	subs	r5, r0, #4
 800b192:	42a3      	cmp	r3, r4
 800b194:	d30c      	bcc.n	800b1b0 <__copybits+0x36>
 800b196:	1aa3      	subs	r3, r4, r2
 800b198:	3b11      	subs	r3, #17
 800b19a:	f023 0303 	bic.w	r3, r3, #3
 800b19e:	3211      	adds	r2, #17
 800b1a0:	42a2      	cmp	r2, r4
 800b1a2:	bf88      	it	hi
 800b1a4:	2300      	movhi	r3, #0
 800b1a6:	4418      	add	r0, r3
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	4288      	cmp	r0, r1
 800b1ac:	d305      	bcc.n	800b1ba <__copybits+0x40>
 800b1ae:	bd70      	pop	{r4, r5, r6, pc}
 800b1b0:	f853 6b04 	ldr.w	r6, [r3], #4
 800b1b4:	f845 6f04 	str.w	r6, [r5, #4]!
 800b1b8:	e7eb      	b.n	800b192 <__copybits+0x18>
 800b1ba:	f840 3b04 	str.w	r3, [r0], #4
 800b1be:	e7f4      	b.n	800b1aa <__copybits+0x30>

0800b1c0 <__any_on>:
 800b1c0:	f100 0214 	add.w	r2, r0, #20
 800b1c4:	6900      	ldr	r0, [r0, #16]
 800b1c6:	114b      	asrs	r3, r1, #5
 800b1c8:	4298      	cmp	r0, r3
 800b1ca:	b510      	push	{r4, lr}
 800b1cc:	db11      	blt.n	800b1f2 <__any_on+0x32>
 800b1ce:	dd0a      	ble.n	800b1e6 <__any_on+0x26>
 800b1d0:	f011 011f 	ands.w	r1, r1, #31
 800b1d4:	d007      	beq.n	800b1e6 <__any_on+0x26>
 800b1d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b1da:	fa24 f001 	lsr.w	r0, r4, r1
 800b1de:	fa00 f101 	lsl.w	r1, r0, r1
 800b1e2:	428c      	cmp	r4, r1
 800b1e4:	d10b      	bne.n	800b1fe <__any_on+0x3e>
 800b1e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d803      	bhi.n	800b1f6 <__any_on+0x36>
 800b1ee:	2000      	movs	r0, #0
 800b1f0:	bd10      	pop	{r4, pc}
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	e7f7      	b.n	800b1e6 <__any_on+0x26>
 800b1f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b1fa:	2900      	cmp	r1, #0
 800b1fc:	d0f5      	beq.n	800b1ea <__any_on+0x2a>
 800b1fe:	2001      	movs	r0, #1
 800b200:	e7f6      	b.n	800b1f0 <__any_on+0x30>

0800b202 <_calloc_r>:
 800b202:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b204:	fba1 2402 	umull	r2, r4, r1, r2
 800b208:	b94c      	cbnz	r4, 800b21e <_calloc_r+0x1c>
 800b20a:	4611      	mov	r1, r2
 800b20c:	9201      	str	r2, [sp, #4]
 800b20e:	f000 f82f 	bl	800b270 <_malloc_r>
 800b212:	9a01      	ldr	r2, [sp, #4]
 800b214:	4605      	mov	r5, r0
 800b216:	b930      	cbnz	r0, 800b226 <_calloc_r+0x24>
 800b218:	4628      	mov	r0, r5
 800b21a:	b003      	add	sp, #12
 800b21c:	bd30      	pop	{r4, r5, pc}
 800b21e:	220c      	movs	r2, #12
 800b220:	6002      	str	r2, [r0, #0]
 800b222:	2500      	movs	r5, #0
 800b224:	e7f8      	b.n	800b218 <_calloc_r+0x16>
 800b226:	4621      	mov	r1, r4
 800b228:	f7fe f95c 	bl	80094e4 <memset>
 800b22c:	e7f4      	b.n	800b218 <_calloc_r+0x16>
	...

0800b230 <sbrk_aligned>:
 800b230:	b570      	push	{r4, r5, r6, lr}
 800b232:	4e0e      	ldr	r6, [pc, #56]	; (800b26c <sbrk_aligned+0x3c>)
 800b234:	460c      	mov	r4, r1
 800b236:	6831      	ldr	r1, [r6, #0]
 800b238:	4605      	mov	r5, r0
 800b23a:	b911      	cbnz	r1, 800b242 <sbrk_aligned+0x12>
 800b23c:	f000 f894 	bl	800b368 <_sbrk_r>
 800b240:	6030      	str	r0, [r6, #0]
 800b242:	4621      	mov	r1, r4
 800b244:	4628      	mov	r0, r5
 800b246:	f000 f88f 	bl	800b368 <_sbrk_r>
 800b24a:	1c43      	adds	r3, r0, #1
 800b24c:	d00a      	beq.n	800b264 <sbrk_aligned+0x34>
 800b24e:	1cc4      	adds	r4, r0, #3
 800b250:	f024 0403 	bic.w	r4, r4, #3
 800b254:	42a0      	cmp	r0, r4
 800b256:	d007      	beq.n	800b268 <sbrk_aligned+0x38>
 800b258:	1a21      	subs	r1, r4, r0
 800b25a:	4628      	mov	r0, r5
 800b25c:	f000 f884 	bl	800b368 <_sbrk_r>
 800b260:	3001      	adds	r0, #1
 800b262:	d101      	bne.n	800b268 <sbrk_aligned+0x38>
 800b264:	f04f 34ff 	mov.w	r4, #4294967295
 800b268:	4620      	mov	r0, r4
 800b26a:	bd70      	pop	{r4, r5, r6, pc}
 800b26c:	2000209c 	.word	0x2000209c

0800b270 <_malloc_r>:
 800b270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b274:	1ccd      	adds	r5, r1, #3
 800b276:	f025 0503 	bic.w	r5, r5, #3
 800b27a:	3508      	adds	r5, #8
 800b27c:	2d0c      	cmp	r5, #12
 800b27e:	bf38      	it	cc
 800b280:	250c      	movcc	r5, #12
 800b282:	2d00      	cmp	r5, #0
 800b284:	4607      	mov	r7, r0
 800b286:	db01      	blt.n	800b28c <_malloc_r+0x1c>
 800b288:	42a9      	cmp	r1, r5
 800b28a:	d905      	bls.n	800b298 <_malloc_r+0x28>
 800b28c:	230c      	movs	r3, #12
 800b28e:	603b      	str	r3, [r7, #0]
 800b290:	2600      	movs	r6, #0
 800b292:	4630      	mov	r0, r6
 800b294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b298:	4e2e      	ldr	r6, [pc, #184]	; (800b354 <_malloc_r+0xe4>)
 800b29a:	f000 f8bb 	bl	800b414 <__malloc_lock>
 800b29e:	6833      	ldr	r3, [r6, #0]
 800b2a0:	461c      	mov	r4, r3
 800b2a2:	bb34      	cbnz	r4, 800b2f2 <_malloc_r+0x82>
 800b2a4:	4629      	mov	r1, r5
 800b2a6:	4638      	mov	r0, r7
 800b2a8:	f7ff ffc2 	bl	800b230 <sbrk_aligned>
 800b2ac:	1c43      	adds	r3, r0, #1
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	d14d      	bne.n	800b34e <_malloc_r+0xde>
 800b2b2:	6834      	ldr	r4, [r6, #0]
 800b2b4:	4626      	mov	r6, r4
 800b2b6:	2e00      	cmp	r6, #0
 800b2b8:	d140      	bne.n	800b33c <_malloc_r+0xcc>
 800b2ba:	6823      	ldr	r3, [r4, #0]
 800b2bc:	4631      	mov	r1, r6
 800b2be:	4638      	mov	r0, r7
 800b2c0:	eb04 0803 	add.w	r8, r4, r3
 800b2c4:	f000 f850 	bl	800b368 <_sbrk_r>
 800b2c8:	4580      	cmp	r8, r0
 800b2ca:	d13a      	bne.n	800b342 <_malloc_r+0xd2>
 800b2cc:	6821      	ldr	r1, [r4, #0]
 800b2ce:	3503      	adds	r5, #3
 800b2d0:	1a6d      	subs	r5, r5, r1
 800b2d2:	f025 0503 	bic.w	r5, r5, #3
 800b2d6:	3508      	adds	r5, #8
 800b2d8:	2d0c      	cmp	r5, #12
 800b2da:	bf38      	it	cc
 800b2dc:	250c      	movcc	r5, #12
 800b2de:	4629      	mov	r1, r5
 800b2e0:	4638      	mov	r0, r7
 800b2e2:	f7ff ffa5 	bl	800b230 <sbrk_aligned>
 800b2e6:	3001      	adds	r0, #1
 800b2e8:	d02b      	beq.n	800b342 <_malloc_r+0xd2>
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	442b      	add	r3, r5
 800b2ee:	6023      	str	r3, [r4, #0]
 800b2f0:	e00e      	b.n	800b310 <_malloc_r+0xa0>
 800b2f2:	6822      	ldr	r2, [r4, #0]
 800b2f4:	1b52      	subs	r2, r2, r5
 800b2f6:	d41e      	bmi.n	800b336 <_malloc_r+0xc6>
 800b2f8:	2a0b      	cmp	r2, #11
 800b2fa:	d916      	bls.n	800b32a <_malloc_r+0xba>
 800b2fc:	1961      	adds	r1, r4, r5
 800b2fe:	42a3      	cmp	r3, r4
 800b300:	6025      	str	r5, [r4, #0]
 800b302:	bf18      	it	ne
 800b304:	6059      	strne	r1, [r3, #4]
 800b306:	6863      	ldr	r3, [r4, #4]
 800b308:	bf08      	it	eq
 800b30a:	6031      	streq	r1, [r6, #0]
 800b30c:	5162      	str	r2, [r4, r5]
 800b30e:	604b      	str	r3, [r1, #4]
 800b310:	4638      	mov	r0, r7
 800b312:	f104 060b 	add.w	r6, r4, #11
 800b316:	f000 f883 	bl	800b420 <__malloc_unlock>
 800b31a:	f026 0607 	bic.w	r6, r6, #7
 800b31e:	1d23      	adds	r3, r4, #4
 800b320:	1af2      	subs	r2, r6, r3
 800b322:	d0b6      	beq.n	800b292 <_malloc_r+0x22>
 800b324:	1b9b      	subs	r3, r3, r6
 800b326:	50a3      	str	r3, [r4, r2]
 800b328:	e7b3      	b.n	800b292 <_malloc_r+0x22>
 800b32a:	6862      	ldr	r2, [r4, #4]
 800b32c:	42a3      	cmp	r3, r4
 800b32e:	bf0c      	ite	eq
 800b330:	6032      	streq	r2, [r6, #0]
 800b332:	605a      	strne	r2, [r3, #4]
 800b334:	e7ec      	b.n	800b310 <_malloc_r+0xa0>
 800b336:	4623      	mov	r3, r4
 800b338:	6864      	ldr	r4, [r4, #4]
 800b33a:	e7b2      	b.n	800b2a2 <_malloc_r+0x32>
 800b33c:	4634      	mov	r4, r6
 800b33e:	6876      	ldr	r6, [r6, #4]
 800b340:	e7b9      	b.n	800b2b6 <_malloc_r+0x46>
 800b342:	230c      	movs	r3, #12
 800b344:	603b      	str	r3, [r7, #0]
 800b346:	4638      	mov	r0, r7
 800b348:	f000 f86a 	bl	800b420 <__malloc_unlock>
 800b34c:	e7a1      	b.n	800b292 <_malloc_r+0x22>
 800b34e:	6025      	str	r5, [r4, #0]
 800b350:	e7de      	b.n	800b310 <_malloc_r+0xa0>
 800b352:	bf00      	nop
 800b354:	20002098 	.word	0x20002098

0800b358 <nan>:
 800b358:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b360 <nan+0x8>
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	00000000 	.word	0x00000000
 800b364:	7ff80000 	.word	0x7ff80000

0800b368 <_sbrk_r>:
 800b368:	b538      	push	{r3, r4, r5, lr}
 800b36a:	4d06      	ldr	r5, [pc, #24]	; (800b384 <_sbrk_r+0x1c>)
 800b36c:	2300      	movs	r3, #0
 800b36e:	4604      	mov	r4, r0
 800b370:	4608      	mov	r0, r1
 800b372:	602b      	str	r3, [r5, #0]
 800b374:	f7f6 fc58 	bl	8001c28 <_sbrk>
 800b378:	1c43      	adds	r3, r0, #1
 800b37a:	d102      	bne.n	800b382 <_sbrk_r+0x1a>
 800b37c:	682b      	ldr	r3, [r5, #0]
 800b37e:	b103      	cbz	r3, 800b382 <_sbrk_r+0x1a>
 800b380:	6023      	str	r3, [r4, #0]
 800b382:	bd38      	pop	{r3, r4, r5, pc}
 800b384:	200020a0 	.word	0x200020a0

0800b388 <__ascii_wctomb>:
 800b388:	b149      	cbz	r1, 800b39e <__ascii_wctomb+0x16>
 800b38a:	2aff      	cmp	r2, #255	; 0xff
 800b38c:	bf85      	ittet	hi
 800b38e:	238a      	movhi	r3, #138	; 0x8a
 800b390:	6003      	strhi	r3, [r0, #0]
 800b392:	700a      	strbls	r2, [r1, #0]
 800b394:	f04f 30ff 	movhi.w	r0, #4294967295
 800b398:	bf98      	it	ls
 800b39a:	2001      	movls	r0, #1
 800b39c:	4770      	bx	lr
 800b39e:	4608      	mov	r0, r1
 800b3a0:	4770      	bx	lr
	...

0800b3a4 <__assert_func>:
 800b3a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3a6:	4614      	mov	r4, r2
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	4b09      	ldr	r3, [pc, #36]	; (800b3d0 <__assert_func+0x2c>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4605      	mov	r5, r0
 800b3b0:	68d8      	ldr	r0, [r3, #12]
 800b3b2:	b14c      	cbz	r4, 800b3c8 <__assert_func+0x24>
 800b3b4:	4b07      	ldr	r3, [pc, #28]	; (800b3d4 <__assert_func+0x30>)
 800b3b6:	9100      	str	r1, [sp, #0]
 800b3b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b3bc:	4906      	ldr	r1, [pc, #24]	; (800b3d8 <__assert_func+0x34>)
 800b3be:	462b      	mov	r3, r5
 800b3c0:	f000 f80e 	bl	800b3e0 <fiprintf>
 800b3c4:	f000 fc2c 	bl	800bc20 <abort>
 800b3c8:	4b04      	ldr	r3, [pc, #16]	; (800b3dc <__assert_func+0x38>)
 800b3ca:	461c      	mov	r4, r3
 800b3cc:	e7f3      	b.n	800b3b6 <__assert_func+0x12>
 800b3ce:	bf00      	nop
 800b3d0:	200000fc 	.word	0x200000fc
 800b3d4:	0800c574 	.word	0x0800c574
 800b3d8:	0800c581 	.word	0x0800c581
 800b3dc:	0800c5af 	.word	0x0800c5af

0800b3e0 <fiprintf>:
 800b3e0:	b40e      	push	{r1, r2, r3}
 800b3e2:	b503      	push	{r0, r1, lr}
 800b3e4:	4601      	mov	r1, r0
 800b3e6:	ab03      	add	r3, sp, #12
 800b3e8:	4805      	ldr	r0, [pc, #20]	; (800b400 <fiprintf+0x20>)
 800b3ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ee:	6800      	ldr	r0, [r0, #0]
 800b3f0:	9301      	str	r3, [sp, #4]
 800b3f2:	f000 f891 	bl	800b518 <_vfiprintf_r>
 800b3f6:	b002      	add	sp, #8
 800b3f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3fc:	b003      	add	sp, #12
 800b3fe:	4770      	bx	lr
 800b400:	200000fc 	.word	0x200000fc

0800b404 <malloc>:
 800b404:	4b02      	ldr	r3, [pc, #8]	; (800b410 <malloc+0xc>)
 800b406:	4601      	mov	r1, r0
 800b408:	6818      	ldr	r0, [r3, #0]
 800b40a:	f7ff bf31 	b.w	800b270 <_malloc_r>
 800b40e:	bf00      	nop
 800b410:	200000fc 	.word	0x200000fc

0800b414 <__malloc_lock>:
 800b414:	4801      	ldr	r0, [pc, #4]	; (800b41c <__malloc_lock+0x8>)
 800b416:	f000 bdc3 	b.w	800bfa0 <__retarget_lock_acquire_recursive>
 800b41a:	bf00      	nop
 800b41c:	200020a4 	.word	0x200020a4

0800b420 <__malloc_unlock>:
 800b420:	4801      	ldr	r0, [pc, #4]	; (800b428 <__malloc_unlock+0x8>)
 800b422:	f000 bdbe 	b.w	800bfa2 <__retarget_lock_release_recursive>
 800b426:	bf00      	nop
 800b428:	200020a4 	.word	0x200020a4

0800b42c <_free_r>:
 800b42c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b42e:	2900      	cmp	r1, #0
 800b430:	d044      	beq.n	800b4bc <_free_r+0x90>
 800b432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b436:	9001      	str	r0, [sp, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f1a1 0404 	sub.w	r4, r1, #4
 800b43e:	bfb8      	it	lt
 800b440:	18e4      	addlt	r4, r4, r3
 800b442:	f7ff ffe7 	bl	800b414 <__malloc_lock>
 800b446:	4a1e      	ldr	r2, [pc, #120]	; (800b4c0 <_free_r+0x94>)
 800b448:	9801      	ldr	r0, [sp, #4]
 800b44a:	6813      	ldr	r3, [r2, #0]
 800b44c:	b933      	cbnz	r3, 800b45c <_free_r+0x30>
 800b44e:	6063      	str	r3, [r4, #4]
 800b450:	6014      	str	r4, [r2, #0]
 800b452:	b003      	add	sp, #12
 800b454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b458:	f7ff bfe2 	b.w	800b420 <__malloc_unlock>
 800b45c:	42a3      	cmp	r3, r4
 800b45e:	d908      	bls.n	800b472 <_free_r+0x46>
 800b460:	6825      	ldr	r5, [r4, #0]
 800b462:	1961      	adds	r1, r4, r5
 800b464:	428b      	cmp	r3, r1
 800b466:	bf01      	itttt	eq
 800b468:	6819      	ldreq	r1, [r3, #0]
 800b46a:	685b      	ldreq	r3, [r3, #4]
 800b46c:	1949      	addeq	r1, r1, r5
 800b46e:	6021      	streq	r1, [r4, #0]
 800b470:	e7ed      	b.n	800b44e <_free_r+0x22>
 800b472:	461a      	mov	r2, r3
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	b10b      	cbz	r3, 800b47c <_free_r+0x50>
 800b478:	42a3      	cmp	r3, r4
 800b47a:	d9fa      	bls.n	800b472 <_free_r+0x46>
 800b47c:	6811      	ldr	r1, [r2, #0]
 800b47e:	1855      	adds	r5, r2, r1
 800b480:	42a5      	cmp	r5, r4
 800b482:	d10b      	bne.n	800b49c <_free_r+0x70>
 800b484:	6824      	ldr	r4, [r4, #0]
 800b486:	4421      	add	r1, r4
 800b488:	1854      	adds	r4, r2, r1
 800b48a:	42a3      	cmp	r3, r4
 800b48c:	6011      	str	r1, [r2, #0]
 800b48e:	d1e0      	bne.n	800b452 <_free_r+0x26>
 800b490:	681c      	ldr	r4, [r3, #0]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	6053      	str	r3, [r2, #4]
 800b496:	4421      	add	r1, r4
 800b498:	6011      	str	r1, [r2, #0]
 800b49a:	e7da      	b.n	800b452 <_free_r+0x26>
 800b49c:	d902      	bls.n	800b4a4 <_free_r+0x78>
 800b49e:	230c      	movs	r3, #12
 800b4a0:	6003      	str	r3, [r0, #0]
 800b4a2:	e7d6      	b.n	800b452 <_free_r+0x26>
 800b4a4:	6825      	ldr	r5, [r4, #0]
 800b4a6:	1961      	adds	r1, r4, r5
 800b4a8:	428b      	cmp	r3, r1
 800b4aa:	bf04      	itt	eq
 800b4ac:	6819      	ldreq	r1, [r3, #0]
 800b4ae:	685b      	ldreq	r3, [r3, #4]
 800b4b0:	6063      	str	r3, [r4, #4]
 800b4b2:	bf04      	itt	eq
 800b4b4:	1949      	addeq	r1, r1, r5
 800b4b6:	6021      	streq	r1, [r4, #0]
 800b4b8:	6054      	str	r4, [r2, #4]
 800b4ba:	e7ca      	b.n	800b452 <_free_r+0x26>
 800b4bc:	b003      	add	sp, #12
 800b4be:	bd30      	pop	{r4, r5, pc}
 800b4c0:	20002098 	.word	0x20002098

0800b4c4 <__sfputc_r>:
 800b4c4:	6893      	ldr	r3, [r2, #8]
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	b410      	push	{r4}
 800b4cc:	6093      	str	r3, [r2, #8]
 800b4ce:	da08      	bge.n	800b4e2 <__sfputc_r+0x1e>
 800b4d0:	6994      	ldr	r4, [r2, #24]
 800b4d2:	42a3      	cmp	r3, r4
 800b4d4:	db01      	blt.n	800b4da <__sfputc_r+0x16>
 800b4d6:	290a      	cmp	r1, #10
 800b4d8:	d103      	bne.n	800b4e2 <__sfputc_r+0x1e>
 800b4da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4de:	f000 badf 	b.w	800baa0 <__swbuf_r>
 800b4e2:	6813      	ldr	r3, [r2, #0]
 800b4e4:	1c58      	adds	r0, r3, #1
 800b4e6:	6010      	str	r0, [r2, #0]
 800b4e8:	7019      	strb	r1, [r3, #0]
 800b4ea:	4608      	mov	r0, r1
 800b4ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4f0:	4770      	bx	lr

0800b4f2 <__sfputs_r>:
 800b4f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	460f      	mov	r7, r1
 800b4f8:	4614      	mov	r4, r2
 800b4fa:	18d5      	adds	r5, r2, r3
 800b4fc:	42ac      	cmp	r4, r5
 800b4fe:	d101      	bne.n	800b504 <__sfputs_r+0x12>
 800b500:	2000      	movs	r0, #0
 800b502:	e007      	b.n	800b514 <__sfputs_r+0x22>
 800b504:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b508:	463a      	mov	r2, r7
 800b50a:	4630      	mov	r0, r6
 800b50c:	f7ff ffda 	bl	800b4c4 <__sfputc_r>
 800b510:	1c43      	adds	r3, r0, #1
 800b512:	d1f3      	bne.n	800b4fc <__sfputs_r+0xa>
 800b514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b518 <_vfiprintf_r>:
 800b518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b51c:	460d      	mov	r5, r1
 800b51e:	b09d      	sub	sp, #116	; 0x74
 800b520:	4614      	mov	r4, r2
 800b522:	4698      	mov	r8, r3
 800b524:	4606      	mov	r6, r0
 800b526:	b118      	cbz	r0, 800b530 <_vfiprintf_r+0x18>
 800b528:	6983      	ldr	r3, [r0, #24]
 800b52a:	b90b      	cbnz	r3, 800b530 <_vfiprintf_r+0x18>
 800b52c:	f000 fc9a 	bl	800be64 <__sinit>
 800b530:	4b89      	ldr	r3, [pc, #548]	; (800b758 <_vfiprintf_r+0x240>)
 800b532:	429d      	cmp	r5, r3
 800b534:	d11b      	bne.n	800b56e <_vfiprintf_r+0x56>
 800b536:	6875      	ldr	r5, [r6, #4]
 800b538:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b53a:	07d9      	lsls	r1, r3, #31
 800b53c:	d405      	bmi.n	800b54a <_vfiprintf_r+0x32>
 800b53e:	89ab      	ldrh	r3, [r5, #12]
 800b540:	059a      	lsls	r2, r3, #22
 800b542:	d402      	bmi.n	800b54a <_vfiprintf_r+0x32>
 800b544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b546:	f000 fd2b 	bl	800bfa0 <__retarget_lock_acquire_recursive>
 800b54a:	89ab      	ldrh	r3, [r5, #12]
 800b54c:	071b      	lsls	r3, r3, #28
 800b54e:	d501      	bpl.n	800b554 <_vfiprintf_r+0x3c>
 800b550:	692b      	ldr	r3, [r5, #16]
 800b552:	b9eb      	cbnz	r3, 800b590 <_vfiprintf_r+0x78>
 800b554:	4629      	mov	r1, r5
 800b556:	4630      	mov	r0, r6
 800b558:	f000 faf4 	bl	800bb44 <__swsetup_r>
 800b55c:	b1c0      	cbz	r0, 800b590 <_vfiprintf_r+0x78>
 800b55e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b560:	07dc      	lsls	r4, r3, #31
 800b562:	d50e      	bpl.n	800b582 <_vfiprintf_r+0x6a>
 800b564:	f04f 30ff 	mov.w	r0, #4294967295
 800b568:	b01d      	add	sp, #116	; 0x74
 800b56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56e:	4b7b      	ldr	r3, [pc, #492]	; (800b75c <_vfiprintf_r+0x244>)
 800b570:	429d      	cmp	r5, r3
 800b572:	d101      	bne.n	800b578 <_vfiprintf_r+0x60>
 800b574:	68b5      	ldr	r5, [r6, #8]
 800b576:	e7df      	b.n	800b538 <_vfiprintf_r+0x20>
 800b578:	4b79      	ldr	r3, [pc, #484]	; (800b760 <_vfiprintf_r+0x248>)
 800b57a:	429d      	cmp	r5, r3
 800b57c:	bf08      	it	eq
 800b57e:	68f5      	ldreq	r5, [r6, #12]
 800b580:	e7da      	b.n	800b538 <_vfiprintf_r+0x20>
 800b582:	89ab      	ldrh	r3, [r5, #12]
 800b584:	0598      	lsls	r0, r3, #22
 800b586:	d4ed      	bmi.n	800b564 <_vfiprintf_r+0x4c>
 800b588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b58a:	f000 fd0a 	bl	800bfa2 <__retarget_lock_release_recursive>
 800b58e:	e7e9      	b.n	800b564 <_vfiprintf_r+0x4c>
 800b590:	2300      	movs	r3, #0
 800b592:	9309      	str	r3, [sp, #36]	; 0x24
 800b594:	2320      	movs	r3, #32
 800b596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b59a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b59e:	2330      	movs	r3, #48	; 0x30
 800b5a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b764 <_vfiprintf_r+0x24c>
 800b5a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5a8:	f04f 0901 	mov.w	r9, #1
 800b5ac:	4623      	mov	r3, r4
 800b5ae:	469a      	mov	sl, r3
 800b5b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5b4:	b10a      	cbz	r2, 800b5ba <_vfiprintf_r+0xa2>
 800b5b6:	2a25      	cmp	r2, #37	; 0x25
 800b5b8:	d1f9      	bne.n	800b5ae <_vfiprintf_r+0x96>
 800b5ba:	ebba 0b04 	subs.w	fp, sl, r4
 800b5be:	d00b      	beq.n	800b5d8 <_vfiprintf_r+0xc0>
 800b5c0:	465b      	mov	r3, fp
 800b5c2:	4622      	mov	r2, r4
 800b5c4:	4629      	mov	r1, r5
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	f7ff ff93 	bl	800b4f2 <__sfputs_r>
 800b5cc:	3001      	adds	r0, #1
 800b5ce:	f000 80aa 	beq.w	800b726 <_vfiprintf_r+0x20e>
 800b5d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5d4:	445a      	add	r2, fp
 800b5d6:	9209      	str	r2, [sp, #36]	; 0x24
 800b5d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f000 80a2 	beq.w	800b726 <_vfiprintf_r+0x20e>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5ec:	f10a 0a01 	add.w	sl, sl, #1
 800b5f0:	9304      	str	r3, [sp, #16]
 800b5f2:	9307      	str	r3, [sp, #28]
 800b5f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5f8:	931a      	str	r3, [sp, #104]	; 0x68
 800b5fa:	4654      	mov	r4, sl
 800b5fc:	2205      	movs	r2, #5
 800b5fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b602:	4858      	ldr	r0, [pc, #352]	; (800b764 <_vfiprintf_r+0x24c>)
 800b604:	f7f4 fdec 	bl	80001e0 <memchr>
 800b608:	9a04      	ldr	r2, [sp, #16]
 800b60a:	b9d8      	cbnz	r0, 800b644 <_vfiprintf_r+0x12c>
 800b60c:	06d1      	lsls	r1, r2, #27
 800b60e:	bf44      	itt	mi
 800b610:	2320      	movmi	r3, #32
 800b612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b616:	0713      	lsls	r3, r2, #28
 800b618:	bf44      	itt	mi
 800b61a:	232b      	movmi	r3, #43	; 0x2b
 800b61c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b620:	f89a 3000 	ldrb.w	r3, [sl]
 800b624:	2b2a      	cmp	r3, #42	; 0x2a
 800b626:	d015      	beq.n	800b654 <_vfiprintf_r+0x13c>
 800b628:	9a07      	ldr	r2, [sp, #28]
 800b62a:	4654      	mov	r4, sl
 800b62c:	2000      	movs	r0, #0
 800b62e:	f04f 0c0a 	mov.w	ip, #10
 800b632:	4621      	mov	r1, r4
 800b634:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b638:	3b30      	subs	r3, #48	; 0x30
 800b63a:	2b09      	cmp	r3, #9
 800b63c:	d94e      	bls.n	800b6dc <_vfiprintf_r+0x1c4>
 800b63e:	b1b0      	cbz	r0, 800b66e <_vfiprintf_r+0x156>
 800b640:	9207      	str	r2, [sp, #28]
 800b642:	e014      	b.n	800b66e <_vfiprintf_r+0x156>
 800b644:	eba0 0308 	sub.w	r3, r0, r8
 800b648:	fa09 f303 	lsl.w	r3, r9, r3
 800b64c:	4313      	orrs	r3, r2
 800b64e:	9304      	str	r3, [sp, #16]
 800b650:	46a2      	mov	sl, r4
 800b652:	e7d2      	b.n	800b5fa <_vfiprintf_r+0xe2>
 800b654:	9b03      	ldr	r3, [sp, #12]
 800b656:	1d19      	adds	r1, r3, #4
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	9103      	str	r1, [sp, #12]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	bfbb      	ittet	lt
 800b660:	425b      	neglt	r3, r3
 800b662:	f042 0202 	orrlt.w	r2, r2, #2
 800b666:	9307      	strge	r3, [sp, #28]
 800b668:	9307      	strlt	r3, [sp, #28]
 800b66a:	bfb8      	it	lt
 800b66c:	9204      	strlt	r2, [sp, #16]
 800b66e:	7823      	ldrb	r3, [r4, #0]
 800b670:	2b2e      	cmp	r3, #46	; 0x2e
 800b672:	d10c      	bne.n	800b68e <_vfiprintf_r+0x176>
 800b674:	7863      	ldrb	r3, [r4, #1]
 800b676:	2b2a      	cmp	r3, #42	; 0x2a
 800b678:	d135      	bne.n	800b6e6 <_vfiprintf_r+0x1ce>
 800b67a:	9b03      	ldr	r3, [sp, #12]
 800b67c:	1d1a      	adds	r2, r3, #4
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	9203      	str	r2, [sp, #12]
 800b682:	2b00      	cmp	r3, #0
 800b684:	bfb8      	it	lt
 800b686:	f04f 33ff 	movlt.w	r3, #4294967295
 800b68a:	3402      	adds	r4, #2
 800b68c:	9305      	str	r3, [sp, #20]
 800b68e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b774 <_vfiprintf_r+0x25c>
 800b692:	7821      	ldrb	r1, [r4, #0]
 800b694:	2203      	movs	r2, #3
 800b696:	4650      	mov	r0, sl
 800b698:	f7f4 fda2 	bl	80001e0 <memchr>
 800b69c:	b140      	cbz	r0, 800b6b0 <_vfiprintf_r+0x198>
 800b69e:	2340      	movs	r3, #64	; 0x40
 800b6a0:	eba0 000a 	sub.w	r0, r0, sl
 800b6a4:	fa03 f000 	lsl.w	r0, r3, r0
 800b6a8:	9b04      	ldr	r3, [sp, #16]
 800b6aa:	4303      	orrs	r3, r0
 800b6ac:	3401      	adds	r4, #1
 800b6ae:	9304      	str	r3, [sp, #16]
 800b6b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6b4:	482c      	ldr	r0, [pc, #176]	; (800b768 <_vfiprintf_r+0x250>)
 800b6b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6ba:	2206      	movs	r2, #6
 800b6bc:	f7f4 fd90 	bl	80001e0 <memchr>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	d03f      	beq.n	800b744 <_vfiprintf_r+0x22c>
 800b6c4:	4b29      	ldr	r3, [pc, #164]	; (800b76c <_vfiprintf_r+0x254>)
 800b6c6:	bb1b      	cbnz	r3, 800b710 <_vfiprintf_r+0x1f8>
 800b6c8:	9b03      	ldr	r3, [sp, #12]
 800b6ca:	3307      	adds	r3, #7
 800b6cc:	f023 0307 	bic.w	r3, r3, #7
 800b6d0:	3308      	adds	r3, #8
 800b6d2:	9303      	str	r3, [sp, #12]
 800b6d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6d6:	443b      	add	r3, r7
 800b6d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b6da:	e767      	b.n	800b5ac <_vfiprintf_r+0x94>
 800b6dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6e0:	460c      	mov	r4, r1
 800b6e2:	2001      	movs	r0, #1
 800b6e4:	e7a5      	b.n	800b632 <_vfiprintf_r+0x11a>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	3401      	adds	r4, #1
 800b6ea:	9305      	str	r3, [sp, #20]
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	f04f 0c0a 	mov.w	ip, #10
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6f8:	3a30      	subs	r2, #48	; 0x30
 800b6fa:	2a09      	cmp	r2, #9
 800b6fc:	d903      	bls.n	800b706 <_vfiprintf_r+0x1ee>
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d0c5      	beq.n	800b68e <_vfiprintf_r+0x176>
 800b702:	9105      	str	r1, [sp, #20]
 800b704:	e7c3      	b.n	800b68e <_vfiprintf_r+0x176>
 800b706:	fb0c 2101 	mla	r1, ip, r1, r2
 800b70a:	4604      	mov	r4, r0
 800b70c:	2301      	movs	r3, #1
 800b70e:	e7f0      	b.n	800b6f2 <_vfiprintf_r+0x1da>
 800b710:	ab03      	add	r3, sp, #12
 800b712:	9300      	str	r3, [sp, #0]
 800b714:	462a      	mov	r2, r5
 800b716:	4b16      	ldr	r3, [pc, #88]	; (800b770 <_vfiprintf_r+0x258>)
 800b718:	a904      	add	r1, sp, #16
 800b71a:	4630      	mov	r0, r6
 800b71c:	f3af 8000 	nop.w
 800b720:	4607      	mov	r7, r0
 800b722:	1c78      	adds	r0, r7, #1
 800b724:	d1d6      	bne.n	800b6d4 <_vfiprintf_r+0x1bc>
 800b726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b728:	07d9      	lsls	r1, r3, #31
 800b72a:	d405      	bmi.n	800b738 <_vfiprintf_r+0x220>
 800b72c:	89ab      	ldrh	r3, [r5, #12]
 800b72e:	059a      	lsls	r2, r3, #22
 800b730:	d402      	bmi.n	800b738 <_vfiprintf_r+0x220>
 800b732:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b734:	f000 fc35 	bl	800bfa2 <__retarget_lock_release_recursive>
 800b738:	89ab      	ldrh	r3, [r5, #12]
 800b73a:	065b      	lsls	r3, r3, #25
 800b73c:	f53f af12 	bmi.w	800b564 <_vfiprintf_r+0x4c>
 800b740:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b742:	e711      	b.n	800b568 <_vfiprintf_r+0x50>
 800b744:	ab03      	add	r3, sp, #12
 800b746:	9300      	str	r3, [sp, #0]
 800b748:	462a      	mov	r2, r5
 800b74a:	4b09      	ldr	r3, [pc, #36]	; (800b770 <_vfiprintf_r+0x258>)
 800b74c:	a904      	add	r1, sp, #16
 800b74e:	4630      	mov	r0, r6
 800b750:	f000 f880 	bl	800b854 <_printf_i>
 800b754:	e7e4      	b.n	800b720 <_vfiprintf_r+0x208>
 800b756:	bf00      	nop
 800b758:	0800c704 	.word	0x0800c704
 800b75c:	0800c724 	.word	0x0800c724
 800b760:	0800c6e4 	.word	0x0800c6e4
 800b764:	0800c6b1 	.word	0x0800c6b1
 800b768:	0800c6bb 	.word	0x0800c6bb
 800b76c:	00000000 	.word	0x00000000
 800b770:	0800b4f3 	.word	0x0800b4f3
 800b774:	0800c6b7 	.word	0x0800c6b7

0800b778 <_printf_common>:
 800b778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b77c:	4616      	mov	r6, r2
 800b77e:	4699      	mov	r9, r3
 800b780:	688a      	ldr	r2, [r1, #8]
 800b782:	690b      	ldr	r3, [r1, #16]
 800b784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b788:	4293      	cmp	r3, r2
 800b78a:	bfb8      	it	lt
 800b78c:	4613      	movlt	r3, r2
 800b78e:	6033      	str	r3, [r6, #0]
 800b790:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b794:	4607      	mov	r7, r0
 800b796:	460c      	mov	r4, r1
 800b798:	b10a      	cbz	r2, 800b79e <_printf_common+0x26>
 800b79a:	3301      	adds	r3, #1
 800b79c:	6033      	str	r3, [r6, #0]
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	0699      	lsls	r1, r3, #26
 800b7a2:	bf42      	ittt	mi
 800b7a4:	6833      	ldrmi	r3, [r6, #0]
 800b7a6:	3302      	addmi	r3, #2
 800b7a8:	6033      	strmi	r3, [r6, #0]
 800b7aa:	6825      	ldr	r5, [r4, #0]
 800b7ac:	f015 0506 	ands.w	r5, r5, #6
 800b7b0:	d106      	bne.n	800b7c0 <_printf_common+0x48>
 800b7b2:	f104 0a19 	add.w	sl, r4, #25
 800b7b6:	68e3      	ldr	r3, [r4, #12]
 800b7b8:	6832      	ldr	r2, [r6, #0]
 800b7ba:	1a9b      	subs	r3, r3, r2
 800b7bc:	42ab      	cmp	r3, r5
 800b7be:	dc26      	bgt.n	800b80e <_printf_common+0x96>
 800b7c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b7c4:	1e13      	subs	r3, r2, #0
 800b7c6:	6822      	ldr	r2, [r4, #0]
 800b7c8:	bf18      	it	ne
 800b7ca:	2301      	movne	r3, #1
 800b7cc:	0692      	lsls	r2, r2, #26
 800b7ce:	d42b      	bmi.n	800b828 <_printf_common+0xb0>
 800b7d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7d4:	4649      	mov	r1, r9
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	47c0      	blx	r8
 800b7da:	3001      	adds	r0, #1
 800b7dc:	d01e      	beq.n	800b81c <_printf_common+0xa4>
 800b7de:	6823      	ldr	r3, [r4, #0]
 800b7e0:	68e5      	ldr	r5, [r4, #12]
 800b7e2:	6832      	ldr	r2, [r6, #0]
 800b7e4:	f003 0306 	and.w	r3, r3, #6
 800b7e8:	2b04      	cmp	r3, #4
 800b7ea:	bf08      	it	eq
 800b7ec:	1aad      	subeq	r5, r5, r2
 800b7ee:	68a3      	ldr	r3, [r4, #8]
 800b7f0:	6922      	ldr	r2, [r4, #16]
 800b7f2:	bf0c      	ite	eq
 800b7f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7f8:	2500      	movne	r5, #0
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	bfc4      	itt	gt
 800b7fe:	1a9b      	subgt	r3, r3, r2
 800b800:	18ed      	addgt	r5, r5, r3
 800b802:	2600      	movs	r6, #0
 800b804:	341a      	adds	r4, #26
 800b806:	42b5      	cmp	r5, r6
 800b808:	d11a      	bne.n	800b840 <_printf_common+0xc8>
 800b80a:	2000      	movs	r0, #0
 800b80c:	e008      	b.n	800b820 <_printf_common+0xa8>
 800b80e:	2301      	movs	r3, #1
 800b810:	4652      	mov	r2, sl
 800b812:	4649      	mov	r1, r9
 800b814:	4638      	mov	r0, r7
 800b816:	47c0      	blx	r8
 800b818:	3001      	adds	r0, #1
 800b81a:	d103      	bne.n	800b824 <_printf_common+0xac>
 800b81c:	f04f 30ff 	mov.w	r0, #4294967295
 800b820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b824:	3501      	adds	r5, #1
 800b826:	e7c6      	b.n	800b7b6 <_printf_common+0x3e>
 800b828:	18e1      	adds	r1, r4, r3
 800b82a:	1c5a      	adds	r2, r3, #1
 800b82c:	2030      	movs	r0, #48	; 0x30
 800b82e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b832:	4422      	add	r2, r4
 800b834:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b838:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b83c:	3302      	adds	r3, #2
 800b83e:	e7c7      	b.n	800b7d0 <_printf_common+0x58>
 800b840:	2301      	movs	r3, #1
 800b842:	4622      	mov	r2, r4
 800b844:	4649      	mov	r1, r9
 800b846:	4638      	mov	r0, r7
 800b848:	47c0      	blx	r8
 800b84a:	3001      	adds	r0, #1
 800b84c:	d0e6      	beq.n	800b81c <_printf_common+0xa4>
 800b84e:	3601      	adds	r6, #1
 800b850:	e7d9      	b.n	800b806 <_printf_common+0x8e>
	...

0800b854 <_printf_i>:
 800b854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b858:	7e0f      	ldrb	r7, [r1, #24]
 800b85a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b85c:	2f78      	cmp	r7, #120	; 0x78
 800b85e:	4691      	mov	r9, r2
 800b860:	4680      	mov	r8, r0
 800b862:	460c      	mov	r4, r1
 800b864:	469a      	mov	sl, r3
 800b866:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b86a:	d807      	bhi.n	800b87c <_printf_i+0x28>
 800b86c:	2f62      	cmp	r7, #98	; 0x62
 800b86e:	d80a      	bhi.n	800b886 <_printf_i+0x32>
 800b870:	2f00      	cmp	r7, #0
 800b872:	f000 80d8 	beq.w	800ba26 <_printf_i+0x1d2>
 800b876:	2f58      	cmp	r7, #88	; 0x58
 800b878:	f000 80a3 	beq.w	800b9c2 <_printf_i+0x16e>
 800b87c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b884:	e03a      	b.n	800b8fc <_printf_i+0xa8>
 800b886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b88a:	2b15      	cmp	r3, #21
 800b88c:	d8f6      	bhi.n	800b87c <_printf_i+0x28>
 800b88e:	a101      	add	r1, pc, #4	; (adr r1, 800b894 <_printf_i+0x40>)
 800b890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b894:	0800b8ed 	.word	0x0800b8ed
 800b898:	0800b901 	.word	0x0800b901
 800b89c:	0800b87d 	.word	0x0800b87d
 800b8a0:	0800b87d 	.word	0x0800b87d
 800b8a4:	0800b87d 	.word	0x0800b87d
 800b8a8:	0800b87d 	.word	0x0800b87d
 800b8ac:	0800b901 	.word	0x0800b901
 800b8b0:	0800b87d 	.word	0x0800b87d
 800b8b4:	0800b87d 	.word	0x0800b87d
 800b8b8:	0800b87d 	.word	0x0800b87d
 800b8bc:	0800b87d 	.word	0x0800b87d
 800b8c0:	0800ba0d 	.word	0x0800ba0d
 800b8c4:	0800b931 	.word	0x0800b931
 800b8c8:	0800b9ef 	.word	0x0800b9ef
 800b8cc:	0800b87d 	.word	0x0800b87d
 800b8d0:	0800b87d 	.word	0x0800b87d
 800b8d4:	0800ba2f 	.word	0x0800ba2f
 800b8d8:	0800b87d 	.word	0x0800b87d
 800b8dc:	0800b931 	.word	0x0800b931
 800b8e0:	0800b87d 	.word	0x0800b87d
 800b8e4:	0800b87d 	.word	0x0800b87d
 800b8e8:	0800b9f7 	.word	0x0800b9f7
 800b8ec:	682b      	ldr	r3, [r5, #0]
 800b8ee:	1d1a      	adds	r2, r3, #4
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	602a      	str	r2, [r5, #0]
 800b8f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e0a3      	b.n	800ba48 <_printf_i+0x1f4>
 800b900:	6820      	ldr	r0, [r4, #0]
 800b902:	6829      	ldr	r1, [r5, #0]
 800b904:	0606      	lsls	r6, r0, #24
 800b906:	f101 0304 	add.w	r3, r1, #4
 800b90a:	d50a      	bpl.n	800b922 <_printf_i+0xce>
 800b90c:	680e      	ldr	r6, [r1, #0]
 800b90e:	602b      	str	r3, [r5, #0]
 800b910:	2e00      	cmp	r6, #0
 800b912:	da03      	bge.n	800b91c <_printf_i+0xc8>
 800b914:	232d      	movs	r3, #45	; 0x2d
 800b916:	4276      	negs	r6, r6
 800b918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b91c:	485e      	ldr	r0, [pc, #376]	; (800ba98 <_printf_i+0x244>)
 800b91e:	230a      	movs	r3, #10
 800b920:	e019      	b.n	800b956 <_printf_i+0x102>
 800b922:	680e      	ldr	r6, [r1, #0]
 800b924:	602b      	str	r3, [r5, #0]
 800b926:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b92a:	bf18      	it	ne
 800b92c:	b236      	sxthne	r6, r6
 800b92e:	e7ef      	b.n	800b910 <_printf_i+0xbc>
 800b930:	682b      	ldr	r3, [r5, #0]
 800b932:	6820      	ldr	r0, [r4, #0]
 800b934:	1d19      	adds	r1, r3, #4
 800b936:	6029      	str	r1, [r5, #0]
 800b938:	0601      	lsls	r1, r0, #24
 800b93a:	d501      	bpl.n	800b940 <_printf_i+0xec>
 800b93c:	681e      	ldr	r6, [r3, #0]
 800b93e:	e002      	b.n	800b946 <_printf_i+0xf2>
 800b940:	0646      	lsls	r6, r0, #25
 800b942:	d5fb      	bpl.n	800b93c <_printf_i+0xe8>
 800b944:	881e      	ldrh	r6, [r3, #0]
 800b946:	4854      	ldr	r0, [pc, #336]	; (800ba98 <_printf_i+0x244>)
 800b948:	2f6f      	cmp	r7, #111	; 0x6f
 800b94a:	bf0c      	ite	eq
 800b94c:	2308      	moveq	r3, #8
 800b94e:	230a      	movne	r3, #10
 800b950:	2100      	movs	r1, #0
 800b952:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b956:	6865      	ldr	r5, [r4, #4]
 800b958:	60a5      	str	r5, [r4, #8]
 800b95a:	2d00      	cmp	r5, #0
 800b95c:	bfa2      	ittt	ge
 800b95e:	6821      	ldrge	r1, [r4, #0]
 800b960:	f021 0104 	bicge.w	r1, r1, #4
 800b964:	6021      	strge	r1, [r4, #0]
 800b966:	b90e      	cbnz	r6, 800b96c <_printf_i+0x118>
 800b968:	2d00      	cmp	r5, #0
 800b96a:	d04d      	beq.n	800ba08 <_printf_i+0x1b4>
 800b96c:	4615      	mov	r5, r2
 800b96e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b972:	fb03 6711 	mls	r7, r3, r1, r6
 800b976:	5dc7      	ldrb	r7, [r0, r7]
 800b978:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b97c:	4637      	mov	r7, r6
 800b97e:	42bb      	cmp	r3, r7
 800b980:	460e      	mov	r6, r1
 800b982:	d9f4      	bls.n	800b96e <_printf_i+0x11a>
 800b984:	2b08      	cmp	r3, #8
 800b986:	d10b      	bne.n	800b9a0 <_printf_i+0x14c>
 800b988:	6823      	ldr	r3, [r4, #0]
 800b98a:	07de      	lsls	r6, r3, #31
 800b98c:	d508      	bpl.n	800b9a0 <_printf_i+0x14c>
 800b98e:	6923      	ldr	r3, [r4, #16]
 800b990:	6861      	ldr	r1, [r4, #4]
 800b992:	4299      	cmp	r1, r3
 800b994:	bfde      	ittt	le
 800b996:	2330      	movle	r3, #48	; 0x30
 800b998:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b99c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b9a0:	1b52      	subs	r2, r2, r5
 800b9a2:	6122      	str	r2, [r4, #16]
 800b9a4:	f8cd a000 	str.w	sl, [sp]
 800b9a8:	464b      	mov	r3, r9
 800b9aa:	aa03      	add	r2, sp, #12
 800b9ac:	4621      	mov	r1, r4
 800b9ae:	4640      	mov	r0, r8
 800b9b0:	f7ff fee2 	bl	800b778 <_printf_common>
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	d14c      	bne.n	800ba52 <_printf_i+0x1fe>
 800b9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9bc:	b004      	add	sp, #16
 800b9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c2:	4835      	ldr	r0, [pc, #212]	; (800ba98 <_printf_i+0x244>)
 800b9c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b9c8:	6829      	ldr	r1, [r5, #0]
 800b9ca:	6823      	ldr	r3, [r4, #0]
 800b9cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b9d0:	6029      	str	r1, [r5, #0]
 800b9d2:	061d      	lsls	r5, r3, #24
 800b9d4:	d514      	bpl.n	800ba00 <_printf_i+0x1ac>
 800b9d6:	07df      	lsls	r7, r3, #31
 800b9d8:	bf44      	itt	mi
 800b9da:	f043 0320 	orrmi.w	r3, r3, #32
 800b9de:	6023      	strmi	r3, [r4, #0]
 800b9e0:	b91e      	cbnz	r6, 800b9ea <_printf_i+0x196>
 800b9e2:	6823      	ldr	r3, [r4, #0]
 800b9e4:	f023 0320 	bic.w	r3, r3, #32
 800b9e8:	6023      	str	r3, [r4, #0]
 800b9ea:	2310      	movs	r3, #16
 800b9ec:	e7b0      	b.n	800b950 <_printf_i+0xfc>
 800b9ee:	6823      	ldr	r3, [r4, #0]
 800b9f0:	f043 0320 	orr.w	r3, r3, #32
 800b9f4:	6023      	str	r3, [r4, #0]
 800b9f6:	2378      	movs	r3, #120	; 0x78
 800b9f8:	4828      	ldr	r0, [pc, #160]	; (800ba9c <_printf_i+0x248>)
 800b9fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b9fe:	e7e3      	b.n	800b9c8 <_printf_i+0x174>
 800ba00:	0659      	lsls	r1, r3, #25
 800ba02:	bf48      	it	mi
 800ba04:	b2b6      	uxthmi	r6, r6
 800ba06:	e7e6      	b.n	800b9d6 <_printf_i+0x182>
 800ba08:	4615      	mov	r5, r2
 800ba0a:	e7bb      	b.n	800b984 <_printf_i+0x130>
 800ba0c:	682b      	ldr	r3, [r5, #0]
 800ba0e:	6826      	ldr	r6, [r4, #0]
 800ba10:	6961      	ldr	r1, [r4, #20]
 800ba12:	1d18      	adds	r0, r3, #4
 800ba14:	6028      	str	r0, [r5, #0]
 800ba16:	0635      	lsls	r5, r6, #24
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	d501      	bpl.n	800ba20 <_printf_i+0x1cc>
 800ba1c:	6019      	str	r1, [r3, #0]
 800ba1e:	e002      	b.n	800ba26 <_printf_i+0x1d2>
 800ba20:	0670      	lsls	r0, r6, #25
 800ba22:	d5fb      	bpl.n	800ba1c <_printf_i+0x1c8>
 800ba24:	8019      	strh	r1, [r3, #0]
 800ba26:	2300      	movs	r3, #0
 800ba28:	6123      	str	r3, [r4, #16]
 800ba2a:	4615      	mov	r5, r2
 800ba2c:	e7ba      	b.n	800b9a4 <_printf_i+0x150>
 800ba2e:	682b      	ldr	r3, [r5, #0]
 800ba30:	1d1a      	adds	r2, r3, #4
 800ba32:	602a      	str	r2, [r5, #0]
 800ba34:	681d      	ldr	r5, [r3, #0]
 800ba36:	6862      	ldr	r2, [r4, #4]
 800ba38:	2100      	movs	r1, #0
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	f7f4 fbd0 	bl	80001e0 <memchr>
 800ba40:	b108      	cbz	r0, 800ba46 <_printf_i+0x1f2>
 800ba42:	1b40      	subs	r0, r0, r5
 800ba44:	6060      	str	r0, [r4, #4]
 800ba46:	6863      	ldr	r3, [r4, #4]
 800ba48:	6123      	str	r3, [r4, #16]
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba50:	e7a8      	b.n	800b9a4 <_printf_i+0x150>
 800ba52:	6923      	ldr	r3, [r4, #16]
 800ba54:	462a      	mov	r2, r5
 800ba56:	4649      	mov	r1, r9
 800ba58:	4640      	mov	r0, r8
 800ba5a:	47d0      	blx	sl
 800ba5c:	3001      	adds	r0, #1
 800ba5e:	d0ab      	beq.n	800b9b8 <_printf_i+0x164>
 800ba60:	6823      	ldr	r3, [r4, #0]
 800ba62:	079b      	lsls	r3, r3, #30
 800ba64:	d413      	bmi.n	800ba8e <_printf_i+0x23a>
 800ba66:	68e0      	ldr	r0, [r4, #12]
 800ba68:	9b03      	ldr	r3, [sp, #12]
 800ba6a:	4298      	cmp	r0, r3
 800ba6c:	bfb8      	it	lt
 800ba6e:	4618      	movlt	r0, r3
 800ba70:	e7a4      	b.n	800b9bc <_printf_i+0x168>
 800ba72:	2301      	movs	r3, #1
 800ba74:	4632      	mov	r2, r6
 800ba76:	4649      	mov	r1, r9
 800ba78:	4640      	mov	r0, r8
 800ba7a:	47d0      	blx	sl
 800ba7c:	3001      	adds	r0, #1
 800ba7e:	d09b      	beq.n	800b9b8 <_printf_i+0x164>
 800ba80:	3501      	adds	r5, #1
 800ba82:	68e3      	ldr	r3, [r4, #12]
 800ba84:	9903      	ldr	r1, [sp, #12]
 800ba86:	1a5b      	subs	r3, r3, r1
 800ba88:	42ab      	cmp	r3, r5
 800ba8a:	dcf2      	bgt.n	800ba72 <_printf_i+0x21e>
 800ba8c:	e7eb      	b.n	800ba66 <_printf_i+0x212>
 800ba8e:	2500      	movs	r5, #0
 800ba90:	f104 0619 	add.w	r6, r4, #25
 800ba94:	e7f5      	b.n	800ba82 <_printf_i+0x22e>
 800ba96:	bf00      	nop
 800ba98:	0800c6c2 	.word	0x0800c6c2
 800ba9c:	0800c6d3 	.word	0x0800c6d3

0800baa0 <__swbuf_r>:
 800baa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baa2:	460e      	mov	r6, r1
 800baa4:	4614      	mov	r4, r2
 800baa6:	4605      	mov	r5, r0
 800baa8:	b118      	cbz	r0, 800bab2 <__swbuf_r+0x12>
 800baaa:	6983      	ldr	r3, [r0, #24]
 800baac:	b90b      	cbnz	r3, 800bab2 <__swbuf_r+0x12>
 800baae:	f000 f9d9 	bl	800be64 <__sinit>
 800bab2:	4b21      	ldr	r3, [pc, #132]	; (800bb38 <__swbuf_r+0x98>)
 800bab4:	429c      	cmp	r4, r3
 800bab6:	d12b      	bne.n	800bb10 <__swbuf_r+0x70>
 800bab8:	686c      	ldr	r4, [r5, #4]
 800baba:	69a3      	ldr	r3, [r4, #24]
 800babc:	60a3      	str	r3, [r4, #8]
 800babe:	89a3      	ldrh	r3, [r4, #12]
 800bac0:	071a      	lsls	r2, r3, #28
 800bac2:	d52f      	bpl.n	800bb24 <__swbuf_r+0x84>
 800bac4:	6923      	ldr	r3, [r4, #16]
 800bac6:	b36b      	cbz	r3, 800bb24 <__swbuf_r+0x84>
 800bac8:	6923      	ldr	r3, [r4, #16]
 800baca:	6820      	ldr	r0, [r4, #0]
 800bacc:	1ac0      	subs	r0, r0, r3
 800bace:	6963      	ldr	r3, [r4, #20]
 800bad0:	b2f6      	uxtb	r6, r6
 800bad2:	4283      	cmp	r3, r0
 800bad4:	4637      	mov	r7, r6
 800bad6:	dc04      	bgt.n	800bae2 <__swbuf_r+0x42>
 800bad8:	4621      	mov	r1, r4
 800bada:	4628      	mov	r0, r5
 800badc:	f000 f92e 	bl	800bd3c <_fflush_r>
 800bae0:	bb30      	cbnz	r0, 800bb30 <__swbuf_r+0x90>
 800bae2:	68a3      	ldr	r3, [r4, #8]
 800bae4:	3b01      	subs	r3, #1
 800bae6:	60a3      	str	r3, [r4, #8]
 800bae8:	6823      	ldr	r3, [r4, #0]
 800baea:	1c5a      	adds	r2, r3, #1
 800baec:	6022      	str	r2, [r4, #0]
 800baee:	701e      	strb	r6, [r3, #0]
 800baf0:	6963      	ldr	r3, [r4, #20]
 800baf2:	3001      	adds	r0, #1
 800baf4:	4283      	cmp	r3, r0
 800baf6:	d004      	beq.n	800bb02 <__swbuf_r+0x62>
 800baf8:	89a3      	ldrh	r3, [r4, #12]
 800bafa:	07db      	lsls	r3, r3, #31
 800bafc:	d506      	bpl.n	800bb0c <__swbuf_r+0x6c>
 800bafe:	2e0a      	cmp	r6, #10
 800bb00:	d104      	bne.n	800bb0c <__swbuf_r+0x6c>
 800bb02:	4621      	mov	r1, r4
 800bb04:	4628      	mov	r0, r5
 800bb06:	f000 f919 	bl	800bd3c <_fflush_r>
 800bb0a:	b988      	cbnz	r0, 800bb30 <__swbuf_r+0x90>
 800bb0c:	4638      	mov	r0, r7
 800bb0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb10:	4b0a      	ldr	r3, [pc, #40]	; (800bb3c <__swbuf_r+0x9c>)
 800bb12:	429c      	cmp	r4, r3
 800bb14:	d101      	bne.n	800bb1a <__swbuf_r+0x7a>
 800bb16:	68ac      	ldr	r4, [r5, #8]
 800bb18:	e7cf      	b.n	800baba <__swbuf_r+0x1a>
 800bb1a:	4b09      	ldr	r3, [pc, #36]	; (800bb40 <__swbuf_r+0xa0>)
 800bb1c:	429c      	cmp	r4, r3
 800bb1e:	bf08      	it	eq
 800bb20:	68ec      	ldreq	r4, [r5, #12]
 800bb22:	e7ca      	b.n	800baba <__swbuf_r+0x1a>
 800bb24:	4621      	mov	r1, r4
 800bb26:	4628      	mov	r0, r5
 800bb28:	f000 f80c 	bl	800bb44 <__swsetup_r>
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	d0cb      	beq.n	800bac8 <__swbuf_r+0x28>
 800bb30:	f04f 37ff 	mov.w	r7, #4294967295
 800bb34:	e7ea      	b.n	800bb0c <__swbuf_r+0x6c>
 800bb36:	bf00      	nop
 800bb38:	0800c704 	.word	0x0800c704
 800bb3c:	0800c724 	.word	0x0800c724
 800bb40:	0800c6e4 	.word	0x0800c6e4

0800bb44 <__swsetup_r>:
 800bb44:	4b32      	ldr	r3, [pc, #200]	; (800bc10 <__swsetup_r+0xcc>)
 800bb46:	b570      	push	{r4, r5, r6, lr}
 800bb48:	681d      	ldr	r5, [r3, #0]
 800bb4a:	4606      	mov	r6, r0
 800bb4c:	460c      	mov	r4, r1
 800bb4e:	b125      	cbz	r5, 800bb5a <__swsetup_r+0x16>
 800bb50:	69ab      	ldr	r3, [r5, #24]
 800bb52:	b913      	cbnz	r3, 800bb5a <__swsetup_r+0x16>
 800bb54:	4628      	mov	r0, r5
 800bb56:	f000 f985 	bl	800be64 <__sinit>
 800bb5a:	4b2e      	ldr	r3, [pc, #184]	; (800bc14 <__swsetup_r+0xd0>)
 800bb5c:	429c      	cmp	r4, r3
 800bb5e:	d10f      	bne.n	800bb80 <__swsetup_r+0x3c>
 800bb60:	686c      	ldr	r4, [r5, #4]
 800bb62:	89a3      	ldrh	r3, [r4, #12]
 800bb64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb68:	0719      	lsls	r1, r3, #28
 800bb6a:	d42c      	bmi.n	800bbc6 <__swsetup_r+0x82>
 800bb6c:	06dd      	lsls	r5, r3, #27
 800bb6e:	d411      	bmi.n	800bb94 <__swsetup_r+0x50>
 800bb70:	2309      	movs	r3, #9
 800bb72:	6033      	str	r3, [r6, #0]
 800bb74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb78:	81a3      	strh	r3, [r4, #12]
 800bb7a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb7e:	e03e      	b.n	800bbfe <__swsetup_r+0xba>
 800bb80:	4b25      	ldr	r3, [pc, #148]	; (800bc18 <__swsetup_r+0xd4>)
 800bb82:	429c      	cmp	r4, r3
 800bb84:	d101      	bne.n	800bb8a <__swsetup_r+0x46>
 800bb86:	68ac      	ldr	r4, [r5, #8]
 800bb88:	e7eb      	b.n	800bb62 <__swsetup_r+0x1e>
 800bb8a:	4b24      	ldr	r3, [pc, #144]	; (800bc1c <__swsetup_r+0xd8>)
 800bb8c:	429c      	cmp	r4, r3
 800bb8e:	bf08      	it	eq
 800bb90:	68ec      	ldreq	r4, [r5, #12]
 800bb92:	e7e6      	b.n	800bb62 <__swsetup_r+0x1e>
 800bb94:	0758      	lsls	r0, r3, #29
 800bb96:	d512      	bpl.n	800bbbe <__swsetup_r+0x7a>
 800bb98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb9a:	b141      	cbz	r1, 800bbae <__swsetup_r+0x6a>
 800bb9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bba0:	4299      	cmp	r1, r3
 800bba2:	d002      	beq.n	800bbaa <__swsetup_r+0x66>
 800bba4:	4630      	mov	r0, r6
 800bba6:	f7ff fc41 	bl	800b42c <_free_r>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	6363      	str	r3, [r4, #52]	; 0x34
 800bbae:	89a3      	ldrh	r3, [r4, #12]
 800bbb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbb4:	81a3      	strh	r3, [r4, #12]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	6063      	str	r3, [r4, #4]
 800bbba:	6923      	ldr	r3, [r4, #16]
 800bbbc:	6023      	str	r3, [r4, #0]
 800bbbe:	89a3      	ldrh	r3, [r4, #12]
 800bbc0:	f043 0308 	orr.w	r3, r3, #8
 800bbc4:	81a3      	strh	r3, [r4, #12]
 800bbc6:	6923      	ldr	r3, [r4, #16]
 800bbc8:	b94b      	cbnz	r3, 800bbde <__swsetup_r+0x9a>
 800bbca:	89a3      	ldrh	r3, [r4, #12]
 800bbcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bbd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbd4:	d003      	beq.n	800bbde <__swsetup_r+0x9a>
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	4630      	mov	r0, r6
 800bbda:	f000 fa09 	bl	800bff0 <__smakebuf_r>
 800bbde:	89a0      	ldrh	r0, [r4, #12]
 800bbe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbe4:	f010 0301 	ands.w	r3, r0, #1
 800bbe8:	d00a      	beq.n	800bc00 <__swsetup_r+0xbc>
 800bbea:	2300      	movs	r3, #0
 800bbec:	60a3      	str	r3, [r4, #8]
 800bbee:	6963      	ldr	r3, [r4, #20]
 800bbf0:	425b      	negs	r3, r3
 800bbf2:	61a3      	str	r3, [r4, #24]
 800bbf4:	6923      	ldr	r3, [r4, #16]
 800bbf6:	b943      	cbnz	r3, 800bc0a <__swsetup_r+0xc6>
 800bbf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bbfc:	d1ba      	bne.n	800bb74 <__swsetup_r+0x30>
 800bbfe:	bd70      	pop	{r4, r5, r6, pc}
 800bc00:	0781      	lsls	r1, r0, #30
 800bc02:	bf58      	it	pl
 800bc04:	6963      	ldrpl	r3, [r4, #20]
 800bc06:	60a3      	str	r3, [r4, #8]
 800bc08:	e7f4      	b.n	800bbf4 <__swsetup_r+0xb0>
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	e7f7      	b.n	800bbfe <__swsetup_r+0xba>
 800bc0e:	bf00      	nop
 800bc10:	200000fc 	.word	0x200000fc
 800bc14:	0800c704 	.word	0x0800c704
 800bc18:	0800c724 	.word	0x0800c724
 800bc1c:	0800c6e4 	.word	0x0800c6e4

0800bc20 <abort>:
 800bc20:	b508      	push	{r3, lr}
 800bc22:	2006      	movs	r0, #6
 800bc24:	f000 fa4c 	bl	800c0c0 <raise>
 800bc28:	2001      	movs	r0, #1
 800bc2a:	f7f5 ff85 	bl	8001b38 <_exit>
	...

0800bc30 <__sflush_r>:
 800bc30:	898a      	ldrh	r2, [r1, #12]
 800bc32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc36:	4605      	mov	r5, r0
 800bc38:	0710      	lsls	r0, r2, #28
 800bc3a:	460c      	mov	r4, r1
 800bc3c:	d458      	bmi.n	800bcf0 <__sflush_r+0xc0>
 800bc3e:	684b      	ldr	r3, [r1, #4]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	dc05      	bgt.n	800bc50 <__sflush_r+0x20>
 800bc44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	dc02      	bgt.n	800bc50 <__sflush_r+0x20>
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc52:	2e00      	cmp	r6, #0
 800bc54:	d0f9      	beq.n	800bc4a <__sflush_r+0x1a>
 800bc56:	2300      	movs	r3, #0
 800bc58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc5c:	682f      	ldr	r7, [r5, #0]
 800bc5e:	602b      	str	r3, [r5, #0]
 800bc60:	d032      	beq.n	800bcc8 <__sflush_r+0x98>
 800bc62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc64:	89a3      	ldrh	r3, [r4, #12]
 800bc66:	075a      	lsls	r2, r3, #29
 800bc68:	d505      	bpl.n	800bc76 <__sflush_r+0x46>
 800bc6a:	6863      	ldr	r3, [r4, #4]
 800bc6c:	1ac0      	subs	r0, r0, r3
 800bc6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc70:	b10b      	cbz	r3, 800bc76 <__sflush_r+0x46>
 800bc72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc74:	1ac0      	subs	r0, r0, r3
 800bc76:	2300      	movs	r3, #0
 800bc78:	4602      	mov	r2, r0
 800bc7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc7c:	6a21      	ldr	r1, [r4, #32]
 800bc7e:	4628      	mov	r0, r5
 800bc80:	47b0      	blx	r6
 800bc82:	1c43      	adds	r3, r0, #1
 800bc84:	89a3      	ldrh	r3, [r4, #12]
 800bc86:	d106      	bne.n	800bc96 <__sflush_r+0x66>
 800bc88:	6829      	ldr	r1, [r5, #0]
 800bc8a:	291d      	cmp	r1, #29
 800bc8c:	d82c      	bhi.n	800bce8 <__sflush_r+0xb8>
 800bc8e:	4a2a      	ldr	r2, [pc, #168]	; (800bd38 <__sflush_r+0x108>)
 800bc90:	40ca      	lsrs	r2, r1
 800bc92:	07d6      	lsls	r6, r2, #31
 800bc94:	d528      	bpl.n	800bce8 <__sflush_r+0xb8>
 800bc96:	2200      	movs	r2, #0
 800bc98:	6062      	str	r2, [r4, #4]
 800bc9a:	04d9      	lsls	r1, r3, #19
 800bc9c:	6922      	ldr	r2, [r4, #16]
 800bc9e:	6022      	str	r2, [r4, #0]
 800bca0:	d504      	bpl.n	800bcac <__sflush_r+0x7c>
 800bca2:	1c42      	adds	r2, r0, #1
 800bca4:	d101      	bne.n	800bcaa <__sflush_r+0x7a>
 800bca6:	682b      	ldr	r3, [r5, #0]
 800bca8:	b903      	cbnz	r3, 800bcac <__sflush_r+0x7c>
 800bcaa:	6560      	str	r0, [r4, #84]	; 0x54
 800bcac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcae:	602f      	str	r7, [r5, #0]
 800bcb0:	2900      	cmp	r1, #0
 800bcb2:	d0ca      	beq.n	800bc4a <__sflush_r+0x1a>
 800bcb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcb8:	4299      	cmp	r1, r3
 800bcba:	d002      	beq.n	800bcc2 <__sflush_r+0x92>
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	f7ff fbb5 	bl	800b42c <_free_r>
 800bcc2:	2000      	movs	r0, #0
 800bcc4:	6360      	str	r0, [r4, #52]	; 0x34
 800bcc6:	e7c1      	b.n	800bc4c <__sflush_r+0x1c>
 800bcc8:	6a21      	ldr	r1, [r4, #32]
 800bcca:	2301      	movs	r3, #1
 800bccc:	4628      	mov	r0, r5
 800bcce:	47b0      	blx	r6
 800bcd0:	1c41      	adds	r1, r0, #1
 800bcd2:	d1c7      	bne.n	800bc64 <__sflush_r+0x34>
 800bcd4:	682b      	ldr	r3, [r5, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d0c4      	beq.n	800bc64 <__sflush_r+0x34>
 800bcda:	2b1d      	cmp	r3, #29
 800bcdc:	d001      	beq.n	800bce2 <__sflush_r+0xb2>
 800bcde:	2b16      	cmp	r3, #22
 800bce0:	d101      	bne.n	800bce6 <__sflush_r+0xb6>
 800bce2:	602f      	str	r7, [r5, #0]
 800bce4:	e7b1      	b.n	800bc4a <__sflush_r+0x1a>
 800bce6:	89a3      	ldrh	r3, [r4, #12]
 800bce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcec:	81a3      	strh	r3, [r4, #12]
 800bcee:	e7ad      	b.n	800bc4c <__sflush_r+0x1c>
 800bcf0:	690f      	ldr	r7, [r1, #16]
 800bcf2:	2f00      	cmp	r7, #0
 800bcf4:	d0a9      	beq.n	800bc4a <__sflush_r+0x1a>
 800bcf6:	0793      	lsls	r3, r2, #30
 800bcf8:	680e      	ldr	r6, [r1, #0]
 800bcfa:	bf08      	it	eq
 800bcfc:	694b      	ldreq	r3, [r1, #20]
 800bcfe:	600f      	str	r7, [r1, #0]
 800bd00:	bf18      	it	ne
 800bd02:	2300      	movne	r3, #0
 800bd04:	eba6 0807 	sub.w	r8, r6, r7
 800bd08:	608b      	str	r3, [r1, #8]
 800bd0a:	f1b8 0f00 	cmp.w	r8, #0
 800bd0e:	dd9c      	ble.n	800bc4a <__sflush_r+0x1a>
 800bd10:	6a21      	ldr	r1, [r4, #32]
 800bd12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd14:	4643      	mov	r3, r8
 800bd16:	463a      	mov	r2, r7
 800bd18:	4628      	mov	r0, r5
 800bd1a:	47b0      	blx	r6
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	dc06      	bgt.n	800bd2e <__sflush_r+0xfe>
 800bd20:	89a3      	ldrh	r3, [r4, #12]
 800bd22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd26:	81a3      	strh	r3, [r4, #12]
 800bd28:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2c:	e78e      	b.n	800bc4c <__sflush_r+0x1c>
 800bd2e:	4407      	add	r7, r0
 800bd30:	eba8 0800 	sub.w	r8, r8, r0
 800bd34:	e7e9      	b.n	800bd0a <__sflush_r+0xda>
 800bd36:	bf00      	nop
 800bd38:	20400001 	.word	0x20400001

0800bd3c <_fflush_r>:
 800bd3c:	b538      	push	{r3, r4, r5, lr}
 800bd3e:	690b      	ldr	r3, [r1, #16]
 800bd40:	4605      	mov	r5, r0
 800bd42:	460c      	mov	r4, r1
 800bd44:	b913      	cbnz	r3, 800bd4c <_fflush_r+0x10>
 800bd46:	2500      	movs	r5, #0
 800bd48:	4628      	mov	r0, r5
 800bd4a:	bd38      	pop	{r3, r4, r5, pc}
 800bd4c:	b118      	cbz	r0, 800bd56 <_fflush_r+0x1a>
 800bd4e:	6983      	ldr	r3, [r0, #24]
 800bd50:	b90b      	cbnz	r3, 800bd56 <_fflush_r+0x1a>
 800bd52:	f000 f887 	bl	800be64 <__sinit>
 800bd56:	4b14      	ldr	r3, [pc, #80]	; (800bda8 <_fflush_r+0x6c>)
 800bd58:	429c      	cmp	r4, r3
 800bd5a:	d11b      	bne.n	800bd94 <_fflush_r+0x58>
 800bd5c:	686c      	ldr	r4, [r5, #4]
 800bd5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d0ef      	beq.n	800bd46 <_fflush_r+0xa>
 800bd66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd68:	07d0      	lsls	r0, r2, #31
 800bd6a:	d404      	bmi.n	800bd76 <_fflush_r+0x3a>
 800bd6c:	0599      	lsls	r1, r3, #22
 800bd6e:	d402      	bmi.n	800bd76 <_fflush_r+0x3a>
 800bd70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd72:	f000 f915 	bl	800bfa0 <__retarget_lock_acquire_recursive>
 800bd76:	4628      	mov	r0, r5
 800bd78:	4621      	mov	r1, r4
 800bd7a:	f7ff ff59 	bl	800bc30 <__sflush_r>
 800bd7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd80:	07da      	lsls	r2, r3, #31
 800bd82:	4605      	mov	r5, r0
 800bd84:	d4e0      	bmi.n	800bd48 <_fflush_r+0xc>
 800bd86:	89a3      	ldrh	r3, [r4, #12]
 800bd88:	059b      	lsls	r3, r3, #22
 800bd8a:	d4dd      	bmi.n	800bd48 <_fflush_r+0xc>
 800bd8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd8e:	f000 f908 	bl	800bfa2 <__retarget_lock_release_recursive>
 800bd92:	e7d9      	b.n	800bd48 <_fflush_r+0xc>
 800bd94:	4b05      	ldr	r3, [pc, #20]	; (800bdac <_fflush_r+0x70>)
 800bd96:	429c      	cmp	r4, r3
 800bd98:	d101      	bne.n	800bd9e <_fflush_r+0x62>
 800bd9a:	68ac      	ldr	r4, [r5, #8]
 800bd9c:	e7df      	b.n	800bd5e <_fflush_r+0x22>
 800bd9e:	4b04      	ldr	r3, [pc, #16]	; (800bdb0 <_fflush_r+0x74>)
 800bda0:	429c      	cmp	r4, r3
 800bda2:	bf08      	it	eq
 800bda4:	68ec      	ldreq	r4, [r5, #12]
 800bda6:	e7da      	b.n	800bd5e <_fflush_r+0x22>
 800bda8:	0800c704 	.word	0x0800c704
 800bdac:	0800c724 	.word	0x0800c724
 800bdb0:	0800c6e4 	.word	0x0800c6e4

0800bdb4 <std>:
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	b510      	push	{r4, lr}
 800bdb8:	4604      	mov	r4, r0
 800bdba:	e9c0 3300 	strd	r3, r3, [r0]
 800bdbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bdc2:	6083      	str	r3, [r0, #8]
 800bdc4:	8181      	strh	r1, [r0, #12]
 800bdc6:	6643      	str	r3, [r0, #100]	; 0x64
 800bdc8:	81c2      	strh	r2, [r0, #14]
 800bdca:	6183      	str	r3, [r0, #24]
 800bdcc:	4619      	mov	r1, r3
 800bdce:	2208      	movs	r2, #8
 800bdd0:	305c      	adds	r0, #92	; 0x5c
 800bdd2:	f7fd fb87 	bl	80094e4 <memset>
 800bdd6:	4b05      	ldr	r3, [pc, #20]	; (800bdec <std+0x38>)
 800bdd8:	6263      	str	r3, [r4, #36]	; 0x24
 800bdda:	4b05      	ldr	r3, [pc, #20]	; (800bdf0 <std+0x3c>)
 800bddc:	62a3      	str	r3, [r4, #40]	; 0x28
 800bdde:	4b05      	ldr	r3, [pc, #20]	; (800bdf4 <std+0x40>)
 800bde0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bde2:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <std+0x44>)
 800bde4:	6224      	str	r4, [r4, #32]
 800bde6:	6323      	str	r3, [r4, #48]	; 0x30
 800bde8:	bd10      	pop	{r4, pc}
 800bdea:	bf00      	nop
 800bdec:	0800c0f9 	.word	0x0800c0f9
 800bdf0:	0800c11b 	.word	0x0800c11b
 800bdf4:	0800c153 	.word	0x0800c153
 800bdf8:	0800c177 	.word	0x0800c177

0800bdfc <_cleanup_r>:
 800bdfc:	4901      	ldr	r1, [pc, #4]	; (800be04 <_cleanup_r+0x8>)
 800bdfe:	f000 b8af 	b.w	800bf60 <_fwalk_reent>
 800be02:	bf00      	nop
 800be04:	0800bd3d 	.word	0x0800bd3d

0800be08 <__sfmoreglue>:
 800be08:	b570      	push	{r4, r5, r6, lr}
 800be0a:	2268      	movs	r2, #104	; 0x68
 800be0c:	1e4d      	subs	r5, r1, #1
 800be0e:	4355      	muls	r5, r2
 800be10:	460e      	mov	r6, r1
 800be12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be16:	f7ff fa2b 	bl	800b270 <_malloc_r>
 800be1a:	4604      	mov	r4, r0
 800be1c:	b140      	cbz	r0, 800be30 <__sfmoreglue+0x28>
 800be1e:	2100      	movs	r1, #0
 800be20:	e9c0 1600 	strd	r1, r6, [r0]
 800be24:	300c      	adds	r0, #12
 800be26:	60a0      	str	r0, [r4, #8]
 800be28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be2c:	f7fd fb5a 	bl	80094e4 <memset>
 800be30:	4620      	mov	r0, r4
 800be32:	bd70      	pop	{r4, r5, r6, pc}

0800be34 <__sfp_lock_acquire>:
 800be34:	4801      	ldr	r0, [pc, #4]	; (800be3c <__sfp_lock_acquire+0x8>)
 800be36:	f000 b8b3 	b.w	800bfa0 <__retarget_lock_acquire_recursive>
 800be3a:	bf00      	nop
 800be3c:	200020a5 	.word	0x200020a5

0800be40 <__sfp_lock_release>:
 800be40:	4801      	ldr	r0, [pc, #4]	; (800be48 <__sfp_lock_release+0x8>)
 800be42:	f000 b8ae 	b.w	800bfa2 <__retarget_lock_release_recursive>
 800be46:	bf00      	nop
 800be48:	200020a5 	.word	0x200020a5

0800be4c <__sinit_lock_acquire>:
 800be4c:	4801      	ldr	r0, [pc, #4]	; (800be54 <__sinit_lock_acquire+0x8>)
 800be4e:	f000 b8a7 	b.w	800bfa0 <__retarget_lock_acquire_recursive>
 800be52:	bf00      	nop
 800be54:	200020a6 	.word	0x200020a6

0800be58 <__sinit_lock_release>:
 800be58:	4801      	ldr	r0, [pc, #4]	; (800be60 <__sinit_lock_release+0x8>)
 800be5a:	f000 b8a2 	b.w	800bfa2 <__retarget_lock_release_recursive>
 800be5e:	bf00      	nop
 800be60:	200020a6 	.word	0x200020a6

0800be64 <__sinit>:
 800be64:	b510      	push	{r4, lr}
 800be66:	4604      	mov	r4, r0
 800be68:	f7ff fff0 	bl	800be4c <__sinit_lock_acquire>
 800be6c:	69a3      	ldr	r3, [r4, #24]
 800be6e:	b11b      	cbz	r3, 800be78 <__sinit+0x14>
 800be70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be74:	f7ff bff0 	b.w	800be58 <__sinit_lock_release>
 800be78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be7c:	6523      	str	r3, [r4, #80]	; 0x50
 800be7e:	4b13      	ldr	r3, [pc, #76]	; (800becc <__sinit+0x68>)
 800be80:	4a13      	ldr	r2, [pc, #76]	; (800bed0 <__sinit+0x6c>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	62a2      	str	r2, [r4, #40]	; 0x28
 800be86:	42a3      	cmp	r3, r4
 800be88:	bf04      	itt	eq
 800be8a:	2301      	moveq	r3, #1
 800be8c:	61a3      	streq	r3, [r4, #24]
 800be8e:	4620      	mov	r0, r4
 800be90:	f000 f820 	bl	800bed4 <__sfp>
 800be94:	6060      	str	r0, [r4, #4]
 800be96:	4620      	mov	r0, r4
 800be98:	f000 f81c 	bl	800bed4 <__sfp>
 800be9c:	60a0      	str	r0, [r4, #8]
 800be9e:	4620      	mov	r0, r4
 800bea0:	f000 f818 	bl	800bed4 <__sfp>
 800bea4:	2200      	movs	r2, #0
 800bea6:	60e0      	str	r0, [r4, #12]
 800bea8:	2104      	movs	r1, #4
 800beaa:	6860      	ldr	r0, [r4, #4]
 800beac:	f7ff ff82 	bl	800bdb4 <std>
 800beb0:	68a0      	ldr	r0, [r4, #8]
 800beb2:	2201      	movs	r2, #1
 800beb4:	2109      	movs	r1, #9
 800beb6:	f7ff ff7d 	bl	800bdb4 <std>
 800beba:	68e0      	ldr	r0, [r4, #12]
 800bebc:	2202      	movs	r2, #2
 800bebe:	2112      	movs	r1, #18
 800bec0:	f7ff ff78 	bl	800bdb4 <std>
 800bec4:	2301      	movs	r3, #1
 800bec6:	61a3      	str	r3, [r4, #24]
 800bec8:	e7d2      	b.n	800be70 <__sinit+0xc>
 800beca:	bf00      	nop
 800becc:	0800c318 	.word	0x0800c318
 800bed0:	0800bdfd 	.word	0x0800bdfd

0800bed4 <__sfp>:
 800bed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed6:	4607      	mov	r7, r0
 800bed8:	f7ff ffac 	bl	800be34 <__sfp_lock_acquire>
 800bedc:	4b1e      	ldr	r3, [pc, #120]	; (800bf58 <__sfp+0x84>)
 800bede:	681e      	ldr	r6, [r3, #0]
 800bee0:	69b3      	ldr	r3, [r6, #24]
 800bee2:	b913      	cbnz	r3, 800beea <__sfp+0x16>
 800bee4:	4630      	mov	r0, r6
 800bee6:	f7ff ffbd 	bl	800be64 <__sinit>
 800beea:	3648      	adds	r6, #72	; 0x48
 800beec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bef0:	3b01      	subs	r3, #1
 800bef2:	d503      	bpl.n	800befc <__sfp+0x28>
 800bef4:	6833      	ldr	r3, [r6, #0]
 800bef6:	b30b      	cbz	r3, 800bf3c <__sfp+0x68>
 800bef8:	6836      	ldr	r6, [r6, #0]
 800befa:	e7f7      	b.n	800beec <__sfp+0x18>
 800befc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf00:	b9d5      	cbnz	r5, 800bf38 <__sfp+0x64>
 800bf02:	4b16      	ldr	r3, [pc, #88]	; (800bf5c <__sfp+0x88>)
 800bf04:	60e3      	str	r3, [r4, #12]
 800bf06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf0a:	6665      	str	r5, [r4, #100]	; 0x64
 800bf0c:	f000 f847 	bl	800bf9e <__retarget_lock_init_recursive>
 800bf10:	f7ff ff96 	bl	800be40 <__sfp_lock_release>
 800bf14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf1c:	6025      	str	r5, [r4, #0]
 800bf1e:	61a5      	str	r5, [r4, #24]
 800bf20:	2208      	movs	r2, #8
 800bf22:	4629      	mov	r1, r5
 800bf24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf28:	f7fd fadc 	bl	80094e4 <memset>
 800bf2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf34:	4620      	mov	r0, r4
 800bf36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf38:	3468      	adds	r4, #104	; 0x68
 800bf3a:	e7d9      	b.n	800bef0 <__sfp+0x1c>
 800bf3c:	2104      	movs	r1, #4
 800bf3e:	4638      	mov	r0, r7
 800bf40:	f7ff ff62 	bl	800be08 <__sfmoreglue>
 800bf44:	4604      	mov	r4, r0
 800bf46:	6030      	str	r0, [r6, #0]
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	d1d5      	bne.n	800bef8 <__sfp+0x24>
 800bf4c:	f7ff ff78 	bl	800be40 <__sfp_lock_release>
 800bf50:	230c      	movs	r3, #12
 800bf52:	603b      	str	r3, [r7, #0]
 800bf54:	e7ee      	b.n	800bf34 <__sfp+0x60>
 800bf56:	bf00      	nop
 800bf58:	0800c318 	.word	0x0800c318
 800bf5c:	ffff0001 	.word	0xffff0001

0800bf60 <_fwalk_reent>:
 800bf60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf64:	4606      	mov	r6, r0
 800bf66:	4688      	mov	r8, r1
 800bf68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf6c:	2700      	movs	r7, #0
 800bf6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf72:	f1b9 0901 	subs.w	r9, r9, #1
 800bf76:	d505      	bpl.n	800bf84 <_fwalk_reent+0x24>
 800bf78:	6824      	ldr	r4, [r4, #0]
 800bf7a:	2c00      	cmp	r4, #0
 800bf7c:	d1f7      	bne.n	800bf6e <_fwalk_reent+0xe>
 800bf7e:	4638      	mov	r0, r7
 800bf80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf84:	89ab      	ldrh	r3, [r5, #12]
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d907      	bls.n	800bf9a <_fwalk_reent+0x3a>
 800bf8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	d003      	beq.n	800bf9a <_fwalk_reent+0x3a>
 800bf92:	4629      	mov	r1, r5
 800bf94:	4630      	mov	r0, r6
 800bf96:	47c0      	blx	r8
 800bf98:	4307      	orrs	r7, r0
 800bf9a:	3568      	adds	r5, #104	; 0x68
 800bf9c:	e7e9      	b.n	800bf72 <_fwalk_reent+0x12>

0800bf9e <__retarget_lock_init_recursive>:
 800bf9e:	4770      	bx	lr

0800bfa0 <__retarget_lock_acquire_recursive>:
 800bfa0:	4770      	bx	lr

0800bfa2 <__retarget_lock_release_recursive>:
 800bfa2:	4770      	bx	lr

0800bfa4 <__swhatbuf_r>:
 800bfa4:	b570      	push	{r4, r5, r6, lr}
 800bfa6:	460e      	mov	r6, r1
 800bfa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfac:	2900      	cmp	r1, #0
 800bfae:	b096      	sub	sp, #88	; 0x58
 800bfb0:	4614      	mov	r4, r2
 800bfb2:	461d      	mov	r5, r3
 800bfb4:	da08      	bge.n	800bfc8 <__swhatbuf_r+0x24>
 800bfb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	602a      	str	r2, [r5, #0]
 800bfbe:	061a      	lsls	r2, r3, #24
 800bfc0:	d410      	bmi.n	800bfe4 <__swhatbuf_r+0x40>
 800bfc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfc6:	e00e      	b.n	800bfe6 <__swhatbuf_r+0x42>
 800bfc8:	466a      	mov	r2, sp
 800bfca:	f000 f8fb 	bl	800c1c4 <_fstat_r>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	dbf1      	blt.n	800bfb6 <__swhatbuf_r+0x12>
 800bfd2:	9a01      	ldr	r2, [sp, #4]
 800bfd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bfd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bfdc:	425a      	negs	r2, r3
 800bfde:	415a      	adcs	r2, r3
 800bfe0:	602a      	str	r2, [r5, #0]
 800bfe2:	e7ee      	b.n	800bfc2 <__swhatbuf_r+0x1e>
 800bfe4:	2340      	movs	r3, #64	; 0x40
 800bfe6:	2000      	movs	r0, #0
 800bfe8:	6023      	str	r3, [r4, #0]
 800bfea:	b016      	add	sp, #88	; 0x58
 800bfec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bff0 <__smakebuf_r>:
 800bff0:	898b      	ldrh	r3, [r1, #12]
 800bff2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bff4:	079d      	lsls	r5, r3, #30
 800bff6:	4606      	mov	r6, r0
 800bff8:	460c      	mov	r4, r1
 800bffa:	d507      	bpl.n	800c00c <__smakebuf_r+0x1c>
 800bffc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c000:	6023      	str	r3, [r4, #0]
 800c002:	6123      	str	r3, [r4, #16]
 800c004:	2301      	movs	r3, #1
 800c006:	6163      	str	r3, [r4, #20]
 800c008:	b002      	add	sp, #8
 800c00a:	bd70      	pop	{r4, r5, r6, pc}
 800c00c:	ab01      	add	r3, sp, #4
 800c00e:	466a      	mov	r2, sp
 800c010:	f7ff ffc8 	bl	800bfa4 <__swhatbuf_r>
 800c014:	9900      	ldr	r1, [sp, #0]
 800c016:	4605      	mov	r5, r0
 800c018:	4630      	mov	r0, r6
 800c01a:	f7ff f929 	bl	800b270 <_malloc_r>
 800c01e:	b948      	cbnz	r0, 800c034 <__smakebuf_r+0x44>
 800c020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c024:	059a      	lsls	r2, r3, #22
 800c026:	d4ef      	bmi.n	800c008 <__smakebuf_r+0x18>
 800c028:	f023 0303 	bic.w	r3, r3, #3
 800c02c:	f043 0302 	orr.w	r3, r3, #2
 800c030:	81a3      	strh	r3, [r4, #12]
 800c032:	e7e3      	b.n	800bffc <__smakebuf_r+0xc>
 800c034:	4b0d      	ldr	r3, [pc, #52]	; (800c06c <__smakebuf_r+0x7c>)
 800c036:	62b3      	str	r3, [r6, #40]	; 0x28
 800c038:	89a3      	ldrh	r3, [r4, #12]
 800c03a:	6020      	str	r0, [r4, #0]
 800c03c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c040:	81a3      	strh	r3, [r4, #12]
 800c042:	9b00      	ldr	r3, [sp, #0]
 800c044:	6163      	str	r3, [r4, #20]
 800c046:	9b01      	ldr	r3, [sp, #4]
 800c048:	6120      	str	r0, [r4, #16]
 800c04a:	b15b      	cbz	r3, 800c064 <__smakebuf_r+0x74>
 800c04c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c050:	4630      	mov	r0, r6
 800c052:	f000 f8c9 	bl	800c1e8 <_isatty_r>
 800c056:	b128      	cbz	r0, 800c064 <__smakebuf_r+0x74>
 800c058:	89a3      	ldrh	r3, [r4, #12]
 800c05a:	f023 0303 	bic.w	r3, r3, #3
 800c05e:	f043 0301 	orr.w	r3, r3, #1
 800c062:	81a3      	strh	r3, [r4, #12]
 800c064:	89a0      	ldrh	r0, [r4, #12]
 800c066:	4305      	orrs	r5, r0
 800c068:	81a5      	strh	r5, [r4, #12]
 800c06a:	e7cd      	b.n	800c008 <__smakebuf_r+0x18>
 800c06c:	0800bdfd 	.word	0x0800bdfd

0800c070 <_raise_r>:
 800c070:	291f      	cmp	r1, #31
 800c072:	b538      	push	{r3, r4, r5, lr}
 800c074:	4604      	mov	r4, r0
 800c076:	460d      	mov	r5, r1
 800c078:	d904      	bls.n	800c084 <_raise_r+0x14>
 800c07a:	2316      	movs	r3, #22
 800c07c:	6003      	str	r3, [r0, #0]
 800c07e:	f04f 30ff 	mov.w	r0, #4294967295
 800c082:	bd38      	pop	{r3, r4, r5, pc}
 800c084:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c086:	b112      	cbz	r2, 800c08e <_raise_r+0x1e>
 800c088:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c08c:	b94b      	cbnz	r3, 800c0a2 <_raise_r+0x32>
 800c08e:	4620      	mov	r0, r4
 800c090:	f000 f830 	bl	800c0f4 <_getpid_r>
 800c094:	462a      	mov	r2, r5
 800c096:	4601      	mov	r1, r0
 800c098:	4620      	mov	r0, r4
 800c09a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c09e:	f000 b817 	b.w	800c0d0 <_kill_r>
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d00a      	beq.n	800c0bc <_raise_r+0x4c>
 800c0a6:	1c59      	adds	r1, r3, #1
 800c0a8:	d103      	bne.n	800c0b2 <_raise_r+0x42>
 800c0aa:	2316      	movs	r3, #22
 800c0ac:	6003      	str	r3, [r0, #0]
 800c0ae:	2001      	movs	r0, #1
 800c0b0:	e7e7      	b.n	800c082 <_raise_r+0x12>
 800c0b2:	2400      	movs	r4, #0
 800c0b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	4798      	blx	r3
 800c0bc:	2000      	movs	r0, #0
 800c0be:	e7e0      	b.n	800c082 <_raise_r+0x12>

0800c0c0 <raise>:
 800c0c0:	4b02      	ldr	r3, [pc, #8]	; (800c0cc <raise+0xc>)
 800c0c2:	4601      	mov	r1, r0
 800c0c4:	6818      	ldr	r0, [r3, #0]
 800c0c6:	f7ff bfd3 	b.w	800c070 <_raise_r>
 800c0ca:	bf00      	nop
 800c0cc:	200000fc 	.word	0x200000fc

0800c0d0 <_kill_r>:
 800c0d0:	b538      	push	{r3, r4, r5, lr}
 800c0d2:	4d07      	ldr	r5, [pc, #28]	; (800c0f0 <_kill_r+0x20>)
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	4608      	mov	r0, r1
 800c0da:	4611      	mov	r1, r2
 800c0dc:	602b      	str	r3, [r5, #0]
 800c0de:	f7f5 fd1b 	bl	8001b18 <_kill>
 800c0e2:	1c43      	adds	r3, r0, #1
 800c0e4:	d102      	bne.n	800c0ec <_kill_r+0x1c>
 800c0e6:	682b      	ldr	r3, [r5, #0]
 800c0e8:	b103      	cbz	r3, 800c0ec <_kill_r+0x1c>
 800c0ea:	6023      	str	r3, [r4, #0]
 800c0ec:	bd38      	pop	{r3, r4, r5, pc}
 800c0ee:	bf00      	nop
 800c0f0:	200020a0 	.word	0x200020a0

0800c0f4 <_getpid_r>:
 800c0f4:	f7f5 bd08 	b.w	8001b08 <_getpid>

0800c0f8 <__sread>:
 800c0f8:	b510      	push	{r4, lr}
 800c0fa:	460c      	mov	r4, r1
 800c0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c100:	f000 f894 	bl	800c22c <_read_r>
 800c104:	2800      	cmp	r0, #0
 800c106:	bfab      	itete	ge
 800c108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c10a:	89a3      	ldrhlt	r3, [r4, #12]
 800c10c:	181b      	addge	r3, r3, r0
 800c10e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c112:	bfac      	ite	ge
 800c114:	6563      	strge	r3, [r4, #84]	; 0x54
 800c116:	81a3      	strhlt	r3, [r4, #12]
 800c118:	bd10      	pop	{r4, pc}

0800c11a <__swrite>:
 800c11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c11e:	461f      	mov	r7, r3
 800c120:	898b      	ldrh	r3, [r1, #12]
 800c122:	05db      	lsls	r3, r3, #23
 800c124:	4605      	mov	r5, r0
 800c126:	460c      	mov	r4, r1
 800c128:	4616      	mov	r6, r2
 800c12a:	d505      	bpl.n	800c138 <__swrite+0x1e>
 800c12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c130:	2302      	movs	r3, #2
 800c132:	2200      	movs	r2, #0
 800c134:	f000 f868 	bl	800c208 <_lseek_r>
 800c138:	89a3      	ldrh	r3, [r4, #12]
 800c13a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c13e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c142:	81a3      	strh	r3, [r4, #12]
 800c144:	4632      	mov	r2, r6
 800c146:	463b      	mov	r3, r7
 800c148:	4628      	mov	r0, r5
 800c14a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c14e:	f000 b817 	b.w	800c180 <_write_r>

0800c152 <__sseek>:
 800c152:	b510      	push	{r4, lr}
 800c154:	460c      	mov	r4, r1
 800c156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c15a:	f000 f855 	bl	800c208 <_lseek_r>
 800c15e:	1c43      	adds	r3, r0, #1
 800c160:	89a3      	ldrh	r3, [r4, #12]
 800c162:	bf15      	itete	ne
 800c164:	6560      	strne	r0, [r4, #84]	; 0x54
 800c166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c16a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c16e:	81a3      	strheq	r3, [r4, #12]
 800c170:	bf18      	it	ne
 800c172:	81a3      	strhne	r3, [r4, #12]
 800c174:	bd10      	pop	{r4, pc}

0800c176 <__sclose>:
 800c176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c17a:	f000 b813 	b.w	800c1a4 <_close_r>
	...

0800c180 <_write_r>:
 800c180:	b538      	push	{r3, r4, r5, lr}
 800c182:	4d07      	ldr	r5, [pc, #28]	; (800c1a0 <_write_r+0x20>)
 800c184:	4604      	mov	r4, r0
 800c186:	4608      	mov	r0, r1
 800c188:	4611      	mov	r1, r2
 800c18a:	2200      	movs	r2, #0
 800c18c:	602a      	str	r2, [r5, #0]
 800c18e:	461a      	mov	r2, r3
 800c190:	f7f5 fcf9 	bl	8001b86 <_write>
 800c194:	1c43      	adds	r3, r0, #1
 800c196:	d102      	bne.n	800c19e <_write_r+0x1e>
 800c198:	682b      	ldr	r3, [r5, #0]
 800c19a:	b103      	cbz	r3, 800c19e <_write_r+0x1e>
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	bd38      	pop	{r3, r4, r5, pc}
 800c1a0:	200020a0 	.word	0x200020a0

0800c1a4 <_close_r>:
 800c1a4:	b538      	push	{r3, r4, r5, lr}
 800c1a6:	4d06      	ldr	r5, [pc, #24]	; (800c1c0 <_close_r+0x1c>)
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	4608      	mov	r0, r1
 800c1ae:	602b      	str	r3, [r5, #0]
 800c1b0:	f7f5 fd05 	bl	8001bbe <_close>
 800c1b4:	1c43      	adds	r3, r0, #1
 800c1b6:	d102      	bne.n	800c1be <_close_r+0x1a>
 800c1b8:	682b      	ldr	r3, [r5, #0]
 800c1ba:	b103      	cbz	r3, 800c1be <_close_r+0x1a>
 800c1bc:	6023      	str	r3, [r4, #0]
 800c1be:	bd38      	pop	{r3, r4, r5, pc}
 800c1c0:	200020a0 	.word	0x200020a0

0800c1c4 <_fstat_r>:
 800c1c4:	b538      	push	{r3, r4, r5, lr}
 800c1c6:	4d07      	ldr	r5, [pc, #28]	; (800c1e4 <_fstat_r+0x20>)
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	4604      	mov	r4, r0
 800c1cc:	4608      	mov	r0, r1
 800c1ce:	4611      	mov	r1, r2
 800c1d0:	602b      	str	r3, [r5, #0]
 800c1d2:	f7f5 fd00 	bl	8001bd6 <_fstat>
 800c1d6:	1c43      	adds	r3, r0, #1
 800c1d8:	d102      	bne.n	800c1e0 <_fstat_r+0x1c>
 800c1da:	682b      	ldr	r3, [r5, #0]
 800c1dc:	b103      	cbz	r3, 800c1e0 <_fstat_r+0x1c>
 800c1de:	6023      	str	r3, [r4, #0]
 800c1e0:	bd38      	pop	{r3, r4, r5, pc}
 800c1e2:	bf00      	nop
 800c1e4:	200020a0 	.word	0x200020a0

0800c1e8 <_isatty_r>:
 800c1e8:	b538      	push	{r3, r4, r5, lr}
 800c1ea:	4d06      	ldr	r5, [pc, #24]	; (800c204 <_isatty_r+0x1c>)
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	4608      	mov	r0, r1
 800c1f2:	602b      	str	r3, [r5, #0]
 800c1f4:	f7f5 fcff 	bl	8001bf6 <_isatty>
 800c1f8:	1c43      	adds	r3, r0, #1
 800c1fa:	d102      	bne.n	800c202 <_isatty_r+0x1a>
 800c1fc:	682b      	ldr	r3, [r5, #0]
 800c1fe:	b103      	cbz	r3, 800c202 <_isatty_r+0x1a>
 800c200:	6023      	str	r3, [r4, #0]
 800c202:	bd38      	pop	{r3, r4, r5, pc}
 800c204:	200020a0 	.word	0x200020a0

0800c208 <_lseek_r>:
 800c208:	b538      	push	{r3, r4, r5, lr}
 800c20a:	4d07      	ldr	r5, [pc, #28]	; (800c228 <_lseek_r+0x20>)
 800c20c:	4604      	mov	r4, r0
 800c20e:	4608      	mov	r0, r1
 800c210:	4611      	mov	r1, r2
 800c212:	2200      	movs	r2, #0
 800c214:	602a      	str	r2, [r5, #0]
 800c216:	461a      	mov	r2, r3
 800c218:	f7f5 fcf8 	bl	8001c0c <_lseek>
 800c21c:	1c43      	adds	r3, r0, #1
 800c21e:	d102      	bne.n	800c226 <_lseek_r+0x1e>
 800c220:	682b      	ldr	r3, [r5, #0]
 800c222:	b103      	cbz	r3, 800c226 <_lseek_r+0x1e>
 800c224:	6023      	str	r3, [r4, #0]
 800c226:	bd38      	pop	{r3, r4, r5, pc}
 800c228:	200020a0 	.word	0x200020a0

0800c22c <_read_r>:
 800c22c:	b538      	push	{r3, r4, r5, lr}
 800c22e:	4d07      	ldr	r5, [pc, #28]	; (800c24c <_read_r+0x20>)
 800c230:	4604      	mov	r4, r0
 800c232:	4608      	mov	r0, r1
 800c234:	4611      	mov	r1, r2
 800c236:	2200      	movs	r2, #0
 800c238:	602a      	str	r2, [r5, #0]
 800c23a:	461a      	mov	r2, r3
 800c23c:	f7f5 fc86 	bl	8001b4c <_read>
 800c240:	1c43      	adds	r3, r0, #1
 800c242:	d102      	bne.n	800c24a <_read_r+0x1e>
 800c244:	682b      	ldr	r3, [r5, #0]
 800c246:	b103      	cbz	r3, 800c24a <_read_r+0x1e>
 800c248:	6023      	str	r3, [r4, #0]
 800c24a:	bd38      	pop	{r3, r4, r5, pc}
 800c24c:	200020a0 	.word	0x200020a0

0800c250 <_init>:
 800c250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c252:	bf00      	nop
 800c254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c256:	bc08      	pop	{r3}
 800c258:	469e      	mov	lr, r3
 800c25a:	4770      	bx	lr

0800c25c <_fini>:
 800c25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25e:	bf00      	nop
 800c260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c262:	bc08      	pop	{r3}
 800c264:	469e      	mov	lr, r3
 800c266:	4770      	bx	lr
